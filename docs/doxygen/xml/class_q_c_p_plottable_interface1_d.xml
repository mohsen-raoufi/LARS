<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_plottable_interface1_d" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QCPPlottableInterface1D</compoundname>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPBarsData &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPCurveData &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPFinancialData &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPGraphData &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPStatisticalBoxData &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; DataType &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_error_bars" prot="public" virt="non-virtual">QCPErrorBars</derivedcompoundref>
    <includes refid="qcustomplot_8h" local="no">qcustomplot.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_plottable_interface1_d_1a97508cd3c61b9e8580b9f0d9964f7fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual QCPPlottableInterface1D::~QCPPlottableInterface1D</definition>
        <argsstring>()=default</argsstring>
        <name>~QCPPlottableInterface1D</name>
        <qualifiedname>QCPPlottableInterface1D::~QCPPlottableInterface1D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4126" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_plottable_interface1_d_1adf4ce17d263b506df80d0ac37e497432" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int QCPPlottableInterface1D::dataCount</definition>
        <argsstring>() const =0</argsstring>
        <name>dataCount</name>
        <qualifiedname>QCPPlottableInterface1D::dataCount</qualifiedname>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ab5dd99e4f1621e7dbd63438e0b02984e">dataCount</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ab5dd99e4f1621e7dbd63438e0b02984e">dataCount</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ab5dd99e4f1621e7dbd63438e0b02984e">dataCount</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ab5dd99e4f1621e7dbd63438e0b02984e">dataCount</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ab5dd99e4f1621e7dbd63438e0b02984e">dataCount</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ab5dd99e4f1621e7dbd63438e0b02984e">dataCount</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1a18b797c62f2af000b926e52eb46d97c7">dataCount</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of data points of the plottable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4128" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_plottable_interface1_d_1a572ed2583cb6a2bb590a265c3fc2b004" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double QCPPlottableInterface1D::dataMainKey</definition>
        <argsstring>(int index) const =0</argsstring>
        <name>dataMainKey</name>
        <qualifiedname>QCPPlottableInterface1D::dataMainKey</qualifiedname>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aeb156ebf5d3c8de906b428be30733ad8">dataMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aeb156ebf5d3c8de906b428be30733ad8">dataMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aeb156ebf5d3c8de906b428be30733ad8">dataMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aeb156ebf5d3c8de906b428be30733ad8">dataMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aeb156ebf5d3c8de906b428be30733ad8">dataMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aeb156ebf5d3c8de906b428be30733ad8">dataMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1a7cba420078adc523efa59fb8c6ca23e0">dataMainKey</reimplementedby>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the main key of the data point at the given <emphasis>index</emphasis>.</para>
<para>What the main key is, is defined by the plottable&apos;s data type. See the <ref refid="class_q_c_p_data_container_1qcpdatacontainer-datatype" kindref="member">QCPDataContainer DataType</ref> documentation for details about this naming convention. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4129" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_plottable_interface1_d_1aa21351ab3d6edbcf8d95f9c377e5003b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double QCPPlottableInterface1D::dataSortKey</definition>
        <argsstring>(int index) const =0</argsstring>
        <name>dataSortKey</name>
        <qualifiedname>QCPPlottableInterface1D::dataSortKey</qualifiedname>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aa8277da921b009bce474437d50b4a2d8">dataSortKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aa8277da921b009bce474437d50b4a2d8">dataSortKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aa8277da921b009bce474437d50b4a2d8">dataSortKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aa8277da921b009bce474437d50b4a2d8">dataSortKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aa8277da921b009bce474437d50b4a2d8">dataSortKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1aa8277da921b009bce474437d50b4a2d8">dataSortKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1a3000a036124880a90c629d124c1cd1e2">dataSortKey</reimplementedby>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the sort key of the data point at the given <emphasis>index</emphasis>.</para>
<para>What the sort key is, is defined by the plottable&apos;s data type. See the <ref refid="class_q_c_p_data_container_1qcpdatacontainer-datatype" kindref="member">QCPDataContainer DataType</ref> documentation for details about this naming convention. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4130" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_plottable_interface1_d_1a17f6fbd78e004b6f3c8257fea50f9808" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double QCPPlottableInterface1D::dataMainValue</definition>
        <argsstring>(int index) const =0</argsstring>
        <name>dataMainValue</name>
        <qualifiedname>QCPPlottableInterface1D::dataMainValue</qualifiedname>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6be0f657ba85a1688336d76ad649ecf2">dataMainValue</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6be0f657ba85a1688336d76ad649ecf2">dataMainValue</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6be0f657ba85a1688336d76ad649ecf2">dataMainValue</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6be0f657ba85a1688336d76ad649ecf2">dataMainValue</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6be0f657ba85a1688336d76ad649ecf2">dataMainValue</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6be0f657ba85a1688336d76ad649ecf2">dataMainValue</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1ae9f6c79c03147efb1a67742c55386dc8">dataMainValue</reimplementedby>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the main value of the data point at the given <emphasis>index</emphasis>.</para>
<para>What the main value is, is defined by the plottable&apos;s data type. See the <ref refid="class_q_c_p_data_container_1qcpdatacontainer-datatype" kindref="member">QCPDataContainer DataType</ref> documentation for details about this naming convention. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4131" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_plottable_interface1_d_1af9a720ace6499337406a5e65d4823f57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>virtual QCPRange QCPPlottableInterface1D::dataValueRange</definition>
        <argsstring>(int index) const =0</argsstring>
        <name>dataValueRange</name>
        <qualifiedname>QCPPlottableInterface1D::dataValueRange</qualifiedname>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a55f937ba6a63e56e57f0b1a6e85a333a">dataValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a55f937ba6a63e56e57f0b1a6e85a333a">dataValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a55f937ba6a63e56e57f0b1a6e85a333a">dataValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a55f937ba6a63e56e57f0b1a6e85a333a">dataValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a55f937ba6a63e56e57f0b1a6e85a333a">dataValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a55f937ba6a63e56e57f0b1a6e85a333a">dataValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1af71af55d929d832daf32e283b21e1f3e">dataValueRange</reimplementedby>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value range of the data point at the given <emphasis>index</emphasis>.</para>
<para>What the value range is, is defined by the plottable&apos;s data type. See the <ref refid="class_q_c_p_data_container_1qcpdatacontainer-datatype" kindref="member">QCPDataContainer DataType</ref> documentation for details about this naming convention. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4132" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_plottable_interface1_d_1a35fd032c6e5226ff7b50e0f37c57922b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>QPointF</type>
        <definition>virtual QPointF QCPPlottableInterface1D::dataPixelPosition</definition>
        <argsstring>(int index) const =0</argsstring>
        <name>dataPixelPosition</name>
        <qualifiedname>QCPPlottableInterface1D::dataPixelPosition</qualifiedname>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6ca0699a6af5f25a7565de7c50ce13b2">dataPixelPosition</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6ca0699a6af5f25a7565de7c50ce13b2">dataPixelPosition</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6ca0699a6af5f25a7565de7c50ce13b2">dataPixelPosition</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6ca0699a6af5f25a7565de7c50ce13b2">dataPixelPosition</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6ca0699a6af5f25a7565de7c50ce13b2">dataPixelPosition</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6ca0699a6af5f25a7565de7c50ce13b2">dataPixelPosition</reimplementedby>
        <reimplementedby refid="class_q_c_p_bars_1a55cdaf565cd3384158d1f7f89533bc2d">dataPixelPosition</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1ae79fed6566f1912a97344b20b35faac1">dataPixelPosition</reimplementedby>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pixel position on the widget surface at which the data point at the given <emphasis>index</emphasis> appears.</para>
<para>Usually this corresponds to the point of dataMainKey/ dataMainValue, in pixel coordinates. However, depending on the plottable, this might be a different apparent position than just a coord-to-pixel transform of those values. For example, <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref> apparent data values can be shifted depending on their stacking, bar grouping or configured base value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4133" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_plottable_interface1_d_1acec8492c49e051aaec5ca5267900a98e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool QCPPlottableInterface1D::sortKeyIsMainKey</definition>
        <argsstring>() const =0</argsstring>
        <name>sortKeyIsMainKey</name>
        <qualifiedname>QCPPlottableInterface1D::sortKeyIsMainKey</qualifiedname>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1afe0d56e39cc076032922f059b304c092">sortKeyIsMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1afe0d56e39cc076032922f059b304c092">sortKeyIsMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1afe0d56e39cc076032922f059b304c092">sortKeyIsMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1afe0d56e39cc076032922f059b304c092">sortKeyIsMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1afe0d56e39cc076032922f059b304c092">sortKeyIsMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1afe0d56e39cc076032922f059b304c092">sortKeyIsMainKey</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1af75958b95d9b9c7edfd9851c1d123850">sortKeyIsMainKey</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the sort key (<ref refid="class_q_c_p_plottable_interface1_d_1aa21351ab3d6edbcf8d95f9c377e5003b" kindref="member">dataSortKey</ref>) is identical to the main key (<ref refid="class_q_c_p_plottable_interface1_d_1a572ed2583cb6a2bb590a265c3fc2b004" kindref="member">dataMainKey</ref>).</para>
<para>What the sort and main keys are, is defined by the plottable&apos;s data type. See the <ref refid="class_q_c_p_data_container_1qcpdatacontainer-datatype" kindref="member">QCPDataContainer DataType</ref> documentation for details about this naming convention. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4134" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_plottable_interface1_d_1a05874ade11a735bb290bb96ccf7fdac1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>virtual QCPDataSelection QCPPlottableInterface1D::selectTestRect</definition>
        <argsstring>(const QRectF &amp;rect, bool onlySelectable) const =0</argsstring>
        <name>selectTestRect</name>
        <qualifiedname>QCPPlottableInterface1D::selectTestRect</qualifiedname>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded">selectTestRect</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded">selectTestRect</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded">selectTestRect</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded">selectTestRect</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded">selectTestRect</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded">selectTestRect</reimplementedby>
        <reimplementedby refid="class_q_c_p_bars_1ab03bb6125c3e983b89d694f75ce6b3d5">selectTestRect</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1ad7c727736599dfb173f0952082e1a5b6">selectTestRect</reimplementedby>
        <reimplementedby refid="class_q_c_p_financial_1a3c5beb1ab028a1dba845fc9dcffc7cf4">selectTestRect</reimplementedby>
        <reimplementedby refid="class_q_c_p_statistical_box_1a42febad6ad5e924a151434cc434b4ffc">selectTestRect</reimplementedby>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a data selection containing all the data points of this plottable which are contained (or hit by) <emphasis>rect</emphasis>. This is used mainly in the selection rect interaction for data selection (data selection mechanism).</para>
<para>If <emphasis>onlySelectable</emphasis> is true, an empty <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> is returned if this plottable is not selectable (i.e. if <ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">QCPAbstractPlottable::setSelectable</ref> is <ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038aa64628e338a2dd1e6f0dc84dec0b63fe" kindref="member">QCP::stNone</ref>).</para>
<para><simplesect kind="note"><para><emphasis>rect</emphasis> must be a normalized rect (positive or zero width and height). This is especially important when using the rect of <ref refid="class_q_c_p_selection_rect_1a15a43542e1f7b953a44c260b419e6d2c" kindref="member">QCPSelectionRect::accepted</ref>, which is not necessarily normalized. Use <computeroutput>QRect::normalized()</computeroutput> when passing a rect which might not be normalized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4135" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_plottable_interface1_d_1ac8f224af7f2afeed46d82368344d8d9e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int QCPPlottableInterface1D::findBegin</definition>
        <argsstring>(double sortKey, bool expandedRange=true) const =0</argsstring>
        <name>findBegin</name>
        <qualifiedname>QCPPlottableInterface1D::findBegin</qualifiedname>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6">findBegin</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6">findBegin</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6">findBegin</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6">findBegin</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6">findBegin</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6">findBegin</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1a74c57d6abb8eda3c4c31b72d1df9f568">findBegin</reimplementedby>
        <param>
          <type>double</type>
          <declname>sortKey</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expandedRange</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the data point with a (sort-)key that is equal to, just below, or just above <emphasis>sortKey</emphasis>. If <emphasis>expandedRange</emphasis> is true, the data point just below <emphasis>sortKey</emphasis> will be considered, otherwise the one just above.</para>
<para>This can be used in conjunction with <ref refid="class_q_c_p_plottable_interface1_d_1a2a6f8cad846ea18d3ab46a95047de681" kindref="member">findEnd</ref> to iterate over data points within a given key range, including or excluding the bounding data points that are just beyond the specified range.</para>
<para>If <emphasis>expandedRange</emphasis> is true but there are no data points below <emphasis>sortKey</emphasis>, 0 is returned.</para>
<para>If the container is empty, returns 0 (in that case, <ref refid="class_q_c_p_plottable_interface1_d_1a2a6f8cad846ea18d3ab46a95047de681" kindref="member">findEnd</ref> will also return 0, so a loop using these methods will not iterate over the index 0).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_plottable_interface1_d_1a2a6f8cad846ea18d3ab46a95047de681" kindref="member">findEnd</ref>, <ref refid="class_q_c_p_data_container_1a2ad8a5399072d99a242d3a6d2d7e278a" kindref="member">QCPDataContainer::findBegin</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4136" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_plottable_interface1_d_1a2a6f8cad846ea18d3ab46a95047de681" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int QCPPlottableInterface1D::findEnd</definition>
        <argsstring>(double sortKey, bool expandedRange=true) const =0</argsstring>
        <name>findEnd</name>
        <qualifiedname>QCPPlottableInterface1D::findEnd</qualifiedname>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a">findEnd</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a">findEnd</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a">findEnd</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a">findEnd</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a">findEnd</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a">findEnd</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1ad22dd8499c6d45176ad0651751a0b0b0">findEnd</reimplementedby>
        <param>
          <type>double</type>
          <declname>sortKey</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expandedRange</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index one after the data point with a (sort-)key that is equal to, just above, or just below <emphasis>sortKey</emphasis>. If <emphasis>expandedRange</emphasis> is true, the data point just above <emphasis>sortKey</emphasis> will be considered, otherwise the one just below.</para>
<para>This can be used in conjunction with <ref refid="class_q_c_p_plottable_interface1_d_1ac8f224af7f2afeed46d82368344d8d9e" kindref="member">findBegin</ref> to iterate over data points within a given key range, including the bounding data points that are just below and above the specified range.</para>
<para>If <emphasis>expandedRange</emphasis> is true but there are no data points above <emphasis>sortKey</emphasis>, the index just above the highest data point is returned.</para>
<para>If the container is empty, returns 0.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_plottable_interface1_d_1ac8f224af7f2afeed46d82368344d8d9e" kindref="member">findBegin</ref>, <ref refid="class_q_c_p_data_container_1afb8b8f23cc2b7234a793a25ce79fe48f" kindref="member">QCPDataContainer::findEnd</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4137" column="15"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Defines an abstract interface for one-dimensional plottables. </para>
    </briefdescription>
    <detaileddescription>
<para>This class contains only pure virtual methods which define a common interface to the data of one-dimensional plottables.</para>
<para>For example, it is implemented by the template class <ref refid="class_q_c_p_abstract_plottable1_d" kindref="compound">QCPAbstractPlottable1D</ref> (the preferred base class for one-dimensional plottables). So if you use that template class as base class of your one-dimensional plottable, you won&apos;t have to care about implementing the 1d interface yourself.</para>
<para>If your plottable doesn&apos;t derive from <ref refid="class_q_c_p_abstract_plottable1_d" kindref="compound">QCPAbstractPlottable1D</ref> but still wants to provide a 1d interface (e.g. like <ref refid="class_q_c_p_error_bars" kindref="compound">QCPErrorBars</ref> does), you should inherit from both <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> and <ref refid="class_q_c_p_plottable_interface1_d" kindref="compound">QCPPlottableInterface1D</ref> and accordingly reimplement the pure virtual methods of the 1d interface, matching your data container. Also, reimplement <ref refid="class_q_c_p_abstract_plottable_1a53c8b30779771f2c743104e652e74ab1" kindref="member">QCPAbstractPlottable::interface1D</ref> to return the <computeroutput>this</computeroutput> pointer.</para>
<para>If you have a <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> pointer, you can check whether it implements this interface by calling <ref refid="class_q_c_p_abstract_plottable_1a53c8b30779771f2c743104e652e74ab1" kindref="member">QCPAbstractPlottable::interface1D</ref> and testing it for a non-zero return value. If it indeed implements this interface, you may use it to access the plottable&apos;s data without needing to know the exact type of the plottable or its data point type. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="12">
        <label>QCPAbstractPlottable1D&lt; DataType &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPAbstractPlottable1D&lt; QCPBarsData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QCPAbstractPlottable1D&lt; QCPCurveData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QCPAbstractPlottable1D&lt; QCPFinancialData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QCPAbstractPlottable1D&lt; QCPGraphData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QCPAbstractPlottable1D&lt; QCPStatisticalBoxData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QCPBars</label>
        <link refid="class_q_c_p_bars"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QCPCurve</label>
        <link refid="class_q_c_p_curve"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>QCPErrorBars</label>
        <link refid="class_q_c_p_error_bars"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QCPFinancial</label>
        <link refid="class_q_c_p_financial"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QCPGraph</label>
        <link refid="class_q_c_p_graph"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QCPPlottableInterface1D</label>
        <link refid="class_q_c_p_plottable_interface1_d"/>
      </node>
      <node id="11">
        <label>QCPStatisticalBox</label>
        <link refid="class_q_c_p_statistical_box"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="qcustomplot.h" line="4123" column="1" bodyfile="qcustomplot.h" bodystart="4124" bodyend="4138"/>
    <listofallmembers>
      <member refid="class_q_c_p_plottable_interface1_d_1adf4ce17d263b506df80d0ac37e497432" prot="public" virt="pure-virtual"><scope>QCPPlottableInterface1D</scope><name>dataCount</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1a572ed2583cb6a2bb590a265c3fc2b004" prot="public" virt="pure-virtual"><scope>QCPPlottableInterface1D</scope><name>dataMainKey</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1a17f6fbd78e004b6f3c8257fea50f9808" prot="public" virt="pure-virtual"><scope>QCPPlottableInterface1D</scope><name>dataMainValue</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1a35fd032c6e5226ff7b50e0f37c57922b" prot="public" virt="pure-virtual"><scope>QCPPlottableInterface1D</scope><name>dataPixelPosition</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1aa21351ab3d6edbcf8d95f9c377e5003b" prot="public" virt="pure-virtual"><scope>QCPPlottableInterface1D</scope><name>dataSortKey</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1af9a720ace6499337406a5e65d4823f57" prot="public" virt="pure-virtual"><scope>QCPPlottableInterface1D</scope><name>dataValueRange</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1ac8f224af7f2afeed46d82368344d8d9e" prot="public" virt="pure-virtual"><scope>QCPPlottableInterface1D</scope><name>findBegin</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1a2a6f8cad846ea18d3ab46a95047de681" prot="public" virt="pure-virtual"><scope>QCPPlottableInterface1D</scope><name>findEnd</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1a05874ade11a735bb290bb96ccf7fdac1" prot="public" virt="pure-virtual"><scope>QCPPlottableInterface1D</scope><name>selectTestRect</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1acec8492c49e051aaec5ca5267900a98e" prot="public" virt="pure-virtual"><scope>QCPPlottableInterface1D</scope><name>sortKeyIsMainKey</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1a97508cd3c61b9e8580b9f0d9964f7fb1" prot="public" virt="virtual"><scope>QCPPlottableInterface1D</scope><name>~QCPPlottableInterface1D</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
