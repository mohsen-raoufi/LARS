<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_layout" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QCPLayout</compoundname>
    <basecompoundref refid="class_q_c_p_layout_element" prot="public" virt="non-virtual">QCPLayoutElement</basecompoundref>
    <derivedcompoundref refid="class_q_c_p_layout_grid" prot="public" virt="non-virtual">QCPLayoutGrid</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_layout_inset" prot="public" virt="non-virtual">QCPLayoutInset</derivedcompoundref>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_c_p_layout_1a0790750c7e7f14fdbd960d172655b42b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPLayoutElement</definition>
        <argsstring></argsstring>
        <name>QCPLayoutElement</name>
        <qualifiedname>QCPLayout::QCPLayoutElement</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1342" column="16" bodyfile="qcustomplot.h" bodystart="1342" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_layout_1a04222e6e1361fd802d48f1a25b7020d4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPLayout::QCPLayout</definition>
        <argsstring>()</argsstring>
        <name>QCPLayout</name>
        <qualifiedname>QCPLayout::QCPLayout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an instance of <ref refid="class_q_c_p_layout" kindref="compound">QCPLayout</ref> and sets default values. Note that since <ref refid="class_q_c_p_layout" kindref="compound">QCPLayout</ref> is an abstract base class, it can&apos;t be instantiated directly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1310" column="12" bodyfile="qcustomplot.cpp" bodystart="3666" bodyend="3668"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1a48ecc9c98ea90b547c3e27a931a8f7bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPLayout::update</definition>
        <argsstring>(UpdatePhase phase) Q_DECL_OVERRIDE</argsstring>
        <name>update</name>
        <qualifiedname>QCPLayout::update</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1a929c2ec62e0e0e1d8418eaa802e2af9b">update</reimplements>
        <param>
          <type><ref refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d" kindref="member">UpdatePhase</ref></type>
          <declname>phase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>phase</emphasis> is <ref refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da5d1ccf5d79967c232c3c511796860045" kindref="member">upLayout</ref>, calls updateLayout, which subclasses may reimplement to reposition and resize their cells.</para>
<para>Finally, the call is propagated down to all child <ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElements</ref>.</para>
<para>For details about this method and the update phases, see the documentation of <ref refid="class_q_c_p_layout_element_1a929c2ec62e0e0e1d8418eaa802e2af9b" kindref="member">QCPLayoutElement::update</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1313" column="16" bodyfile="qcustomplot.cpp" bodystart="3679" bodyend="3694"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1aca129722c019f91d3367046f80abfa77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QList&lt; <ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> * &gt;</type>
        <definition>QList&lt; QCPLayoutElement * &gt; QCPLayout::elements</definition>
        <argsstring>(bool recursive) const Q_DECL_OVERRIDE</argsstring>
        <name>elements</name>
        <qualifiedname>QCPLayout::elements</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1a76dec8cb31e498994a944d7647a43309">elements</reimplements>
        <reimplementedby refid="class_q_c_p_layout_grid_1a7d5b968b4cf57393e9e387976d91f8f7">elements</reimplementedby>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of all child elements in this layout element. If <emphasis>recursive</emphasis> is true, all sub-child elements are included in the list, too.</para>
<para><simplesect kind="warning"><para>There may be <computeroutput>nullptr</computeroutput> entries in the returned list. For example, <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref> may have empty cells which yield <computeroutput>nullptr</computeroutput> at the respective index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1314" column="17" bodyfile="qcustomplot.cpp" bodystart="3697" bodyend="3715"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1acc6012e7dacc55c4282942c31c45b8d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int QCPLayout::elementCount</definition>
        <argsstring>() const =0</argsstring>
        <name>elementCount</name>
        <qualifiedname>QCPLayout::elementCount</qualifiedname>
        <reimplementedby refid="class_q_c_p_layout_grid_1a9a8942aface780a02445ebcf14c48513">elementCount</reimplementedby>
        <reimplementedby refid="class_q_c_p_layout_inset_1a7f5aa4d48a2e844cfe6dd7ed8f0861df">elementCount</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements/cells in the layout.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_1aca129722c019f91d3367046f80abfa77" kindref="member">elements</ref>, <ref refid="class_q_c_p_layout_1ab22bd9153d855a35ab4010267ae36a69" kindref="member">elementAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1317" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1ab22bd9153d855a35ab4010267ae36a69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
        <definition>virtual QCPLayoutElement * QCPLayout::elementAt</definition>
        <argsstring>(int index) const =0</argsstring>
        <name>elementAt</name>
        <qualifiedname>QCPLayout::elementAt</qualifiedname>
        <reimplementedby refid="class_q_c_p_layout_grid_1a4288f174082555f6bd92021bdedb75dc">elementAt</reimplementedby>
        <reimplementedby refid="class_q_c_p_layout_inset_1a881ca205605bae9c034733b808f93a02">elementAt</reimplementedby>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the element in the cell with the given <emphasis>index</emphasis>. If <emphasis>index</emphasis> is invalid, returns <computeroutput>nullptr</computeroutput>.</para>
<para>Note that even if <emphasis>index</emphasis> is valid, the respective cell may be empty in some layouts (e.g. <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref>), so this function may return <computeroutput>nullptr</computeroutput> in those cases. You may use this function to check whether a cell is empty or not.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_1aca129722c019f91d3367046f80abfa77" kindref="member">elements</ref>, <ref refid="class_q_c_p_layout_1acc6012e7dacc55c4282942c31c45b8d9" kindref="member">elementCount</ref>, <ref refid="class_q_c_p_layout_1aae3fc1bd5656aa737f18f0779789fd79" kindref="member">takeAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1318" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1aae3fc1bd5656aa737f18f0779789fd79" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
        <definition>virtual QCPLayoutElement * QCPLayout::takeAt</definition>
        <argsstring>(int index)=0</argsstring>
        <name>takeAt</name>
        <qualifiedname>QCPLayout::takeAt</qualifiedname>
        <reimplementedby refid="class_q_c_p_layout_grid_1a17dd220234d1bbf8835abcc666384d45">takeAt</reimplementedby>
        <reimplementedby refid="class_q_c_p_layout_inset_1abf2e8233f5b7051220907e62ded490a2">takeAt</reimplementedby>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the element with the given <emphasis>index</emphasis> from the layout and returns it.</para>
<para>If the <emphasis>index</emphasis> is invalid or the cell with that index is empty, returns <computeroutput>nullptr</computeroutput>.</para>
<para>Note that some layouts don&apos;t remove the respective cell right away but leave an empty cell after successful removal of the layout element. To collapse empty cells, use <ref refid="class_q_c_p_layout_1a41e6ac049143866e8f8b4964efab01b2" kindref="member">simplify</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_1ab22bd9153d855a35ab4010267ae36a69" kindref="member">elementAt</ref>, <ref refid="class_q_c_p_layout_1ad110be0de976cd8a817513a4a53d53db" kindref="member">take</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1319" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1ad110be0de976cd8a817513a4a53d53db" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool QCPLayout::take</definition>
        <argsstring>(QCPLayoutElement *element)=0</argsstring>
        <name>take</name>
        <qualifiedname>QCPLayout::take</qualifiedname>
        <reimplementedby refid="class_q_c_p_layout_grid_1aee961c2eb6cf8a85dcbc5a7d7b6c1a00">take</reimplementedby>
        <reimplementedby refid="class_q_c_p_layout_inset_1af7f13cc369f8190b5e7e17d5f39dfe1c">take</reimplementedby>
        <param>
          <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the specified <emphasis>element</emphasis> from the layout and returns true on success.</para>
<para>If the <emphasis>element</emphasis> isn&apos;t in this layout, returns false.</para>
<para>Note that some layouts don&apos;t remove the respective cell right away but leave an empty cell after successful removal of the layout element. To collapse empty cells, use <ref refid="class_q_c_p_layout_1a41e6ac049143866e8f8b4964efab01b2" kindref="member">simplify</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_1aae3fc1bd5656aa737f18f0779789fd79" kindref="member">takeAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1320" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1a41e6ac049143866e8f8b4964efab01b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPLayout::simplify</definition>
        <argsstring>()</argsstring>
        <name>simplify</name>
        <qualifiedname>QCPLayout::simplify</qualifiedname>
        <reimplementedby refid="class_q_c_p_layout_grid_1a38621ca7aa633b6a9a88617df7f08672">simplify</reimplementedby>
        <reimplementedby refid="class_q_c_p_layout_inset_1abdac9a04752751ea68c320016086a2e8">simplify</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Simplifies the layout by collapsing empty cells. The exact behavior depends on subclasses, the default implementation does nothing.</para>
<para>Not all layouts need simplification. For example, <ref refid="class_q_c_p_layout_inset" kindref="compound">QCPLayoutInset</ref> doesn&apos;t use explicit simplification while <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref> does. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1321" column="16" bodyfile="qcustomplot.cpp" bodystart="3724" bodyend="3726"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1a2403f684fee3ce47132faaeed00bb066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPLayout::removeAt</definition>
        <argsstring>(int index)</argsstring>
        <name>removeAt</name>
        <qualifiedname>QCPLayout::removeAt</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes and deletes the element at the provided <emphasis>index</emphasis>. Returns true on success. If <emphasis>index</emphasis> is invalid or points to an empty cell, returns false.</para>
<para>This function internally uses <ref refid="class_q_c_p_layout_1aae3fc1bd5656aa737f18f0779789fd79" kindref="member">takeAt</ref> to remove the element from the layout and then deletes the returned element. Note that some layouts don&apos;t remove the respective cell right away but leave an empty cell after successful removal of the layout element. To collapse empty cells, use <ref refid="class_q_c_p_layout_1a41e6ac049143866e8f8b4964efab01b2" kindref="member">simplify</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_1a6c58f537d8086f352576ab7c5b15d0bc" kindref="member">remove</ref>, <ref refid="class_q_c_p_layout_1aae3fc1bd5656aa737f18f0779789fd79" kindref="member">takeAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1324" column="8" bodyfile="qcustomplot.cpp" bodystart="3739" bodyend="3747"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1a6c58f537d8086f352576ab7c5b15d0bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPLayout::remove</definition>
        <argsstring>(QCPLayoutElement *element)</argsstring>
        <name>remove</name>
        <qualifiedname>QCPLayout::remove</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes and deletes the provided <emphasis>element</emphasis>. Returns true on success. If <emphasis>element</emphasis> is not in the layout, returns false.</para>
<para>This function internally uses <ref refid="class_q_c_p_layout_1aae3fc1bd5656aa737f18f0779789fd79" kindref="member">takeAt</ref> to remove the element from the layout and then deletes the element. Note that some layouts don&apos;t remove the respective cell right away but leave an empty cell after successful removal of the layout element. To collapse empty cells, use <ref refid="class_q_c_p_layout_1a41e6ac049143866e8f8b4964efab01b2" kindref="member">simplify</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_1a2403f684fee3ce47132faaeed00bb066" kindref="member">removeAt</ref>, <ref refid="class_q_c_p_layout_1ad110be0de976cd8a817513a4a53d53db" kindref="member">take</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1325" column="8" bodyfile="qcustomplot.cpp" bodystart="3760" bodyend="3768"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1a02883bdf2769b5b227f0232dba1ac4ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayout::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>QCPLayout::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes and deletes all layout elements in this layout. Finally calls <ref refid="class_q_c_p_layout_1a41e6ac049143866e8f8b4964efab01b2" kindref="member">simplify</ref> to make sure all empty cells are collapsed.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_1a6c58f537d8086f352576ab7c5b15d0bc" kindref="member">remove</ref>, <ref refid="class_q_c_p_layout_1a2403f684fee3ce47132faaeed00bb066" kindref="member">removeAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1326" column="8" bodyfile="qcustomplot.cpp" bodystart="3776" bodyend="3784"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_layout_1a165c77f6287ac92e8d03017ad913378b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPLayout::updateLayout</definition>
        <argsstring>()</argsstring>
        <name>updateLayout</name>
        <qualifiedname>QCPLayout::updateLayout</qualifiedname>
        <reimplementedby refid="class_q_c_p_layout_grid_1a6cf43f14d3fa335fd8758561ccf1f78c">updateLayout</reimplementedby>
        <reimplementedby refid="class_q_c_p_layout_inset_1a493526b922ea66a75c45ef1842446988">updateLayout</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1330" column="16" bodyfile="qcustomplot.cpp" bodystart="3814" bodyend="3816"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1aeac66a292f65cf7f8adf94eb92345b3e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayout::sizeConstraintsChanged</definition>
        <argsstring>() const</argsstring>
        <name>sizeConstraintsChanged</name>
        <qualifiedname>QCPLayout::sizeConstraintsChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subclasses call this method to report changed (minimum/maximum) size constraints.</para>
<para>If the parent of this layout is again a <ref refid="class_q_c_p_layout" kindref="compound">QCPLayout</ref>, forwards the call to the parent&apos;s <ref refid="class_q_c_p_layout_1aeac66a292f65cf7f8adf94eb92345b3e" kindref="member">sizeConstraintsChanged</ref>. If the parent is a QWidget (i.e. is the <ref refid="class_q_custom_plot_1af1a1f1f571237deb7c2bd34a5e9f018f" kindref="member">QCustomPlot::plotLayout</ref> of <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>), calls QWidget::updateGeometry, so if the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is inside a Qt QLayout, it may update itself and resize cells accordingly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1333" column="8" bodyfile="qcustomplot.cpp" bodystart="3794" bodyend="3800"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1af6dbbc24156a808da29cd1ec031729a3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayout::adoptElement</definition>
        <argsstring>(QCPLayoutElement *el)</argsstring>
        <name>adoptElement</name>
        <qualifiedname>QCPLayout::adoptElement</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1334" column="8" bodyfile="qcustomplot.cpp" bodystart="3831" bodyend="3843"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1a4afbb4bef0071f72f91afdac4433a18e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayout::releaseElement</definition>
        <argsstring>(QCPLayoutElement *el)</argsstring>
        <name>releaseElement</name>
        <qualifiedname>QCPLayout::releaseElement</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1335" column="8" bodyfile="qcustomplot.cpp" bodystart="3855" bodyend="3865"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1a3e77be8006d39f2aafc1313d6e8fc3fd" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QVector&lt; int &gt;</type>
        <definition>QVector&lt; int &gt; QCPLayout::getSectionSizes</definition>
        <argsstring>(QVector&lt; int &gt; maxSizes, QVector&lt; int &gt; minSizes, QVector&lt; double &gt; stretchFactors, int totalSize) const</argsstring>
        <name>getSectionSizes</name>
        <qualifiedname>QCPLayout::getSectionSizes</qualifiedname>
        <param>
          <type>QVector&lt; int &gt;</type>
          <declname>maxSizes</declname>
        </param>
        <param>
          <type>QVector&lt; int &gt;</type>
          <declname>minSizes</declname>
        </param>
        <param>
          <type>QVector&lt; double &gt;</type>
          <declname>stretchFactors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>totalSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1336" column="11" bodyfile="qcustomplot.cpp" bodystart="3896" bodyend="4006"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="class_q_c_p_layout_1a864fddc84721f186663faf3683f1fa70" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize QCPLayout::getFinalMinimumOuterSize</definition>
        <argsstring>(const QCPLayoutElement *el)</argsstring>
        <name>getFinalMinimumOuterSize</name>
        <qualifiedname>QCPLayout::getFinalMinimumOuterSize</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1337" column="16" bodyfile="qcustomplot.cpp" bodystart="4020" bodyend="4031"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_1add49fd6843821a6126914b837ed52e22" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize QCPLayout::getFinalMaximumOuterSize</definition>
        <argsstring>(const QCPLayoutElement *el)</argsstring>
        <name>getFinalMaximumOuterSize</name>
        <qualifiedname>QCPLayout::getFinalMaximumOuterSize</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1338" column="16" bodyfile="qcustomplot.cpp" bodystart="4045" bodyend="4056"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The abstract base class for layouts. </para>
    </briefdescription>
    <detaileddescription>
<para>This is an abstract base class for layout elements whose main purpose is to define the position and size of other child layout elements. In most cases, layouts don&apos;t draw anything themselves (but there are exceptions to this, e.g. <ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref>).</para>
<para><ref refid="class_q_c_p_layout" kindref="compound">QCPLayout</ref> derives from <ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref>, and thus can itself be nested in other layouts.</para>
<para><ref refid="class_q_c_p_layout" kindref="compound">QCPLayout</ref> introduces a common interface for accessing and manipulating the child elements. Those functions are most notably <ref refid="class_q_c_p_layout_1acc6012e7dacc55c4282942c31c45b8d9" kindref="member">elementCount</ref>, <ref refid="class_q_c_p_layout_1ab22bd9153d855a35ab4010267ae36a69" kindref="member">elementAt</ref>, <ref refid="class_q_c_p_layout_1aae3fc1bd5656aa737f18f0779789fd79" kindref="member">takeAt</ref>, <ref refid="class_q_c_p_layout_1ad110be0de976cd8a817513a4a53d53db" kindref="member">take</ref>, <ref refid="class_q_c_p_layout_1a41e6ac049143866e8f8b4964efab01b2" kindref="member">simplify</ref>, <ref refid="class_q_c_p_layout_1a2403f684fee3ce47132faaeed00bb066" kindref="member">removeAt</ref>, <ref refid="class_q_c_p_layout_1a6c58f537d8086f352576ab7c5b15d0bc" kindref="member">remove</ref> and <ref refid="class_q_c_p_layout_1a02883bdf2769b5b227f0232dba1ac4ee" kindref="member">clear</ref>. Individual subclasses may add more functions to this interface which are more specialized to the form of the layout. For example, <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref> adds functions that take row and column indices to access cells of the layout grid more conveniently.</para>
<para>Since this is an abstract base class, you can&apos;t instantiate it directly. Rather use one of its subclasses like <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref> or <ref refid="class_q_c_p_layout_inset" kindref="compound">QCPLayoutInset</ref>.</para>
<para>For a general introduction to the layout system, see the dedicated documentation page The Layout System. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="13" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="10">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="17">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
      <node id="6">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="1306" column="1" bodyfile="qcustomplot.h" bodystart="1307" bodyend="1343"/>
    <listofallmembers>
      <member refid="class_q_c_p_layout_1af6dbbc24156a808da29cd1ec031729a3" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>adoptElement</name></member>
      <member refid="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>antialiased</name></member>
      <member refid="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>applyAntialiasingHint</name></member>
      <member refid="class_q_c_p_layout_element_1a0a8f18141bcf46cf40ad4c13324ff346" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>applyDefaultAntialiasingHint</name></member>
      <member refid="class_q_c_p_layout_element_1a2585bc8c5cc70ee712909751a2fc8909" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>autoMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a005c9f0fe84bc1591a2cf2c46fd477b4" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>calculateAutoMargin</name></member>
      <member refid="class_q_c_p_layout_1a02883bdf2769b5b227f0232dba1ac4ee" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>clear</name></member>
      <member refid="class_q_c_p_layerable_1acbcfc9ecc75433747b1978a77b1864b3" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>clipRect</name></member>
      <member refid="class_q_c_p_layerable_1ae546370644a5551c76af739afc008bee" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>deselectEvent</name></member>
      <member refid="class_q_c_p_layout_element_1ad1c597b1d608cfdd86e7b76819a94cfb" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>draw</name></member>
      <member refid="class_q_c_p_layout_1ab22bd9153d855a35ab4010267ae36a69" prot="public" virt="pure-virtual"><scope>QCPLayout</scope><name>elementAt</name></member>
      <member refid="class_q_c_p_layout_1acc6012e7dacc55c4282942c31c45b8d9" prot="public" virt="pure-virtual"><scope>QCPLayout</scope><name>elementCount</name></member>
      <member refid="class_q_c_p_layout_1aca129722c019f91d3367046f80abfa77" prot="public" virt="virtual"><scope>QCPLayout</scope><name>elements</name></member>
      <member refid="class_q_c_p_layout_1add49fd6843821a6126914b837ed52e22" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>getFinalMaximumOuterSize</name></member>
      <member refid="class_q_c_p_layout_1a864fddc84721f186663faf3683f1fa70" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>getFinalMinimumOuterSize</name></member>
      <member refid="class_q_c_p_layout_1a3e77be8006d39f2aafc1313d6e8fc3fd" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>getSectionSizes</name></member>
      <member refid="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>initializeParentPlot</name></member>
      <member refid="class_q_c_p_layerable_1a9d4e121a7f1d2314f906fe698209cac9" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>layer</name></member>
      <member refid="class_q_c_p_layerable_1abbf8657cedea73ac1c3499b521c90eba" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>layerChanged</name></member>
      <member refid="class_q_c_p_layout_element_1a4efdcbde9d28f410e5ef166c9d691deb" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>layout</name></member>
      <member refid="class_q_c_p_layout_element_1a765f041a73af0c2de41b41a5a03e31a4" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>layoutChanged</name></member>
      <member refid="class_q_c_p_layerable_1a3ab45a4c76a3333ce42eb217a81733ec" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mAntialiased</name></member>
      <member refid="class_q_c_p_layout_element_1aa5513622910f31d9309f87886bee597a" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>marginGroup</name></member>
      <member refid="class_q_c_p_layout_element_1acdd2c6b2ffb1c712e3bb3014fdec2e1b" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>marginGroups</name></member>
      <member refid="class_q_c_p_layout_element_1af4ac9450aa2d60863bf3a8ea0c940c9d" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>margins</name></member>
      <member refid="class_q_c_p_layout_element_1af61c70354d1275778d68206b2a1b2d36" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mAutoMargins</name></member>
      <member refid="class_q_c_p_layout_element_1ad96efb977a26e360e8a64a4c1e56456d" prot="public" virt="virtual"><scope>QCPLayout</scope><name>maximumOuterSizeHint</name></member>
      <member refid="class_q_c_p_layout_element_1afb9503858d4aa0f3b9f1794b084fb40a" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>maximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a5eae30e28f28d73fd1c56409c011393e" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>minimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a46789036c4fcb190fa374f91321d7c09" prot="public" virt="virtual"><scope>QCPLayout</scope><name>minimumOuterSizeHint</name></member>
      <member refid="class_q_c_p_layout_element_1a60d4295468a2b57fe91f6f68e20c3993" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>minimumSize</name></member>
      <member refid="class_q_c_p_layerable_1aa38ec5891aff0f50b36fd63e9372a0cd" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mLayer</name></member>
      <member refid="class_q_c_p_layout_element_1aeafbbc1130e02eee663c5326761fc963" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mMarginGroups</name></member>
      <member refid="class_q_c_p_layout_element_1ac2a32b99ee527ca5dfff9da03628fe94" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a64a387973fd4addac842028c89088998" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a5ba71f25d1af4bb092b28df618538e63" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mMinimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1affef747c81632de33f08483b7fd10d01" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mMinimumSize</name></member>
      <member refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>mouseDoubleClickEvent</name></member>
      <member refid="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>mouseMoveEvent</name></member>
      <member refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>mousePressEvent</name></member>
      <member refid="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>mouseReleaseEvent</name></member>
      <member refid="class_q_c_p_layout_element_1a07bb4973379e75cb0fa5b032c1d24afd" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>moveToLayer</name></member>
      <member refid="class_q_c_p_layerable_1a3291445a980053e2d17a21d15957624e" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mParentLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1ae7c75c25549608bd688bdb65d4c38066" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mParentLayout</name></member>
      <member refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_layout_element_1ad8896f05550389f7b9e92c9e6cdf6e01" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mRect</name></member>
      <member refid="class_q_c_p_layout_element_1acc012635b1ae178ff3c4da8a3af303a2" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mSizeConstraintRect</name></member>
      <member refid="class_q_c_p_layerable_1a62e3aed8427d6ce3ccf716f285106cb3" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>outerRect</name></member>
      <member refid="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>parentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1a36ed5b292b90934b524a4e5866a3526c" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layout_element_1ab4bb5c5a958451f5f153fdce350f13cf" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>parentPlotInitialized</name></member>
      <member refid="class_q_c_p_layerable_1a4f87f420cb2597e2b393aab934d2f099" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_layout_1a04222e6e1361fd802d48f1a25b7020d4" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>QCPLayout</name></member>
      <member refid="class_q_c_p_layout_1a0790750c7e7f14fdbd960d172655b42b" prot="private" virt="non-virtual"><scope>QCPLayout</scope><name>QCPLayoutElement</name></member>
      <member refid="class_q_c_p_layout_element_1a2c25c7bf27eaa1fad66807af855d8d81" prot="public" virt="non-virtual" ambiguityscope="QCPLayoutElement::"><scope>QCPLayout</scope><name>QCPLayoutElement</name></member>
      <member refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>realVisibility</name></member>
      <member refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>rect</name></member>
      <member refid="class_q_c_p_layout_1a4afbb4bef0071f72f91afdac4433a18e" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>releaseElement</name></member>
      <member refid="class_q_c_p_layout_1a6c58f537d8086f352576ab7c5b15d0bc" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>remove</name></member>
      <member refid="class_q_c_p_layout_1a2403f684fee3ce47132faaeed00bb066" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>removeAt</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aa7fa7e25cd23758b9915c64ed9f1be26c" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>scrInnerRect</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aabe2745b41a6131ed194e13591b08e04d" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>scrOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1a7498c2d0d081cf7cad0fb3bb93aa0e91" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>selectEvent</name></member>
      <member refid="class_q_c_p_layerable_1a908c9edda761886f33893be326dab77d" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>selectionCategory</name></member>
      <member refid="class_q_c_p_layout_element_1a62d60f1b0ee9bb23e38811d71586d79c" prot="public" virt="virtual"><scope>QCPLayout</scope><name>selectTest</name></member>
      <member refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setAntialiased</name></member>
      <member refid="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setAutoMargins</name></member>
      <member refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layout_element_1a516e56f76b6bc100e8e71d329866847d" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setMarginGroup</name></member>
      <member refid="class_q_c_p_layout_element_1a8f450b1f3f992ad576fce2c63d8b79cf" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a03e0e9c48f230217c529b0819f832d84" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a0a8a17abc16b7923159fcc7608f94673" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setMinimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setMinimumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a8e0447614a0bf92de9a7304588c6b96e" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setMinimumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a38975ea13e36de8e53391ce41d94bc0f" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>setParentLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setSizeConstraintRect</name></member>
      <member refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_layout_1a41e6ac049143866e8f8b4964efab01b2" prot="public" virt="virtual"><scope>QCPLayout</scope><name>simplify</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2a" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>SizeConstraintRect</name></member>
      <member refid="class_q_c_p_layout_element_1a66136f121ee3e1c933b748761203cab4" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>sizeConstraintRect</name></member>
      <member refid="class_q_c_p_layout_1aeac66a292f65cf7f8adf94eb92345b3e" prot="protected" virt="non-virtual"><scope>QCPLayout</scope><name>sizeConstraintsChanged</name></member>
      <member refid="class_q_c_p_layout_1ad110be0de976cd8a817513a4a53d53db" prot="public" virt="pure-virtual"><scope>QCPLayout</scope><name>take</name></member>
      <member refid="class_q_c_p_layout_1aae3fc1bd5656aa737f18f0779789fd79" prot="public" virt="pure-virtual"><scope>QCPLayout</scope><name>takeAt</name></member>
      <member refid="class_q_c_p_layout_1a48ecc9c98ea90b547c3e27a931a8f7bd" prot="public" virt="virtual"><scope>QCPLayout</scope><name>update</name></member>
      <member refid="class_q_c_p_layout_1a165c77f6287ac92e8d03017ad913378b" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>updateLayout</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>UpdatePhase</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da5d1ccf5d79967c232c3c511796860045" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>upLayout</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da288cb59a92280e47261a341f2813e676" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>upMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374dad6119882eba136357c2f627992e527d3" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>upPreparation</name></member>
      <member refid="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70" prot="public" virt="non-virtual"><scope>QCPLayout</scope><name>visible</name></member>
      <member refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022" prot="protected" virt="virtual"><scope>QCPLayout</scope><name>wheelEvent</name></member>
      <member refid="class_q_c_p_layerable_1a4231cf5b3601d6d3a5781283e7a9735b" prot="public" virt="virtual"><scope>QCPLayout</scope><name>~QCPLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1a2fa26d3d22a2854c4da1d80f188db961" prot="public" virt="virtual"><scope>QCPLayout</scope><name>~QCPLayoutElement</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
