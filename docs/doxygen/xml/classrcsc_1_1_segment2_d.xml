<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classrcsc_1_1_segment2_d" kind="class" language="C++" prot="public">
    <compoundname>rcsc::Segment2D</compoundname>
    <includes refid="segment__2d_8h" local="no">segment_2d.h</includes>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classrcsc_1_1_segment2_d_1a6271b8e9769e8826253bb7bddd4691b5" prot="private" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double rcsc::Segment2D::EPSILON</definition>
        <argsstring></argsstring>
        <name>EPSILON</name>
        <qualifiedname>rcsc::Segment2D::EPSILON</qualifiedname>
        <initializer>= 1.0e-6</initializer>
        <briefdescription>
<para>threshold value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="49" column="25" bodyfile="ui/geom/segment_2d.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcsc_1_1_segment2_d_1a96b26b6481e9f23451a59eb10e5708d0" prot="private" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double rcsc::Segment2D::CALC_ERROR</definition>
        <argsstring></argsstring>
        <name>CALC_ERROR</name>
        <qualifiedname>rcsc::Segment2D::CALC_ERROR</qualifiedname>
        <initializer>= 1.0e-9</initializer>
        <briefdescription>
<para>calculation error threshold value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="50" column="25" bodyfile="ui/geom/segment_2d.h" bodystart="50" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrcsc_1_1_segment2_d_1a949deb6c092b43f6d1203100f9407376" prot="private" static="no" mutable="no">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Segment2D::M_origin</definition>
        <argsstring></argsstring>
        <name>M_origin</name>
        <qualifiedname>rcsc::Segment2D::M_origin</qualifiedname>
        <briefdescription>
<para>origin point </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="52" column="14" bodyfile="ui/geom/segment_2d.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcsc_1_1_segment2_d_1a4303daee2018d97ea12ac12be9320fc7" prot="private" static="no" mutable="no">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Segment2D::M_terminal</definition>
        <argsstring></argsstring>
        <name>M_terminal</name>
        <qualifiedname>rcsc::Segment2D::M_terminal</qualifiedname>
        <briefdescription>
<para>terminal point </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="53" column="14" bodyfile="ui/geom/segment_2d.h" bodystart="53" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1abf5ac260070e6fddfe32ce496e90cee4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rcsc::Segment2D::Segment2D</definition>
        <argsstring>()</argsstring>
        <name>Segment2D</name>
        <qualifiedname>rcsc::Segment2D::Segment2D</qualifiedname>
        <briefdescription>
<para>not used </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="56" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a57d547b48e9e4aa8560a81740389e0d3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::checkIntersectsOnLine</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>checkIntersectsOnLine</name>
        <qualifiedname>rcsc::Segment2D::checkIntersectsOnLine</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="58" column="10" bodyfile="ui/geom/segment_2d.cpp" bodystart="254" bodyend="266"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1abc22af5db51bab7c2557614f7f3d3651" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rcsc::Segment2D::Segment2D</definition>
        <argsstring>(const Vector2D &amp;origin, const Vector2D &amp;terminal)</argsstring>
        <name>Segment2D</name>
        <qualifiedname>rcsc::Segment2D::Segment2D</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>terminal</declname>
        </param>
        <briefdescription>
<para>construct from 2 points </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>1st point of segment edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminal</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd point of segment edge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="66" column="5" bodyfile="ui/geom/segment_2d.h" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1aac3f775be1bc6f9f861e61cfefce5eec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rcsc::Segment2D::Segment2D</definition>
        <argsstring>(const double &amp;origin_x, const double &amp;origin_y, const double &amp;terminal_x, const double &amp;terminal_y)</argsstring>
        <name>Segment2D</name>
        <qualifiedname>rcsc::Segment2D::Segment2D</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>origin_x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>origin_y</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>terminal_x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>terminal_y</declname>
        </param>
        <briefdescription>
<para>construct directly using raw coordinate values </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin_x</parametername>
</parameternamelist>
<parameterdescription>
<para>1st point x value of segment edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>origin_y</parametername>
</parameternamelist>
<parameterdescription>
<para>1st point x value of segment edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminal_x</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd point y value of segment edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminal_y</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd point y value of segment edge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="79" column="5" bodyfile="ui/geom/segment_2d.h" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a2b6b33bfce376825c71c24f2a8e41bcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rcsc::Segment2D::Segment2D</definition>
        <argsstring>(const Vector2D &amp;origin, const double &amp;length, const AngleDeg &amp;dir)</argsstring>
        <name>Segment2D</name>
        <qualifiedname>rcsc::Segment2D::Segment2D</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>construct using origin, direction and length </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>origin point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of line segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>line direction from origin point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="93" column="5" bodyfile="ui/geom/segment_2d.h" bodystart="93" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1ae7b3d58d5eb6a8258b8eb46ef3806c3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
        <definition>const Segment2D &amp; rcsc::Segment2D::assign</definition>
        <argsstring>(const Vector2D &amp;origin, const Vector2D &amp;terminal)</argsstring>
        <name>assign</name>
        <qualifiedname>rcsc::Segment2D::assign</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>terminal</declname>
        </param>
        <briefdescription>
<para>construct from 2 points </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>first point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminal</parametername>
</parameternamelist>
<parameterdescription>
<para>second point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to this object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="107" column="16" bodyfile="ui/geom/segment_2d.h" bodystart="107" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1ae17ac65ca607c06c7b1c99c47b1fc96a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
        <definition>const Segment2D &amp; rcsc::Segment2D::assign</definition>
        <argsstring>(const double &amp;origin_x, const double &amp;origin_y, const double &amp;terminal_x, const double &amp;terminal_y)</argsstring>
        <name>assign</name>
        <qualifiedname>rcsc::Segment2D::assign</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>origin_x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>origin_y</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>terminal_x</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>terminal_y</declname>
        </param>
        <briefdescription>
<para>construct directly using raw coordinate values </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin_x</parametername>
</parameternamelist>
<parameterdescription>
<para>1st point x value of segment edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>origin_y</parametername>
</parameternamelist>
<parameterdescription>
<para>1st point x value of segment edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminal_x</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd point y value of segment edge </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terminal_y</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd point y value of segment edge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to this object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="124" column="16" bodyfile="ui/geom/segment_2d.h" bodystart="124" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1aef1a33649fee8291630028b9e3cdc19a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
        <definition>const Segment2D &amp; rcsc::Segment2D::assign</definition>
        <argsstring>(const Vector2D &amp;origin, const double &amp;length, const AngleDeg &amp;dir)</argsstring>
        <name>assign</name>
        <qualifiedname>rcsc::Segment2D::assign</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>construct using origin, direction and length </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>origin point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of line segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>line direction from origin point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to this object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="142" column="16" bodyfile="ui/geom/segment_2d.h" bodystart="142" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a65ccb90f0fd85ecf73fcfbb9b3bf28f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <qualifiedname>rcsc::Segment2D::isValid</qualifiedname>
        <briefdescription>
<para>check if this line segment is valid or not. origin&apos;s coodinates value have to be different from terminal&apos;s one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>checked result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="156" column="10" bodyfile="ui/geom/segment_2d.h" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1adbf14a9152602fc6abe253028ef1d961" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Segment2D::origin</definition>
        <argsstring>() const</argsstring>
        <name>origin</name>
        <qualifiedname>rcsc::Segment2D::origin</qualifiedname>
        <briefdescription>
<para>get 1st point of segment edge </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference to the vector object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="166" column="15" bodyfile="ui/geom/segment_2d.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a5aa01ea7a341adaeec9a4e89d55619d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Segment2D::terminal</definition>
        <argsstring>() const</argsstring>
        <name>terminal</name>
        <qualifiedname>rcsc::Segment2D::terminal</qualifiedname>
        <briefdescription>
<para>get 2nd point of segment edge </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference to the vector object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="176" column="15" bodyfile="ui/geom/segment_2d.h" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a9a2350583582ae85a7355f17341b73e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_line2_d" kindref="compound">Line2D</ref></type>
        <definition>Line2D rcsc::Segment2D::line</definition>
        <argsstring>() const</argsstring>
        <name>line</name>
        <qualifiedname>rcsc::Segment2D::line</qualifiedname>
        <briefdescription>
<para>get line generated from segment </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new line object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="185" column="12" bodyfile="ui/geom/segment_2d.h" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a7045e38faf8606fdc4a8e68f9ab5697a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Segment2D::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <qualifiedname>rcsc::Segment2D::length</qualifiedname>
        <briefdescription>
<para>get the length of this segment </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>distance value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="194" column="12" bodyfile="ui/geom/segment_2d.h" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a924c450a55636f03ac5b344942aa97ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref></type>
        <definition>AngleDeg rcsc::Segment2D::direction</definition>
        <argsstring>() const</argsstring>
        <name>direction</name>
        <qualifiedname>rcsc::Segment2D::direction</qualifiedname>
        <briefdescription>
<para>get the direction angle of this line segment </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>angle object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="203" column="14" bodyfile="ui/geom/segment_2d.h" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a69a5cf62180a29a1395efe5560efb701" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
        <definition>const Segment2D &amp; rcsc::Segment2D::swap</definition>
        <argsstring>()</argsstring>
        <name>swap</name>
        <qualifiedname>rcsc::Segment2D::swap</qualifiedname>
        <briefdescription>
<para>swap segment edge point </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference to this object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="215" column="16" bodyfile="ui/geom/segment_2d.h" bodystart="215" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a2336439a3866472d5310fae362fa4a9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
        <definition>const Segment2D &amp; rcsc::Segment2D::reverse</definition>
        <argsstring>()</argsstring>
        <name>reverse</name>
        <qualifiedname>rcsc::Segment2D::reverse</qualifiedname>
        <briefdescription>
<para>swap segment edge point. This method is equivalent to <ref refid="classrcsc_1_1_segment2_d_1a69a5cf62180a29a1395efe5560efb701" kindref="member">swap()</ref>, provided for convenience. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference to this object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="229" column="16" bodyfile="ui/geom/segment_2d.h" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a8d74b27bf1eada3df58d5e501f05bbf8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref></type>
        <definition>Segment2D rcsc::Segment2D::reversedSegment</definition>
        <argsstring>() const</argsstring>
        <name>reversedSegment</name>
        <qualifiedname>rcsc::Segment2D::reversedSegment</qualifiedname>
        <briefdescription>
<para>get the reversed line segment. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference to this object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="238" column="15" bodyfile="ui/geom/segment_2d.h" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a99ca6897161dd19abfa39c72746e3f4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_line2_d" kindref="compound">Line2D</ref></type>
        <definition>Line2D rcsc::Segment2D::perpendicularBisector</definition>
        <argsstring>() const</argsstring>
        <name>perpendicularBisector</name>
        <qualifiedname>rcsc::Segment2D::perpendicularBisector</qualifiedname>
        <briefdescription>
<para>make perpendicular bisector line from segment points </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>line object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="247" column="12" bodyfile="ui/geom/segment_2d.h" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a583bec233157702a1d2f582472046b14" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::contains</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>contains</name>
        <qualifiedname>rcsc::Segment2D::contains</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>check if the point is within the rectangle defined by this segment as a diagonal line. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if rectangle contains p </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="257" column="10" bodyfile="ui/geom/segment_2d.h" bodystart="257" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a963c5e94efecd463c9efda61e2ca451a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::equals</definition>
        <argsstring>(const Segment2D &amp;other) const</argsstring>
        <name>equals</name>
        <qualifiedname>rcsc::Segment2D::equals</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if this line segment has completely same value as input line segment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>compared object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>checked result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="268" column="10" bodyfile="ui/geom/segment_2d.h" bodystart="268" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1ae9a63959d4f42f975e07154a77b430c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::equalsWeakly</definition>
        <argsstring>(const Segment2D &amp;other) const</argsstring>
        <name>equalsWeakly</name>
        <qualifiedname>rcsc::Segment2D::equalsWeakly</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if this line segment has weakly same value as input line segment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>compared object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>checked result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="279" column="10" bodyfile="ui/geom/segment_2d.h" bodystart="279" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a2d50e9f1e73668c3ddb7c1f2a4ab3430" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Segment2D::projection</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>projection</name>
        <qualifiedname>rcsc::Segment2D::projection</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>calculates projection point from p </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>input point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>projection point from p. if it does not exist, the invalidated value vector is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="292" column="14" bodyfile="ui/geom/segment_2d.cpp" bodystart="52" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1acfa99472e4cf909ee2107807012d3a2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Segment2D::intersection</definition>
        <argsstring>(const Segment2D &amp;other, const bool allow_end_point) const</argsstring>
        <name>intersection</name>
        <qualifiedname>rcsc::Segment2D::intersection</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_end_point</declname>
        </param>
        <briefdescription>
<para>check &amp; get the intersection point with other line segment </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>checked line segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_end_point</parametername>
</parameternamelist>
<parameterdescription>
<para>if this value is false, an end point is disallowed as an intersection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>intersection point. if it does not exist, the invalidated value vector is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="301" column="14" bodyfile="ui/geom/segment_2d.cpp" bodystart="92" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1aeb545dfb637bad1c66335bec5518b419" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Segment2D::intersection</definition>
        <argsstring>(const Line2D &amp;l) const</argsstring>
        <name>intersection</name>
        <qualifiedname>rcsc::Segment2D::intersection</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_line2_d" kindref="compound">Line2D</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>check &amp; get the intersection point with other line </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>checked line object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>intersection point. if it does not exist, the invalidated value vector is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="310" column="14" bodyfile="ui/geom/segment_2d.cpp" bodystart="149" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a9037c28c7df75bf0fb341a21c6cde8b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::existIntersection</definition>
        <argsstring>(const Segment2D &amp;other) const</argsstring>
        <name>existIntersection</name>
        <qualifiedname>rcsc::Segment2D::existIntersection</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if segments cross each other or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>segment for cross checking </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this segment crosses, otherwise returns false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="317" column="10" bodyfile="ui/geom/segment_2d.cpp" bodystart="190" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1add83df0c3cc25d8106cbfda2485937e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::intersects</definition>
        <argsstring>(const Segment2D &amp;other) const</argsstring>
        <name>intersects</name>
        <qualifiedname>rcsc::Segment2D::intersects</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if segments cross each other or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>segment for cross checking </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if this segment crosses, otherwise returns false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="324" column="10" bodyfile="ui/geom/segment_2d.h" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1aae8bedf6ec2025efb6cba3eedd47b623" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::existIntersectionExceptEndpoint</definition>
        <argsstring>(const Segment2D &amp;other) const</argsstring>
        <name>existIntersectionExceptEndpoint</name>
        <qualifiedname>rcsc::Segment2D::existIntersectionExceptEndpoint</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if segments intersect each other on non terminal point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>segment for cross checking </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if segments intersect and intersection point is not a terminal point of segment. false if segments do not intersect or intersect on terminal point of segment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="336" column="10" bodyfile="ui/geom/segment_2d.cpp" bodystart="169" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a99eeb783098845ee64c054edc57ff814" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::intersectsExceptEndpoint</definition>
        <argsstring>(const Segment2D &amp;other) const</argsstring>
        <name>intersectsExceptEndpoint</name>
        <qualifiedname>rcsc::Segment2D::intersectsExceptEndpoint</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if segments intersect each other on non terminal point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>segment for cross checking </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if segments intersect and intersection point is not a terminal point of segment. false if segments do not intersect or intersect on terminal point of segment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="345" column="10" bodyfile="ui/geom/segment_2d.h" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a36281a56019099e643ced60e81868d20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::existIntersection</definition>
        <argsstring>(const Line2D &amp;l) const</argsstring>
        <name>existIntersection</name>
        <qualifiedname>rcsc::Segment2D::existIntersection</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_line2_d" kindref="compound">Line2D</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>check if this line segment intersects with target line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>checked line </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>checked result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="355" column="10" bodyfile="ui/geom/segment_2d.cpp" bodystart="240" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a6098d18dcbcb654831808a10600ecfe4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::intersects</definition>
        <argsstring>(const Line2D &amp;l) const</argsstring>
        <name>intersects</name>
        <qualifiedname>rcsc::Segment2D::intersects</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_line2_d" kindref="compound">Line2D</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>check if this line segment intersects with target line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>checked line </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>checked result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="362" column="10" bodyfile="ui/geom/segment_2d.h" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a8d55be9e93240a0af578301b31377568" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Segment2D::nearestPoint</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>nearestPoint</name>
        <qualifiedname>rcsc::Segment2D::nearestPoint</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>get a point on segment where distance of point is minimal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nearest point on segment. if multiple nearest points found. returns one of them. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="373" column="14" bodyfile="ui/geom/segment_2d.cpp" bodystart="273" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a3e9231d5b67f4bd60aba0e0743a4644c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Segment2D::dist</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>dist</name>
        <qualifiedname>rcsc::Segment2D::dist</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>get minimum distance between this segment and point </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>minimum distance between this segment and point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="380" column="12" bodyfile="ui/geom/segment_2d.cpp" bodystart="312" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1acd9697f7e543367841b96cdedd4e3d29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Segment2D::dist</definition>
        <argsstring>(const Segment2D &amp;seg) const</argsstring>
        <name>dist</name>
        <qualifiedname>rcsc::Segment2D::dist</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_segment2_d" kindref="compound">Segment2D</ref> &amp;</type>
          <declname>seg</declname>
        </param>
        <briefdescription>
<para>get minimum distance between 2 segments </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seg</parametername>
</parameternamelist>
<parameterdescription>
<para>segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>minimum distance between 2 segments </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="387" column="12" bodyfile="ui/geom/segment_2d.cpp" bodystart="348" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a44170faa05fc845a56c066b337c15fec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Segment2D::farthestDist</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>farthestDist</name>
        <qualifiedname>rcsc::Segment2D::farthestDist</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>get maximum distance between this segment and point </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>maximum distance between this segment and point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="394" column="12" bodyfile="ui/geom/segment_2d.cpp" bodystart="366" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a6a20bc99f33e9459e2ce36694d0a1e04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::onSegment</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>onSegment</name>
        <qualifiedname>rcsc::Segment2D::onSegment</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>strictly check if point is on segment or not </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>checked point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if point is on this segment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="401" column="10" bodyfile="ui/geom/segment_2d.cpp" bodystart="377" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a926ee84a23a79632683f3621449911fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Segment2D::onSegmentWeakly</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>onSegmentWeakly</name>
        <qualifiedname>rcsc::Segment2D::onSegmentWeakly</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>weakly check if point is on segment or not </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>checked point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if point is on this segment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="408" column="10" bodyfile="ui/geom/segment_2d.cpp" bodystart="389" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_segment2_d_1a9fda74b799f3b2e3f959a893f3862460" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rcsc::Segment2D::print</definition>
        <argsstring>(std::ostream &amp;os) const</argsstring>
        <name>print</name>
        <qualifiedname>rcsc::Segment2D::print</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>print data to an output stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the output stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/segment_2d.h" line="415" column="19" bodyfile="ui/geom/segment_2d.h" bodystart="415" bodyend="419"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>2d segment line class </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ui/geom/segment_2d.h" line="46" column="1" bodyfile="ui/geom/segment_2d.h" bodystart="46" bodyend="421"/>
    <listofallmembers>
      <member refid="classrcsc_1_1_segment2_d_1ae7b3d58d5eb6a8258b8eb46ef3806c3e" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>assign</name></member>
      <member refid="classrcsc_1_1_segment2_d_1ae17ac65ca607c06c7b1c99c47b1fc96a" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>assign</name></member>
      <member refid="classrcsc_1_1_segment2_d_1aef1a33649fee8291630028b9e3cdc19a" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>assign</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a96b26b6481e9f23451a59eb10e5708d0" prot="private" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>CALC_ERROR</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a57d547b48e9e4aa8560a81740389e0d3" prot="private" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>checkIntersectsOnLine</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a583bec233157702a1d2f582472046b14" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>contains</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a924c450a55636f03ac5b344942aa97ad" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>direction</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a3e9231d5b67f4bd60aba0e0743a4644c" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>dist</name></member>
      <member refid="classrcsc_1_1_segment2_d_1acd9697f7e543367841b96cdedd4e3d29" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>dist</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a6271b8e9769e8826253bb7bddd4691b5" prot="private" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>EPSILON</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a963c5e94efecd463c9efda61e2ca451a" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>equals</name></member>
      <member refid="classrcsc_1_1_segment2_d_1ae9a63959d4f42f975e07154a77b430c2" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>equalsWeakly</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a9037c28c7df75bf0fb341a21c6cde8b8" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>existIntersection</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a36281a56019099e643ced60e81868d20" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>existIntersection</name></member>
      <member refid="classrcsc_1_1_segment2_d_1aae8bedf6ec2025efb6cba3eedd47b623" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>existIntersectionExceptEndpoint</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a44170faa05fc845a56c066b337c15fec" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>farthestDist</name></member>
      <member refid="classrcsc_1_1_segment2_d_1acfa99472e4cf909ee2107807012d3a2b" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>intersection</name></member>
      <member refid="classrcsc_1_1_segment2_d_1aeb545dfb637bad1c66335bec5518b419" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>intersection</name></member>
      <member refid="classrcsc_1_1_segment2_d_1add83df0c3cc25d8106cbfda2485937e2" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>intersects</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a6098d18dcbcb654831808a10600ecfe4" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>intersects</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a99eeb783098845ee64c054edc57ff814" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>intersectsExceptEndpoint</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a65ccb90f0fd85ecf73fcfbb9b3bf28f0" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>isValid</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a7045e38faf8606fdc4a8e68f9ab5697a" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>length</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a9a2350583582ae85a7355f17341b73e2" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>line</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a949deb6c092b43f6d1203100f9407376" prot="private" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>M_origin</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a4303daee2018d97ea12ac12be9320fc7" prot="private" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>M_terminal</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a8d55be9e93240a0af578301b31377568" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>nearestPoint</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a6a20bc99f33e9459e2ce36694d0a1e04" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>onSegment</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a926ee84a23a79632683f3621449911fa" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>onSegmentWeakly</name></member>
      <member refid="classrcsc_1_1_segment2_d_1adbf14a9152602fc6abe253028ef1d961" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>origin</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a99ca6897161dd19abfa39c72746e3f4b" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>perpendicularBisector</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a9fda74b799f3b2e3f959a893f3862460" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>print</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a2d50e9f1e73668c3ddb7c1f2a4ab3430" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>projection</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a2336439a3866472d5310fae362fa4a9c" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>reverse</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a8d74b27bf1eada3df58d5e501f05bbf8" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>reversedSegment</name></member>
      <member refid="classrcsc_1_1_segment2_d_1abf5ac260070e6fddfe32ce496e90cee4" prot="private" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>Segment2D</name></member>
      <member refid="classrcsc_1_1_segment2_d_1abc22af5db51bab7c2557614f7f3d3651" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>Segment2D</name></member>
      <member refid="classrcsc_1_1_segment2_d_1aac3f775be1bc6f9f861e61cfefce5eec" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>Segment2D</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a2b6b33bfce376825c71c24f2a8e41bcd" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>Segment2D</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a69a5cf62180a29a1395efe5560efb701" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>swap</name></member>
      <member refid="classrcsc_1_1_segment2_d_1a5aa01ea7a341adaeec9a4e89d55619d0" prot="public" virt="non-virtual"><scope>rcsc::Segment2D</scope><name>terminal</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
