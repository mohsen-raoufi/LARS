<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_custom_plot" kind="class" language="C++" prot="public">
    <compoundname>QCustomPlot</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QWidget</basecompoundref>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7" prot="public" static="no" strong="no">
        <type></type>
        <name>LayerInsertMode</name>
        <qualifiedname>QCustomPlot::LayerInsertMode</qualifiedname>
        <enumvalue id="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7aee39cf650cd24e68552da0b697ce4a93" prot="public">
          <name>limBelow</name>
          <briefdescription>
<para>Layer is inserted below other layer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7a062b0b7825650b432a713c0df6742d41" prot="public">
          <name>limAbove</name>
          <briefdescription>
<para>Layer is inserted above other layer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines how a layer should be inserted relative to an other layer.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">addLayer</ref>, <ref refid="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" kindref="member">moveLayer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3774" column="3" bodyfile="qcustomplot.h" bodystart="3774" bodyend="3776"/>
      </memberdef>
      <memberdef kind="enum" id="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39" prot="public" static="no" strong="no">
        <type></type>
        <name>RefreshPriority</name>
        <qualifiedname>QCustomPlot::RefreshPriority</qualifiedname>
        <enumvalue id="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39aa6eda645ccf1a60635df3e8b71ea6ae2" prot="public">
          <name>rpImmediateRefresh</name>
          <briefdescription>
<para>Replots immediately and repaints the widget immediately by calling QWidget::repaint() after the replot. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39acd6f1e590ea775d1ddee666428077f3e" prot="public">
          <name>rpQueuedRefresh</name>
          <briefdescription>
<para>Replots immediately, but queues the widget repaint, by calling QWidget::update() after the replot. This way multiple redundant widget repaints can be avoided. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a49666a5854a68dbcca8b277b03331260" prot="public">
          <name>rpRefreshHint</name>
          <briefdescription>
<para>Whether to use immediate or queued refresh depends on whether the plotting hint <ref refid="namespace_q_c_p_1a5400e5fcb9528d92002ddb938c1f4ef4a30840fba10eebfa519a92cf5c3d32870" kindref="member">QCP::phImmediateRefresh</ref> is set, see <ref refid="class_q_custom_plot_1a94a33cbdadbbac5934843508bcfc210d" kindref="member">setPlottingHints</ref>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a019650c6ddf308f97e811fbfff207a8f" prot="public">
          <name>rpQueuedReplot</name>
          <briefdescription>
<para>Queues the entire replot for the next event loop iteration. This way multiple redundant replots can be avoided. The actual replot is then done with <ref refid="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a49666a5854a68dbcca8b277b03331260" kindref="member">rpRefreshHint</ref> priority. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines with what timing the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> surface is refreshed after a replot.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">replot</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3784" column="3" bodyfile="qcustomplot.h" bodystart="3784" bodyend="3788"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_q_custom_plot_1a968b5ac86c181a49bba78c2b62a80cb3" prot="public" static="no" mutable="no">
        <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
        <definition>QCPAxis* QCustomPlot::xAxis</definition>
        <argsstring></argsstring>
        <name>xAxis</name>
        <qualifiedname>QCustomPlot::xAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the primary x Axis (bottom) of the main axis rect of the plot.</para>
<para><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> offers convenient pointers to the axes (<ref refid="class_q_custom_plot_1a968b5ac86c181a49bba78c2b62a80cb3" kindref="member">xAxis</ref>, <ref refid="class_q_custom_plot_1af6fea5679725b152c14facd920b19367" kindref="member">yAxis</ref>, <ref refid="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9" kindref="member">xAxis2</ref>, <ref refid="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7" kindref="member">yAxis2</ref>) and the <ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">legend</ref>. They make it very easy working with plots that only have a single axis rect and at most one axis at each axis rect side. If you use <ref refid="" kindref="compound">the layout system</ref> to add multiple axis rects or multiple axes to one side, use the <ref refid="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1" kindref="member">QCPAxisRect::axis</ref> interface to access the new axes. If one of the four default axes or the default legend is removed due to manipulation of the layout system (e.g. by removing the main axis rect), the corresponding pointers become <computeroutput>nullptr</computeroutput>.</para>
<para>If an axis convenience pointer is currently <computeroutput>nullptr</computeroutput> and a new axis rect or a corresponding axis is added in the place of the main axis rect, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> resets the convenience pointers to the according new axes. Similarly the <ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">legend</ref> convenience pointer will be reset if a legend is added after the main legend was removed before. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3907" column="11" bodyfile="qcustomplot.h" bodystart="3907" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1af6fea5679725b152c14facd920b19367" prot="public" static="no" mutable="no">
        <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
        <definition>QCPAxis * QCustomPlot::yAxis</definition>
        <argsstring></argsstring>
        <name>yAxis</name>
        <qualifiedname>QCustomPlot::yAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the primary y Axis (left) of the main axis rect of the plot.</para>
<para><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> offers convenient pointers to the axes (<ref refid="class_q_custom_plot_1a968b5ac86c181a49bba78c2b62a80cb3" kindref="member">xAxis</ref>, <ref refid="class_q_custom_plot_1af6fea5679725b152c14facd920b19367" kindref="member">yAxis</ref>, <ref refid="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9" kindref="member">xAxis2</ref>, <ref refid="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7" kindref="member">yAxis2</ref>) and the <ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">legend</ref>. They make it very easy working with plots that only have a single axis rect and at most one axis at each axis rect side. If you use <ref refid="" kindref="compound">the layout system</ref> to add multiple axis rects or multiple axes to one side, use the <ref refid="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1" kindref="member">QCPAxisRect::axis</ref> interface to access the new axes. If one of the four default axes or the default legend is removed due to manipulation of the layout system (e.g. by removing the main axis rect), the corresponding pointers become <computeroutput>nullptr</computeroutput>.</para>
<para>If an axis convenience pointer is currently <computeroutput>nullptr</computeroutput> and a new axis rect or a corresponding axis is added in the place of the main axis rect, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> resets the convenience pointers to the according new axes. Similarly the <ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">legend</ref> convenience pointer will be reset if a legend is added after the main legend was removed before. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3907" column="17" bodyfile="qcustomplot.h" bodystart="3907" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9" prot="public" static="no" mutable="no">
        <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
        <definition>QCPAxis * QCustomPlot::xAxis2</definition>
        <argsstring></argsstring>
        <name>xAxis2</name>
        <qualifiedname>QCustomPlot::xAxis2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the secondary x Axis (top) of the main axis rect of the plot. Secondary axes are invisible by default. Use <ref refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" kindref="member">QCPAxis::setVisible</ref> to change this (or use <ref refid="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4" kindref="member">QCPAxisRect::setupFullAxesBox</ref>).</para>
<para><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> offers convenient pointers to the axes (<ref refid="class_q_custom_plot_1a968b5ac86c181a49bba78c2b62a80cb3" kindref="member">xAxis</ref>, <ref refid="class_q_custom_plot_1af6fea5679725b152c14facd920b19367" kindref="member">yAxis</ref>, <ref refid="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9" kindref="member">xAxis2</ref>, <ref refid="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7" kindref="member">yAxis2</ref>) and the <ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">legend</ref>. They make it very easy working with plots that only have a single axis rect and at most one axis at each axis rect side. If you use <ref refid="" kindref="compound">the layout system</ref> to add multiple axis rects or multiple axes to one side, use the <ref refid="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1" kindref="member">QCPAxisRect::axis</ref> interface to access the new axes. If one of the four default axes or the default legend is removed due to manipulation of the layout system (e.g. by removing the main axis rect), the corresponding pointers become <computeroutput>nullptr</computeroutput>.</para>
<para>If an axis convenience pointer is currently <computeroutput>nullptr</computeroutput> and a new axis rect or a corresponding axis is added in the place of the main axis rect, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> resets the convenience pointers to the according new axes. Similarly the <ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">legend</ref> convenience pointer will be reset if a legend is added after the main legend was removed before. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3907" column="23" bodyfile="qcustomplot.h" bodystart="3907" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7" prot="public" static="no" mutable="no">
        <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
        <definition>QCPAxis * QCustomPlot::yAxis2</definition>
        <argsstring></argsstring>
        <name>yAxis2</name>
        <qualifiedname>QCustomPlot::yAxis2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the secondary y Axis (right) of the main axis rect of the plot. Secondary axes are invisible by default. Use <ref refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" kindref="member">QCPAxis::setVisible</ref> to change this (or use <ref refid="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4" kindref="member">QCPAxisRect::setupFullAxesBox</ref>).</para>
<para><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> offers convenient pointers to the axes (<ref refid="class_q_custom_plot_1a968b5ac86c181a49bba78c2b62a80cb3" kindref="member">xAxis</ref>, <ref refid="class_q_custom_plot_1af6fea5679725b152c14facd920b19367" kindref="member">yAxis</ref>, <ref refid="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9" kindref="member">xAxis2</ref>, <ref refid="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7" kindref="member">yAxis2</ref>) and the <ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">legend</ref>. They make it very easy working with plots that only have a single axis rect and at most one axis at each axis rect side. If you use <ref refid="" kindref="compound">the layout system</ref> to add multiple axis rects or multiple axes to one side, use the <ref refid="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1" kindref="member">QCPAxisRect::axis</ref> interface to access the new axes. If one of the four default axes or the default legend is removed due to manipulation of the layout system (e.g. by removing the main axis rect), the corresponding pointers become <computeroutput>nullptr</computeroutput>.</para>
<para>If an axis convenience pointer is currently <computeroutput>nullptr</computeroutput> and a new axis rect or a corresponding axis is added in the place of the main axis rect, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> resets the convenience pointers to the according new axes. Similarly the <ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">legend</ref> convenience pointer will be reset if a legend is added after the main legend was removed before. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3907" column="30" bodyfile="qcustomplot.h" bodystart="3907" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" prot="public" static="no" mutable="no">
        <type><ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref> *</type>
        <definition>QCPLegend* QCustomPlot::legend</definition>
        <argsstring></argsstring>
        <name>legend</name>
        <qualifiedname>QCustomPlot::legend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the default legend of the main axis rect. The legend is invisible by default. Use <ref refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" kindref="member">QCPLegend::setVisible</ref> to change this.</para>
<para><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> offers convenient pointers to the axes (<ref refid="class_q_custom_plot_1a968b5ac86c181a49bba78c2b62a80cb3" kindref="member">xAxis</ref>, <ref refid="class_q_custom_plot_1af6fea5679725b152c14facd920b19367" kindref="member">yAxis</ref>, <ref refid="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9" kindref="member">xAxis2</ref>, <ref refid="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7" kindref="member">yAxis2</ref>) and the <ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">legend</ref>. They make it very easy working with plots that only have a single axis rect and at most one axis at each axis rect side. If you use <ref refid="" kindref="compound">the layout system</ref> to add multiple legends to the plot, use the layout system interface to access the new legend. For example, legends can be placed inside an axis rect&apos;s <ref refid="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10" kindref="member">inset layout</ref>, and must then also be accessed via the inset layout. If the default legend is removed due to manipulation of the layout system (e.g. by removing the main axis rect), the corresponding pointer becomes <computeroutput>nullptr</computeroutput>.</para>
<para>If an axis convenience pointer is currently <computeroutput>nullptr</computeroutput> and a new axis rect or a corresponding axis is added in the place of the main axis rect, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> resets the convenience pointers to the according new axes. Similarly the <ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">legend</ref> convenience pointer will be reset if a legend is added after the main legend was removed before. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3908" column="13" bodyfile="qcustomplot.h" bodystart="3908" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_custom_plot_1ac0a7c38a715526c257cff95774f83ab6" prot="protected" static="no" mutable="no">
        <type>QRect</type>
        <definition>QRect QCustomPlot::mViewport</definition>
        <argsstring></argsstring>
        <name>mViewport</name>
        <qualifiedname>QCustomPlot::mViewport</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3933" column="9" bodyfile="qcustomplot.h" bodystart="3933" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a63a40c57a2d89eea27b90b62cc4eee1f" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double QCustomPlot::mBufferDevicePixelRatio</definition>
        <argsstring></argsstring>
        <name>mBufferDevicePixelRatio</name>
        <qualifiedname>QCustomPlot::mBufferDevicePixelRatio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3934" column="10" bodyfile="qcustomplot.h" bodystart="3934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1ac97298756882a0eecd98151679850ac1" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref> *</type>
        <definition>QCPLayoutGrid* QCustomPlot::mPlotLayout</definition>
        <argsstring></argsstring>
        <name>mPlotLayout</name>
        <qualifiedname>QCustomPlot::mPlotLayout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3935" column="17" bodyfile="qcustomplot.h" bodystart="3935" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1aaf3ea6a4cb04d35a149cc9a0cdac3394" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCustomPlot::mAutoAddPlottableToLegend</definition>
        <argsstring></argsstring>
        <name>mAutoAddPlottableToLegend</name>
        <qualifiedname>QCustomPlot::mAutoAddPlottableToLegend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3936" column="8" bodyfile="qcustomplot.h" bodystart="3936" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a62bf8e4e7f8d23fc1e9301ba0148269f" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> * &gt;</type>
        <definition>QList&lt;QCPAbstractPlottable*&gt; QCustomPlot::mPlottables</definition>
        <argsstring></argsstring>
        <name>mPlottables</name>
        <qualifiedname>QCustomPlot::mPlottables</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3937" column="9" bodyfile="qcustomplot.h" bodystart="3937" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1adaf8d407d72a725169d7dbed2ee386bb" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> * &gt;</type>
        <definition>QList&lt;QCPGraph*&gt; QCustomPlot::mGraphs</definition>
        <argsstring></argsstring>
        <name>mGraphs</name>
        <qualifiedname>QCustomPlot::mGraphs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3938" column="9" bodyfile="qcustomplot.h" bodystart="3938" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a6a93905372326e31e98d6c3bc8953ec8" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> * &gt;</type>
        <definition>QList&lt;QCPAbstractItem*&gt; QCustomPlot::mItems</definition>
        <argsstring></argsstring>
        <name>mItems</name>
        <qualifiedname>QCustomPlot::mItems</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3939" column="9" bodyfile="qcustomplot.h" bodystart="3939" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a72ee313041b873d76c198793ce7e6c37" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> * &gt;</type>
        <definition>QList&lt;QCPLayer*&gt; QCustomPlot::mLayers</definition>
        <argsstring></argsstring>
        <name>mLayers</name>
        <qualifiedname>QCustomPlot::mLayers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3940" column="9" bodyfile="qcustomplot.h" bodystart="3940" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1aa333200629256830e273873b582a5524" prot="protected" static="no" mutable="no">
        <type>QCP::AntialiasedElements</type>
        <definition>QCP::AntialiasedElements QCustomPlot::mAntialiasedElements</definition>
        <argsstring></argsstring>
        <name>mAntialiasedElements</name>
        <qualifiedname>QCustomPlot::mAntialiasedElements</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3941" column="28" bodyfile="qcustomplot.h" bodystart="3941" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a2b6ebcad00a90ba07f146cefcd4293da" prot="protected" static="no" mutable="no">
        <type>QCP::AntialiasedElements</type>
        <definition>QCP::AntialiasedElements QCustomPlot::mNotAntialiasedElements</definition>
        <argsstring></argsstring>
        <name>mNotAntialiasedElements</name>
        <qualifiedname>QCustomPlot::mNotAntialiasedElements</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3941" column="49" bodyfile="qcustomplot.h" bodystart="3941" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1ad717377ceba7493b4b32f0bcbbdf1895" prot="protected" static="no" mutable="no">
        <type>QCP::Interactions</type>
        <definition>QCP::Interactions QCustomPlot::mInteractions</definition>
        <argsstring></argsstring>
        <name>mInteractions</name>
        <qualifiedname>QCustomPlot::mInteractions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3942" column="21" bodyfile="qcustomplot.h" bodystart="3942" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1abc36e12dd0482117ad810a800c847722" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int QCustomPlot::mSelectionTolerance</definition>
        <argsstring></argsstring>
        <name>mSelectionTolerance</name>
        <qualifiedname>QCustomPlot::mSelectionTolerance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3943" column="7" bodyfile="qcustomplot.h" bodystart="3943" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1ac83df968435f6b8ec79f2993ab9124e8" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCustomPlot::mNoAntialiasingOnDrag</definition>
        <argsstring></argsstring>
        <name>mNoAntialiasingOnDrag</name>
        <qualifiedname>QCustomPlot::mNoAntialiasingOnDrag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3944" column="8" bodyfile="qcustomplot.h" bodystart="3944" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a3aef5de4ac012178e3293248e9c63737" prot="protected" static="no" mutable="no">
        <type>QBrush</type>
        <definition>QBrush QCustomPlot::mBackgroundBrush</definition>
        <argsstring></argsstring>
        <name>mBackgroundBrush</name>
        <qualifiedname>QCustomPlot::mBackgroundBrush</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3945" column="10" bodyfile="qcustomplot.h" bodystart="3945" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1ae8f4677399324a78c5f8dbfb95a34f90" prot="protected" static="no" mutable="no">
        <type>QPixmap</type>
        <definition>QPixmap QCustomPlot::mBackgroundPixmap</definition>
        <argsstring></argsstring>
        <name>mBackgroundPixmap</name>
        <qualifiedname>QCustomPlot::mBackgroundPixmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3946" column="11" bodyfile="qcustomplot.h" bodystart="3946" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a081bf046501d52642dc6d7e3bdb97d57" prot="protected" static="no" mutable="no">
        <type>QPixmap</type>
        <definition>QPixmap QCustomPlot::mScaledBackgroundPixmap</definition>
        <argsstring></argsstring>
        <name>mScaledBackgroundPixmap</name>
        <qualifiedname>QCustomPlot::mScaledBackgroundPixmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3947" column="11" bodyfile="qcustomplot.h" bodystart="3947" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a62fe584b20680b1b2e1c7efb5c5416a5" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCustomPlot::mBackgroundScaled</definition>
        <argsstring></argsstring>
        <name>mBackgroundScaled</name>
        <qualifiedname>QCustomPlot::mBackgroundScaled</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3948" column="8" bodyfile="qcustomplot.h" bodystart="3948" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1ab82e8a5e3ad6b486f95d6da8bf49e9aa" prot="protected" static="no" mutable="no">
        <type>Qt::AspectRatioMode</type>
        <definition>Qt::AspectRatioMode QCustomPlot::mBackgroundScaledMode</definition>
        <argsstring></argsstring>
        <name>mBackgroundScaledMode</name>
        <qualifiedname>QCustomPlot::mBackgroundScaledMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3949" column="23" bodyfile="qcustomplot.h" bodystart="3949" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1aa27569c92e74395af10151357d268628" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> *</type>
        <definition>QCPLayer* QCustomPlot::mCurrentLayer</definition>
        <argsstring></argsstring>
        <name>mCurrentLayer</name>
        <qualifiedname>QCustomPlot::mCurrentLayer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3950" column="12" bodyfile="qcustomplot.h" bodystart="3950" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1aa184197a6101a9cc5807469e1d006c9e" prot="protected" static="no" mutable="no">
        <type>QCP::PlottingHints</type>
        <definition>QCP::PlottingHints QCustomPlot::mPlottingHints</definition>
        <argsstring></argsstring>
        <name>mPlottingHints</name>
        <qualifiedname>QCustomPlot::mPlottingHints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3951" column="22" bodyfile="qcustomplot.h" bodystart="3951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a0e97e701c5671e7e463d2ce0211d0f8a" prot="protected" static="no" mutable="no">
        <type>Qt::KeyboardModifier</type>
        <definition>Qt::KeyboardModifier QCustomPlot::mMultiSelectModifier</definition>
        <argsstring></argsstring>
        <name>mMultiSelectModifier</name>
        <qualifiedname>QCustomPlot::mMultiSelectModifier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3952" column="24" bodyfile="qcustomplot.h" bodystart="3952" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1abe04c5def373cc4fede8de20542ca3f2" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacf" kindref="member">QCP::SelectionRectMode</ref></type>
        <definition>QCP::SelectionRectMode QCustomPlot::mSelectionRectMode</definition>
        <argsstring></argsstring>
        <name>mSelectionRectMode</name>
        <qualifiedname>QCustomPlot::mSelectionRectMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3953" column="26" bodyfile="qcustomplot.h" bodystart="3953" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a4827bc84ef5ce52dfbf9ff630ed1b276" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_selection_rect" kindref="compound">QCPSelectionRect</ref> *</type>
        <definition>QCPSelectionRect* QCustomPlot::mSelectionRect</definition>
        <argsstring></argsstring>
        <name>mSelectionRect</name>
        <qualifiedname>QCustomPlot::mSelectionRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3954" column="20" bodyfile="qcustomplot.h" bodystart="3954" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a0841dbea13bd120d20e3f0cc36767ff9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCustomPlot::mOpenGl</definition>
        <argsstring></argsstring>
        <name>mOpenGl</name>
        <qualifiedname>QCustomPlot::mOpenGl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3955" column="8" bodyfile="qcustomplot.h" bodystart="3955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a57b270b1e3990e0d1b9fb39b137d5a5d" prot="protected" static="no" mutable="no">
        <type>QList&lt; QSharedPointer&lt; <ref refid="class_q_c_p_abstract_paint_buffer" kindref="compound">QCPAbstractPaintBuffer</ref> &gt; &gt;</type>
        <definition>QList&lt;QSharedPointer&lt;QCPAbstractPaintBuffer&gt; &gt; QCustomPlot::mPaintBuffers</definition>
        <argsstring></argsstring>
        <name>mPaintBuffers</name>
        <qualifiedname>QCustomPlot::mPaintBuffers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3958" column="9" bodyfile="qcustomplot.h" bodystart="3958" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1ac57090da95056ae4dd67be67adfa85bd" prot="protected" static="no" mutable="no">
        <type>QPoint</type>
        <definition>QPoint QCustomPlot::mMousePressPos</definition>
        <argsstring></argsstring>
        <name>mMousePressPos</name>
        <qualifiedname>QCustomPlot::mMousePressPos</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3959" column="10" bodyfile="qcustomplot.h" bodystart="3959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1ad2108936f001a8be5974b0b6ff13dae3" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCustomPlot::mMouseHasMoved</definition>
        <argsstring></argsstring>
        <name>mMouseHasMoved</name>
        <qualifiedname>QCustomPlot::mMouseHasMoved</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3960" column="8" bodyfile="qcustomplot.h" bodystart="3960" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a243867f445d2f4e35e00add2f589e1da" prot="protected" static="no" mutable="no">
        <type>QPointer&lt; <ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref> &gt;</type>
        <definition>QPointer&lt;QCPLayerable&gt; QCustomPlot::mMouseEventLayerable</definition>
        <argsstring></argsstring>
        <name>mMouseEventLayerable</name>
        <qualifiedname>QCustomPlot::mMouseEventLayerable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3961" column="12" bodyfile="qcustomplot.h" bodystart="3961" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1adf81640dbf365bd4fa22494e3e504e70" prot="protected" static="no" mutable="no">
        <type>QPointer&lt; <ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref> &gt;</type>
        <definition>QPointer&lt;QCPLayerable&gt; QCustomPlot::mMouseSignalLayerable</definition>
        <argsstring></argsstring>
        <name>mMouseSignalLayerable</name>
        <qualifiedname>QCustomPlot::mMouseSignalLayerable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3962" column="12" bodyfile="qcustomplot.h" bodystart="3962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1ad604958ef16fc022c474521a08d88a2d" prot="protected" static="no" mutable="no">
        <type>QVariant</type>
        <definition>QVariant QCustomPlot::mMouseEventLayerableDetails</definition>
        <argsstring></argsstring>
        <name>mMouseEventLayerableDetails</name>
        <qualifiedname>QCustomPlot::mMouseEventLayerableDetails</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3963" column="12" bodyfile="qcustomplot.h" bodystart="3963" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a2f313604bb22781633137915f3c100e6" prot="protected" static="no" mutable="no">
        <type>QVariant</type>
        <definition>QVariant QCustomPlot::mMouseSignalLayerableDetails</definition>
        <argsstring></argsstring>
        <name>mMouseSignalLayerableDetails</name>
        <qualifiedname>QCustomPlot::mMouseSignalLayerableDetails</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3964" column="12" bodyfile="qcustomplot.h" bodystart="3964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1ab30daeca6612c3948afd368dce5f1c39" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCustomPlot::mReplotting</definition>
        <argsstring></argsstring>
        <name>mReplotting</name>
        <qualifiedname>QCustomPlot::mReplotting</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3965" column="8" bodyfile="qcustomplot.h" bodystart="3965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1acedeef316dfcde835b8ea0112cec2a77" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCustomPlot::mReplotQueued</definition>
        <argsstring></argsstring>
        <name>mReplotQueued</name>
        <qualifiedname>QCustomPlot::mReplotQueued</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3966" column="8" bodyfile="qcustomplot.h" bodystart="3966" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a0279737e4f10ed92c566968befe98529" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double QCustomPlot::mReplotTime</definition>
        <argsstring></argsstring>
        <name>mReplotTime</name>
        <qualifiedname>QCustomPlot::mReplotTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3967" column="10" bodyfile="qcustomplot.h" bodystart="3967" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1a8e7659163d63e18ba42036d6cb3aa920" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double QCustomPlot::mReplotTimeAverage</definition>
        <argsstring></argsstring>
        <name>mReplotTimeAverage</name>
        <qualifiedname>QCustomPlot::mReplotTimeAverage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3967" column="22" bodyfile="qcustomplot.h" bodystart="3967" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1aacafac2b2280b6a868a4b734273a394c" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int QCustomPlot::mOpenGlMultisamples</definition>
        <argsstring></argsstring>
        <name>mOpenGlMultisamples</name>
        <qualifiedname>QCustomPlot::mOpenGlMultisamples</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3968" column="7" bodyfile="qcustomplot.h" bodystart="3968" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1adbf005715d5f8550511819a4baf841fb" prot="protected" static="no" mutable="no">
        <type>QCP::AntialiasedElements</type>
        <definition>QCP::AntialiasedElements QCustomPlot::mOpenGlAntialiasedElementsBackup</definition>
        <argsstring></argsstring>
        <name>mOpenGlAntialiasedElementsBackup</name>
        <qualifiedname>QCustomPlot::mOpenGlAntialiasedElementsBackup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3969" column="28" bodyfile="qcustomplot.h" bodystart="3969" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_custom_plot_1ab1692469dde841080fa33719533bf2b7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCustomPlot::mOpenGlCacheLabelsBackup</definition>
        <argsstring></argsstring>
        <name>mOpenGlCacheLabelsBackup</name>
        <qualifiedname>QCustomPlot::mOpenGlCacheLabelsBackup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3970" column="8" bodyfile="qcustomplot.h" bodystart="3970" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_custom_plot_1a8429035e7adfbd7f05805a6530ad5e3b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPLegend</definition>
        <argsstring></argsstring>
        <name>QCPLegend</name>
        <qualifiedname>QCustomPlot::QCPLegend</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4011" column="16" bodyfile="qcustomplot.h" bodystart="4011" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_custom_plot_1af123edeca169ec7a31958a1d714e1a8a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPAxis</definition>
        <argsstring></argsstring>
        <name>QCPAxis</name>
        <qualifiedname>QCustomPlot::QCPAxis</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4012" column="16" bodyfile="qcustomplot.h" bodystart="4012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_custom_plot_1a5dbf96bf7664c1b6fce49063eeea6eef" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPLayer</definition>
        <argsstring></argsstring>
        <name>QCPLayer</name>
        <qualifiedname>QCustomPlot::QCPLayer</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4013" column="16" bodyfile="qcustomplot.h" bodystart="4013" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_custom_plot_1acbf20ecb140f66c5fd1bc64ae0762990" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPAxisRect</definition>
        <argsstring></argsstring>
        <name>QCPAxisRect</name>
        <qualifiedname>QCustomPlot::QCPAxisRect</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4014" column="16" bodyfile="qcustomplot.h" bodystart="4014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_custom_plot_1a53cf0e76aca814550c796fed79e345d6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPAbstractPlottable</definition>
        <argsstring></argsstring>
        <name>QCPAbstractPlottable</name>
        <qualifiedname>QCustomPlot::QCPAbstractPlottable</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4015" column="16" bodyfile="qcustomplot.h" bodystart="4015" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_custom_plot_1ad0c52e327d94c699d415fd61f930700a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPGraph</definition>
        <argsstring></argsstring>
        <name>QCPGraph</name>
        <qualifiedname>QCustomPlot::QCPGraph</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4016" column="16" bodyfile="qcustomplot.h" bodystart="4016" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_custom_plot_1a93e962f2e677e31ecc575bb884e46adf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPAbstractItem</definition>
        <argsstring></argsstring>
        <name>QCPAbstractItem</name>
        <qualifiedname>QCustomPlot::QCPAbstractItem</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4017" column="16" bodyfile="qcustomplot.h" bodystart="4017" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_custom_plot_1a3c1c171f620ef0ea4ae3dbb2e6a0209a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCustomPlot::QCustomPlot</definition>
        <argsstring>(QWidget *parent=nullptr)</argsstring>
        <name>QCustomPlot</name>
        <qualifiedname>QCustomPlot::QCustomPlot</qualifiedname>
        <param>
          <type>QWidget *</type>
          <declname>parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> and sets reasonable default values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3791" column="12" bodyfile="qcustomplot.cpp" bodystart="13593" bodyend="13690"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a6a10e600c05635e9a314597a8a5c94e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCustomPlot::~QCustomPlot</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>~QCustomPlot</name>
        <qualifiedname>QCustomPlot::~QCustomPlot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3792" column="11" bodyfile="qcustomplot.cpp" bodystart="13692" bodyend="13706"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a19842409b18f556b256d05e97fffc670" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QRect</type>
        <definition>QRect QCustomPlot::viewport</definition>
        <argsstring>() const</argsstring>
        <name>viewport</name>
        <qualifiedname>QCustomPlot::viewport</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3795" column="9" bodyfile="qcustomplot.h" bodystart="3795" bodyend="3795"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a53d35abe0f576f9838cde5d0bee47657" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double QCustomPlot::bufferDevicePixelRatio</definition>
        <argsstring>() const</argsstring>
        <name>bufferDevicePixelRatio</name>
        <qualifiedname>QCustomPlot::bufferDevicePixelRatio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3796" column="10" bodyfile="qcustomplot.h" bodystart="3796" bodyend="3796"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a5b9bbc838cb856e31b39c050fad49f9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPixmap</type>
        <definition>QPixmap QCustomPlot::background</definition>
        <argsstring>() const</argsstring>
        <name>background</name>
        <qualifiedname>QCustomPlot::background</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3797" column="11" bodyfile="qcustomplot.h" bodystart="3797" bodyend="3797"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1aac96f3a0f5070228ed13602976886b80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::backgroundScaled</definition>
        <argsstring>() const</argsstring>
        <name>backgroundScaled</name>
        <qualifiedname>QCustomPlot::backgroundScaled</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3798" column="8" bodyfile="qcustomplot.h" bodystart="3798" bodyend="3798"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1af8f1ebfdbf48d7c49f95136475d55b14" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Qt::AspectRatioMode</type>
        <definition>Qt::AspectRatioMode QCustomPlot::backgroundScaledMode</definition>
        <argsstring>() const</argsstring>
        <name>backgroundScaledMode</name>
        <qualifiedname>QCustomPlot::backgroundScaledMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3799" column="23" bodyfile="qcustomplot.h" bodystart="3799" bodyend="3799"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1af1a1f1f571237deb7c2bd34a5e9f018f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref> *</type>
        <definition>QCPLayoutGrid * QCustomPlot::plotLayout</definition>
        <argsstring>() const</argsstring>
        <name>plotLayout</name>
        <qualifiedname>QCustomPlot::plotLayout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the top level layout of this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance. It is a <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref>, initially containing just one cell with the main <ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> inside. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3800" column="17" bodyfile="qcustomplot.h" bodystart="3800" bodyend="3800"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a631762eb183aceecee73d30e108641ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QCP::AntialiasedElements</type>
        <definition>QCP::AntialiasedElements QCustomPlot::antialiasedElements</definition>
        <argsstring>() const</argsstring>
        <name>antialiasedElements</name>
        <qualifiedname>QCustomPlot::antialiasedElements</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3801" column="28" bodyfile="qcustomplot.h" bodystart="3801" bodyend="3801"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a75571bc5b2167e83def132fc993091b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QCP::AntialiasedElements</type>
        <definition>QCP::AntialiasedElements QCustomPlot::notAntialiasedElements</definition>
        <argsstring>() const</argsstring>
        <name>notAntialiasedElements</name>
        <qualifiedname>QCustomPlot::notAntialiasedElements</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3802" column="28" bodyfile="qcustomplot.h" bodystart="3802" bodyend="3802"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ac4b87de13eaceadc8db5a66654197689" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::autoAddPlottableToLegend</definition>
        <argsstring>() const</argsstring>
        <name>autoAddPlottableToLegend</name>
        <qualifiedname>QCustomPlot::autoAddPlottableToLegend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3803" column="8" bodyfile="qcustomplot.h" bodystart="3803" bodyend="3803"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a2c78c5fd2943c148ab76652801d3f2dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const QCP::Interactions</type>
        <definition>const QCP::Interactions QCustomPlot::interactions</definition>
        <argsstring>() const</argsstring>
        <name>interactions</name>
        <qualifiedname>QCustomPlot::interactions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3804" column="27" bodyfile="qcustomplot.h" bodystart="3804" bodyend="3804"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a5441d11013afeaf4b8f2ea06e8624a25" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCustomPlot::selectionTolerance</definition>
        <argsstring>() const</argsstring>
        <name>selectionTolerance</name>
        <qualifiedname>QCustomPlot::selectionTolerance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3805" column="7" bodyfile="qcustomplot.h" bodystart="3805" bodyend="3805"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1aca3f01f903fb250a3dd27104d92830be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::noAntialiasingOnDrag</definition>
        <argsstring>() const</argsstring>
        <name>noAntialiasingOnDrag</name>
        <qualifiedname>QCustomPlot::noAntialiasingOnDrag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3806" column="8" bodyfile="qcustomplot.h" bodystart="3806" bodyend="3806"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ac724f4075822f74f7b676a790095b877" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QCP::PlottingHints</type>
        <definition>QCP::PlottingHints QCustomPlot::plottingHints</definition>
        <argsstring>() const</argsstring>
        <name>plottingHints</name>
        <qualifiedname>QCustomPlot::plottingHints</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3807" column="22" bodyfile="qcustomplot.h" bodystart="3807" bodyend="3807"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a28182402ed11609c9a429f0788162d18" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Qt::KeyboardModifier</type>
        <definition>Qt::KeyboardModifier QCustomPlot::multiSelectModifier</definition>
        <argsstring>() const</argsstring>
        <name>multiSelectModifier</name>
        <qualifiedname>QCustomPlot::multiSelectModifier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3808" column="24" bodyfile="qcustomplot.h" bodystart="3808" bodyend="3808"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a6e53c402de2770a978dffa5584c05b27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacf" kindref="member">QCP::SelectionRectMode</ref></type>
        <definition>QCP::SelectionRectMode QCustomPlot::selectionRectMode</definition>
        <argsstring>() const</argsstring>
        <name>selectionRectMode</name>
        <qualifiedname>QCustomPlot::selectionRectMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3809" column="26" bodyfile="qcustomplot.h" bodystart="3809" bodyend="3809"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ad7df2bcbba307e644db383b449e31efd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_selection_rect" kindref="compound">QCPSelectionRect</ref> *</type>
        <definition>QCPSelectionRect * QCustomPlot::selectionRect</definition>
        <argsstring>() const</argsstring>
        <name>selectionRect</name>
        <qualifiedname>QCustomPlot::selectionRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows access to the currently used <ref refid="class_q_c_p_selection_rect" kindref="compound">QCPSelectionRect</ref> instance (or subclass thereof), that is used to handle and draw selection rect interactions (see <ref refid="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb" kindref="member">setSelectionRectMode</ref>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a0c09f96df15faa4799ad7051bb16cf33" kindref="member">setSelectionRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3810" column="20" bodyfile="qcustomplot.h" bodystart="3810" bodyend="3810"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1abe5556ac80dc0140fd57f2b2f94a1f0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::openGl</definition>
        <argsstring>() const</argsstring>
        <name>openGl</name>
        <qualifiedname>QCustomPlot::openGl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3811" column="8" bodyfile="qcustomplot.h" bodystart="3811" bodyend="3811"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a3f9bc4b939dd8aaba9339fd09f273fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setViewport</definition>
        <argsstring>(const QRect &amp;rect)</argsstring>
        <name>setViewport</name>
        <qualifiedname>QCustomPlot::setViewport</qualifiedname>
        <param>
          <type>const QRect &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the viewport of this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>. Usually users of <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> don&apos;t need to change the viewport manually.</para>
<para>The viewport is the area in which the plot is drawn. All mechanisms, e.g. margin calculation take the viewport to be the outer border of the plot. The viewport normally is the rect() of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget, i.e. a rect with top left (0, 0) and size of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget.</para>
<para>Don&apos;t confuse the viewport with the axis rect (<ref refid="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9" kindref="member">QCustomPlot::axisRect</ref>). An axis rect is typically an area enclosed by four axes, where the graphs/plottables are drawn in. The viewport is larger and contains also the axes themselves, their tick numbers, their labels, or even additional axis rects, color scales and other layout elements.</para>
<para>This function is used to allow arbitrary size exports with <ref refid="class_q_custom_plot_1aabb974d71ce96c137dc04eb6eab844fe" kindref="member">toPixmap</ref>, <ref refid="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9" kindref="member">savePng</ref>, <ref refid="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412" kindref="member">savePdf</ref>, etc. by temporarily changing the viewport size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3814" column="8" bodyfile="qcustomplot.cpp" bodystart="14117" bodyend="14122"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a159162653ad6f8b8bf21263ba5787215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setBufferDevicePixelRatio</definition>
        <argsstring>(double ratio)</argsstring>
        <name>setBufferDevicePixelRatio</name>
        <qualifiedname>QCustomPlot::setBufferDevicePixelRatio</qualifiedname>
        <param>
          <type>double</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the device pixel ratio used by the paint buffers of this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance.</para>
<para>Normally, this doesn&apos;t need to be set manually, because it is initialized with the regular <emphasis>QWidget::devicePixelRatio</emphasis> which is configured by Qt to fit the display device (e.g. 1 for normal displays, 2 for High-DPI displays).</para>
<para>Device pixel ratios are supported by Qt only for Qt versions since 5.4. If this method is called when <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> is being used with older Qt versions, outputs an according qDebug message and leaves the internal buffer device pixel ratio at 1.0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3815" column="8" bodyfile="qcustomplot.cpp" bodystart="14135" bodyend="14149"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setBackground</definition>
        <argsstring>(const QPixmap &amp;pm)</argsstring>
        <name>setBackground</name>
        <qualifiedname>QCustomPlot::setBackground</qualifiedname>
        <param>
          <type>const QPixmap &amp;</type>
          <declname>pm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets <emphasis>pm</emphasis> as the viewport background pixmap (see <ref refid="class_q_custom_plot_1a3f9bc4b939dd8aaba9339fd09f273fc4" kindref="member">setViewport</ref>). The pixmap is always drawn below all other objects in the plot.</para>
<para>For cases where the provided pixmap doesn&apos;t have the same size as the viewport, scaling can be enabled with <ref refid="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f" kindref="member">setBackgroundScaled</ref> and the scaling mode (whether and how the aspect ratio is preserved) can be set with <ref refid="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0" kindref="member">setBackgroundScaledMode</ref>. To set all these options in one call, consider using the overloaded version of this function.</para>
<para>If a background brush was set with <ref refid="class_q_custom_plot_1a8ed256cf467bfa7ba1f9feaae62c3bd0" kindref="member">setBackground(const QBrush &amp;brush)</ref>, the viewport will first be filled with that brush, before drawing the background pixmap. This can be useful for background pixmaps with translucent areas.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f" kindref="member">setBackgroundScaled</ref>, <ref refid="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0" kindref="member">setBackgroundScaledMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3816" column="8" bodyfile="qcustomplot.cpp" bodystart="14166" bodyend="14170"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a8513971d6aa24d8b0d6a68d45b542130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setBackground</definition>
        <argsstring>(const QPixmap &amp;pm, bool scaled, Qt::AspectRatioMode mode=Qt::KeepAspectRatioByExpanding)</argsstring>
        <name>setBackground</name>
        <qualifiedname>QCustomPlot::setBackground</qualifiedname>
        <param>
          <type>const QPixmap &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scaled</declname>
        </param>
        <param>
          <type>Qt::AspectRatioMode</type>
          <declname>mode</declname>
          <defval>Qt::KeepAspectRatioByExpanding</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Allows setting the background pixmap of the viewport, whether it shall be scaled and how it shall be scaled in one call.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00" kindref="member">setBackground(const QPixmap &amp;pm)</ref>, <ref refid="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f" kindref="member">setBackgroundScaled</ref>, <ref refid="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0" kindref="member">setBackgroundScaledMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3817" column="8" bodyfile="qcustomplot.cpp" bodystart="14197" bodyend="14203"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a8ed256cf467bfa7ba1f9feaae62c3bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setBackground</definition>
        <argsstring>(const QBrush &amp;brush)</argsstring>
        <name>setBackground</name>
        <qualifiedname>QCustomPlot::setBackground</qualifiedname>
        <param>
          <type>const QBrush &amp;</type>
          <declname>brush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the background brush of the viewport (see <ref refid="class_q_custom_plot_1a3f9bc4b939dd8aaba9339fd09f273fc4" kindref="member">setViewport</ref>).</para>
<para>Before drawing everything else, the background is filled with <emphasis>brush</emphasis>. If a background pixmap was set with <ref refid="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00" kindref="member">setBackground(const QPixmap &amp;pm)</ref>, this brush will be used to fill the viewport before the background pixmap is drawn. This can be useful for background pixmaps with translucent areas.</para>
<para>Set <emphasis>brush</emphasis> to Qt::NoBrush or Qt::Transparent to leave background transparent. This can be useful for exporting to image formats which support transparency, e.g. <ref refid="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9" kindref="member">savePng</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f" kindref="member">setBackgroundScaled</ref>, <ref refid="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0" kindref="member">setBackgroundScaledMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3818" column="8" bodyfile="qcustomplot.cpp" bodystart="14185" bodyend="14188"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setBackgroundScaled</definition>
        <argsstring>(bool scaled)</argsstring>
        <name>setBackgroundScaled</name>
        <qualifiedname>QCustomPlot::setBackgroundScaled</qualifiedname>
        <param>
          <type>bool</type>
          <declname>scaled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the viewport background pixmap shall be scaled to fit the viewport. If <emphasis>scaled</emphasis> is set to true, control whether and how the aspect ratio of the original pixmap is preserved with <ref refid="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0" kindref="member">setBackgroundScaledMode</ref>.</para>
<para>Note that the scaled version of the original pixmap is buffered, so there is no performance penalty on replots. (Except when the viewport dimensions are changed continuously.)</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00" kindref="member">setBackground</ref>, <ref refid="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0" kindref="member">setBackgroundScaledMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3819" column="8" bodyfile="qcustomplot.cpp" bodystart="14215" bodyend="14218"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setBackgroundScaledMode</definition>
        <argsstring>(Qt::AspectRatioMode mode)</argsstring>
        <name>setBackgroundScaledMode</name>
        <qualifiedname>QCustomPlot::setBackgroundScaledMode</qualifiedname>
        <param>
          <type>Qt::AspectRatioMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If scaling of the viewport background pixmap is enabled (<ref refid="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f" kindref="member">setBackgroundScaled</ref>), use this function to define whether and how the aspect ratio of the original pixmap is preserved.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00" kindref="member">setBackground</ref>, <ref refid="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f" kindref="member">setBackgroundScaled</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3820" column="8" bodyfile="qcustomplot.cpp" bodystart="14226" bodyend="14229"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setAntialiasedElements</definition>
        <argsstring>(const QCP::AntialiasedElements &amp;antialiasedElements)</argsstring>
        <name>setAntialiasedElements</name>
        <qualifiedname>QCustomPlot::setAntialiasedElements</qualifiedname>
        <param>
          <type>const QCP::AntialiasedElements &amp;</type>
          <declname>antialiasedElements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets which elements are forcibly drawn antialiased as an <emphasis>or</emphasis> combination of <ref refid="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0c" kindref="member">QCP::AntialiasedElement</ref>.</para>
<para>This overrides the antialiasing settings for whole element groups, normally controlled with the <emphasis>setAntialiasing</emphasis> function on the individual elements. If an element is neither specified in <ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">setAntialiasedElements</ref> nor in <ref refid="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24" kindref="member">setNotAntialiasedElements</ref>, the antialiasing setting on each individual element instance is used.</para>
<para>For example, if <emphasis>antialiasedElements</emphasis> contains <ref refid="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0ca4145e4251b0cf2dbedabeea0a38f84f6" kindref="member">QCP::aePlottables</ref>, all plottables will be drawn antialiased, no matter what the specific <ref refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" kindref="member">QCPAbstractPlottable::setAntialiased</ref> value was set to.</para>
<para>if an element in <emphasis>antialiasedElements</emphasis> is already set in <ref refid="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24" kindref="member">setNotAntialiasedElements</ref>, it is removed from there.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24" kindref="member">setNotAntialiasedElements</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3821" column="8" bodyfile="qcustomplot.cpp" bodystart="13725" bodyend="13732"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1aeef813bcf7efab8e765f9f87ec454691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setAntialiasedElement</definition>
        <argsstring>(QCP::AntialiasedElement antialiasedElement, bool enabled=true)</argsstring>
        <name>setAntialiasedElement</name>
        <qualifiedname>QCustomPlot::setAntialiasedElement</qualifiedname>
        <param>
          <type><ref refid="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0c" kindref="member">QCP::AntialiasedElement</ref></type>
          <declname>antialiasedElement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the specified <emphasis>antialiasedElement</emphasis> is forcibly drawn antialiased.</para>
<para>See <ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">setAntialiasedElements</ref> for details.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1afc657938a707c890e449ae89203a076d" kindref="member">setNotAntialiasedElement</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3822" column="8" bodyfile="qcustomplot.cpp" bodystart="13741" bodyend="13751"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setNotAntialiasedElements</definition>
        <argsstring>(const QCP::AntialiasedElements &amp;notAntialiasedElements)</argsstring>
        <name>setNotAntialiasedElements</name>
        <qualifiedname>QCustomPlot::setNotAntialiasedElements</qualifiedname>
        <param>
          <type>const QCP::AntialiasedElements &amp;</type>
          <declname>notAntialiasedElements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets which elements are forcibly drawn not antialiased as an <emphasis>or</emphasis> combination of <ref refid="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0c" kindref="member">QCP::AntialiasedElement</ref>.</para>
<para>This overrides the antialiasing settings for whole element groups, normally controlled with the <emphasis>setAntialiasing</emphasis> function on the individual elements. If an element is neither specified in <ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">setAntialiasedElements</ref> nor in <ref refid="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24" kindref="member">setNotAntialiasedElements</ref>, the antialiasing setting on each individual element instance is used.</para>
<para>For example, if <emphasis>notAntialiasedElements</emphasis> contains <ref refid="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0ca4145e4251b0cf2dbedabeea0a38f84f6" kindref="member">QCP::aePlottables</ref>, no plottables will be drawn antialiased, no matter what the specific <ref refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" kindref="member">QCPAbstractPlottable::setAntialiased</ref> value was set to.</para>
<para>if an element in <emphasis>notAntialiasedElements</emphasis> is already set in <ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">setAntialiasedElements</ref>, it is removed from there.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">setAntialiasedElements</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3823" column="8" bodyfile="qcustomplot.cpp" bodystart="13771" bodyend="13778"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1afc657938a707c890e449ae89203a076d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setNotAntialiasedElement</definition>
        <argsstring>(QCP::AntialiasedElement notAntialiasedElement, bool enabled=true)</argsstring>
        <name>setNotAntialiasedElement</name>
        <qualifiedname>QCustomPlot::setNotAntialiasedElement</qualifiedname>
        <param>
          <type><ref refid="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0c" kindref="member">QCP::AntialiasedElement</ref></type>
          <declname>notAntialiasedElement</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the specified <emphasis>notAntialiasedElement</emphasis> is forcibly drawn not antialiased.</para>
<para>See <ref refid="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24" kindref="member">setNotAntialiasedElements</ref> for details.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1aeef813bcf7efab8e765f9f87ec454691" kindref="member">setAntialiasedElement</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3824" column="8" bodyfile="qcustomplot.cpp" bodystart="13787" bodyend="13797"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ad8858410c2db47b7104040a3aa61c3fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setAutoAddPlottableToLegend</definition>
        <argsstring>(bool on)</argsstring>
        <name>setAutoAddPlottableToLegend</name>
        <qualifiedname>QCustomPlot::setAutoAddPlottableToLegend</qualifiedname>
        <param>
          <type>bool</type>
          <declname>on</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If set to true, adding a plottable (e.g. a graph) to the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> automatically also adds the plottable to the legend (<ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">QCustomPlot::legend</ref>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a2836a46e31d5aee174ae054c0aa6580b" kindref="member">addGraph</ref>, <ref refid="class_q_c_p_legend_1a3ab274de52d2951faea45a6d975e6b3f" kindref="member">QCPLegend::addItem</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3825" column="8" bodyfile="qcustomplot.cpp" bodystart="13805" bodyend="13808"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setInteractions</definition>
        <argsstring>(const QCP::Interactions &amp;interactions)</argsstring>
        <name>setInteractions</name>
        <qualifiedname>QCustomPlot::setInteractions</qualifiedname>
        <param>
          <type>const QCP::Interactions &amp;</type>
          <declname>interactions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the possible interactions of this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> as an or-combination of <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037" kindref="member">QCP::Interaction</ref> enums. There are the following types of interactions:</para>
<para><bold>Axis range manipulation</bold> is controlled via <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a2c4432b9aceafb94000be8d1b589ef18" kindref="member">QCP::iRangeDrag</ref> and <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037abee1e94353525a636aeaf0ba32b72e14" kindref="member">QCP::iRangeZoom</ref>. When the respective interaction is enabled, the user may drag axes ranges and zoom with the mouse wheel. For details how to control which axes the user may drag/zoom and in what orientations, see <ref refid="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418" kindref="member">QCPAxisRect::setRangeDrag</ref>, <ref refid="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31" kindref="member">QCPAxisRect::setRangeZoom</ref>, <ref refid="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" kindref="member">QCPAxisRect::setRangeDragAxes</ref>, <ref refid="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2" kindref="member">QCPAxisRect::setRangeZoomAxes</ref>.</para>
<para><bold>Plottable data selection</bold> is controlled by <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a67148c8227b4155eca49135fc274c7ec" kindref="member">QCP::iSelectPlottables</ref>. If <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a67148c8227b4155eca49135fc274c7ec" kindref="member">QCP::iSelectPlottables</ref> is set, the user may select plottables (graphs, curves, bars,...) and their data by clicking on them or in their vicinity (<ref refid="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93" kindref="member">setSelectionTolerance</ref>). Whether the user can actually select a plottable and its data can further be restricted with the <ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">QCPAbstractPlottable::setSelectable</ref> method on the specific plottable. For details, see the special page about the data selection mechanism. To retrieve a list of all currently selected plottables, call <ref refid="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a" kindref="member">selectedPlottables</ref>. If you&apos;re only interested in QCPGraphs, you may use the convenience function <ref refid="class_q_custom_plot_1ad3547aded026d8a9ae6ef13a69080d06" kindref="member">selectedGraphs</ref>.</para>
<para><bold>Item selection</bold> is controlled by <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037aea2f7c105d674e76d9b187b02ef29260" kindref="member">QCP::iSelectItems</ref>. If <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037aea2f7c105d674e76d9b187b02ef29260" kindref="member">QCP::iSelectItems</ref> is set, the user may select items (<ref refid="class_q_c_p_item_line" kindref="compound">QCPItemLine</ref>, <ref refid="class_q_c_p_item_text" kindref="compound">QCPItemText</ref>,...) by clicking on them or in their vicinity. To find out whether a specific item is selected, call QCPAbstractItem::selected(). To retrieve a list of all currently selected items, call <ref refid="class_q_custom_plot_1afda487bcf2d6cf1a57173d82495e29ba" kindref="member">selectedItems</ref>.</para>
<para><bold>Axis selection</bold> is controlled with <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037ad6644ac55bef621645326e9dd7469caa" kindref="member">QCP::iSelectAxes</ref>. If <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037ad6644ac55bef621645326e9dd7469caa" kindref="member">QCP::iSelectAxes</ref> is set, the user may select parts of the axes by clicking on them. What parts exactly (e.g. Axis base line, tick labels, axis label) are selectable can be controlled via <ref refid="class_q_c_p_axis_1a513f9b9e326c505d9bec54880031b085" kindref="member">QCPAxis::setSelectableParts</ref> for each axis. To retrieve a list of all axes that currently contain selected parts, call <ref refid="class_q_custom_plot_1a7e6b07792b1cb2c31681596582d14dbe" kindref="member">selectedAxes</ref>. Which parts of an axis are selected, can be retrieved with QCPAxis::selectedParts().</para>
<para><bold>Legend selection</bold> is controlled with <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a269c9af298e257d1108edec0432b5513" kindref="member">QCP::iSelectLegend</ref>. If this is set, the user may select the legend itself or individual items by clicking on them. What parts exactly are selectable can be controlled via <ref refid="class_q_c_p_legend_1a9ce60aa8bbd89f62ae4fa83ac6c60110" kindref="member">QCPLegend::setSelectableParts</ref>. To find out whether the legend or any of its child items are selected, check the value of QCPLegend::selectedParts. To find out which child items are selected, call <ref refid="class_q_c_p_legend_1ac7d9e567d5c551e09cd9bcc4306c5532" kindref="member">QCPLegend::selectedItems</ref>.</para>
<para><bold>All other selectable elements</bold> The selection of all other selectable objects (e.g. <ref refid="class_q_c_p_text_element" kindref="compound">QCPTextElement</ref>, or your own layerable subclasses) is controlled with <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037af67a50bc26147a13b551b3a625374949" kindref="member">QCP::iSelectOther</ref>. If set, the user may select those objects by clicking on them. To find out which are currently selected, you need to check their selected state explicitly.</para>
<para>If the selection state has changed by user interaction, the <ref refid="class_q_custom_plot_1a500c64a109bc773c973ad274f2fa4190" kindref="member">selectionChangedByUser</ref> signal is emitted. Each selectable object additionally emits an individual selectionChanged signal whenever their selection state has changed, i.e. not only by user interaction.</para>
<para>To allow multiple objects to be selected by holding the selection modifier (<ref refid="class_q_custom_plot_1a8fc96e3b5138a06759a2a90c166df516" kindref="member">setMultiSelectModifier</ref>), set the flag <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037aef673112c5067c3cf4cfddb62da7265d" kindref="member">QCP::iMultiSelect</ref>.</para>
<para><simplesect kind="note"><para>In addition to the selection mechanism presented here, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> always emits corresponding signals, when an object is clicked or double clicked. see <ref refid="class_q_custom_plot_1af5fe78b8bc9e4e96df921612837fd4fd" kindref="member">plottableClick</ref> and <ref refid="class_q_custom_plot_1a86a3ab7263c9c4e008e70d6c5fce9fbd" kindref="member">plottableDoubleClick</ref> for example.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_q_custom_plot_1a422bf1bc6d56dac75a3d805d9a65902c" kindref="member">setInteraction</ref>, <ref refid="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93" kindref="member">setSelectionTolerance</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3826" column="8" bodyfile="qcustomplot.cpp" bodystart="13864" bodyend="13867"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a422bf1bc6d56dac75a3d805d9a65902c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setInteraction</definition>
        <argsstring>(const QCP::Interaction &amp;interaction, bool enabled=true)</argsstring>
        <name>setInteraction</name>
        <qualifiedname>QCustomPlot::setInteraction</qualifiedname>
        <param>
          <type>const <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037" kindref="member">QCP::Interaction</ref> &amp;</type>
          <declname>interaction</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the single <emphasis>interaction</emphasis> of this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> to <emphasis>enabled</emphasis>.</para>
<para>For details about the interaction system, see <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3827" column="8" bodyfile="qcustomplot.cpp" bodystart="13876" bodyend="13882"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setSelectionTolerance</definition>
        <argsstring>(int pixels)</argsstring>
        <name>setSelectionTolerance</name>
        <qualifiedname>QCustomPlot::setSelectionTolerance</qualifiedname>
        <param>
          <type>int</type>
          <declname>pixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the tolerance that is used to decide whether a click selects an object (e.g. a plottable) or not.</para>
<para>If the user clicks in the vicinity of the line of e.g. a <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref>, it&apos;s only regarded as a potential selection when the minimum distance between the click position and the graph line is smaller than <emphasis>pixels</emphasis>. Objects that are defined by an area (e.g. <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref>) only react to clicks directly inside the area and ignore this selection tolerance. In other words, it only has meaning for parts of objects that are too thin to exactly hit with a click and thus need such a tolerance.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref>, <ref refid="class_q_c_p_layerable_1a272989087fc8c4357b4ba614f9922336" kindref="member">QCPLayerable::selectTest</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3828" column="8" bodyfile="qcustomplot.cpp" bodystart="13897" bodyend="13900"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a775bdcb6329d44701aeaa6135b0e5265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setNoAntialiasingOnDrag</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setNoAntialiasingOnDrag</name>
        <qualifiedname>QCustomPlot::setNoAntialiasingOnDrag</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether antialiasing is disabled for this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> while the user is dragging axes ranges. If many objects, especially plottables, are drawn antialiased, this greatly improves performance during dragging. Thus it creates a more responsive user experience. As soon as the user stops dragging, the last replot is done with normal antialiasing, to restore high image quality.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">setAntialiasedElements</ref>, <ref refid="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24" kindref="member">setNotAntialiasedElements</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3829" column="8" bodyfile="qcustomplot.cpp" bodystart="13911" bodyend="13914"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a94a33cbdadbbac5934843508bcfc210d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setPlottingHints</definition>
        <argsstring>(const QCP::PlottingHints &amp;hints)</argsstring>
        <name>setPlottingHints</name>
        <qualifiedname>QCustomPlot::setPlottingHints</qualifiedname>
        <param>
          <type>const QCP::PlottingHints &amp;</type>
          <declname>hints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the plotting hints for this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance as an <emphasis>or</emphasis> combination of <ref refid="namespace_q_c_p_1a5400e5fcb9528d92002ddb938c1f4ef4" kindref="member">QCP::PlottingHint</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a3b7c97bb6c16464e9e15190c07abe9a9" kindref="member">setPlottingHint</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3830" column="8" bodyfile="qcustomplot.cpp" bodystart="13921" bodyend="13924"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a3b7c97bb6c16464e9e15190c07abe9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setPlottingHint</definition>
        <argsstring>(QCP::PlottingHint hint, bool enabled=true)</argsstring>
        <name>setPlottingHint</name>
        <qualifiedname>QCustomPlot::setPlottingHint</qualifiedname>
        <param>
          <type><ref refid="namespace_q_c_p_1a5400e5fcb9528d92002ddb938c1f4ef4" kindref="member">QCP::PlottingHint</ref></type>
          <declname>hint</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the specified plotting <emphasis>hint</emphasis> to <emphasis>enabled</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a94a33cbdadbbac5934843508bcfc210d" kindref="member">setPlottingHints</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3831" column="8" bodyfile="qcustomplot.cpp" bodystart="13931" bodyend="13941"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a8fc96e3b5138a06759a2a90c166df516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setMultiSelectModifier</definition>
        <argsstring>(Qt::KeyboardModifier modifier)</argsstring>
        <name>setMultiSelectModifier</name>
        <qualifiedname>QCustomPlot::setMultiSelectModifier</qualifiedname>
        <param>
          <type>Qt::KeyboardModifier</type>
          <declname>modifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the keyboard modifier that will be recognized as multi-select-modifier.</para>
<para>If <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037aef673112c5067c3cf4cfddb62da7265d" kindref="member">QCP::iMultiSelect</ref> is specified in <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref>, the user may select multiple objects (or data points) by clicking on them one after the other while holding down <emphasis>modifier</emphasis>.</para>
<para>By default the multi-select-modifier is set to Qt::ControlModifier.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3832" column="8" bodyfile="qcustomplot.cpp" bodystart="13953" bodyend="13956"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setSelectionRectMode</definition>
        <argsstring>(QCP::SelectionRectMode mode)</argsstring>
        <name>setSelectionRectMode</name>
        <qualifiedname>QCustomPlot::setSelectionRectMode</qualifiedname>
        <param>
          <type><ref refid="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacf" kindref="member">QCP::SelectionRectMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets how <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> processes mouse click-and-drag interactions by the user.</para>
<para>If <emphasis>mode</emphasis> is <ref refid="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacfa9032f170490d67240a6c68c2638ffab1" kindref="member">QCP::srmNone</ref>, the mouse drag is forwarded to the underlying objects. For example, <ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> may process a mouse drag by dragging axis ranges, see <ref refid="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418" kindref="member">QCPAxisRect::setRangeDrag</ref>. If <emphasis>mode</emphasis> is not <ref refid="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacfa9032f170490d67240a6c68c2638ffab1" kindref="member">QCP::srmNone</ref>, the current selection rect (<ref refid="class_q_custom_plot_1ad7df2bcbba307e644db383b449e31efd" kindref="member">selectionRect</ref>) becomes activated and allows e.g. rect zooming and data point selection.</para>
<para>If you wish to provide your user both with axis range dragging and data selection/range zooming, use this method to switch between the modes just before the interaction is processed, e.g. in reaction to the <ref refid="class_q_custom_plot_1aca75bf9afb5dd19349c375de2a87a051" kindref="member">mousePress</ref> or <ref refid="class_q_custom_plot_1a742ca4f94688bed2a685fd8a56ce5704" kindref="member">mouseMove</ref> signals. For example you could check whether the user is holding a certain keyboard modifier, and then decide which <emphasis>mode</emphasis> shall be set.</para>
<para>If a selection rect interaction is currently active, and <emphasis>mode</emphasis> is set to <ref refid="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacfa9032f170490d67240a6c68c2638ffab1" kindref="member">QCP::srmNone</ref>, the interaction is canceled (<ref refid="class_q_c_p_selection_rect_1af67bc58f4f5ce9a4dc420b9c42de235a" kindref="member">QCPSelectionRect::cancel</ref>). Switching between any of the other modes will keep the selection rect active. Upon completion of the interaction, the behaviour is as defined by the currently set <emphasis>mode</emphasis>, not the mode that was set when the interaction started.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref>, <ref refid="class_q_custom_plot_1a0c09f96df15faa4799ad7051bb16cf33" kindref="member">setSelectionRect</ref>, <ref refid="class_q_c_p_selection_rect" kindref="compound">QCPSelectionRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3833" column="8" bodyfile="qcustomplot.cpp" bodystart="13978" bodyend="13999"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a0c09f96df15faa4799ad7051bb16cf33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setSelectionRect</definition>
        <argsstring>(QCPSelectionRect *selectionRect)</argsstring>
        <name>setSelectionRect</name>
        <qualifiedname>QCustomPlot::setSelectionRect</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_selection_rect" kindref="compound">QCPSelectionRect</ref> *</type>
          <declname>selectionRect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="class_q_c_p_selection_rect" kindref="compound">QCPSelectionRect</ref> instance that <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> will use if <emphasis>mode</emphasis> is not <ref refid="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacfa9032f170490d67240a6c68c2638ffab1" kindref="member">QCP::srmNone</ref> and the user performs a click-and-drag interaction. <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> takes ownership of the passed <emphasis>selectionRect</emphasis>. It can be accessed later via <ref refid="class_q_custom_plot_1ad7df2bcbba307e644db383b449e31efd" kindref="member">selectionRect</ref>.</para>
<para>This method is useful if you wish to replace the default <ref refid="class_q_c_p_selection_rect" kindref="compound">QCPSelectionRect</ref> instance with an instance of a <ref refid="class_q_c_p_selection_rect" kindref="compound">QCPSelectionRect</ref> subclass, to introduce custom behaviour of the selection rect.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb" kindref="member">setSelectionRectMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3834" column="8" bodyfile="qcustomplot.cpp" bodystart="14011" bodyend="14025"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a7db1adc09016329f3aef7c60da935789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setOpenGl</definition>
        <argsstring>(bool enabled, int multisampling=16)</argsstring>
        <name>setOpenGl</name>
        <qualifiedname>QCustomPlot::setOpenGl</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <param>
          <type>int</type>
          <declname>multisampling</declname>
          <defval>16</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This is still an experimental feature and its performance depends on the system that it runs on. Having multiple <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widgets in one application with enabled OpenGL rendering might cause context conflicts on some systems.</para>
</simplesect>
This method allows to enable OpenGL plot rendering, for increased plotting performance of graphically demanding plots (thick lines, translucent fills, etc.).</para>
<para>If <emphasis>enabled</emphasis> is set to true, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> will try to initialize OpenGL and, if successful, continue plotting with hardware acceleration. The parameter <emphasis>multisampling</emphasis> controls how many samples will be used per pixel, it essentially controls the antialiasing quality. If <emphasis>multisampling</emphasis> is set too high for the current graphics hardware, the maximum allowed value will be used.</para>
<para>You can test whether switching to OpenGL rendering was successful by checking whether the according getter <emphasis>QCustomPlot::openGl()</emphasis> returns true. If the OpenGL initialization fails, rendering continues with the regular software rasterizer, and an according qDebug output is generated.</para>
<para>If switching to OpenGL was successful, this method disables label caching (<ref refid="class_q_custom_plot_1a3b7c97bb6c16464e9e15190c07abe9a9" kindref="member">setPlottingHint(QCP::phCacheLabels, false)</ref>) and turns on <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>&apos;s antialiasing override for all elements (<ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">setAntialiasedElements(QCP::aeAll)</ref>), leading to a higher quality output. The antialiasing override allows for pixel-grid aligned drawing in the OpenGL paint device. As stated before, in OpenGL rendering the actual antialiasing of the plot is controlled with <emphasis>multisampling</emphasis>. If <emphasis>enabled</emphasis> is set to false, the antialiasing/label caching settings are restored to what they were before OpenGL was enabled, if they weren&apos;t altered in the meantime.</para>
<para><simplesect kind="note"><para>OpenGL support is only enabled if <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> is compiled with the macro <computeroutput>QCUSTOMPLOT_USE_OPENGL</computeroutput> defined. This define must be set before including the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> header both during compilation of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> library as well as when compiling your application. It is best to just include the line <computeroutput>DEFINES += QCUSTOMPLOT_USE_OPENGL</computeroutput> in the respective qmake project files. </para>
</simplesect>
<simplesect kind="note"><para>If you are using a Qt version before 5.0, you must also add the module &quot;opengl&quot; to your <computeroutput>QT</computeroutput> variable in the qmake project files. For Qt versions 5.0 and higher, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> switches to a newer OpenGL interface which is already in the &quot;gui&quot; module. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3835" column="8" bodyfile="qcustomplot.cpp" bodystart="14063" bodyend="14099"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a32de81ff53e263e785b83b52ecd99d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> *</type>
        <definition>QCPAbstractPlottable * QCustomPlot::plottable</definition>
        <argsstring>(int index)</argsstring>
        <name>plottable</name>
        <qualifiedname>QCustomPlot::plottable</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the plottable with <emphasis>index</emphasis>. If the index is invalid, returns <computeroutput>nullptr</computeroutput>.</para>
<para>There is an overloaded version of this function with no parameter which returns the last added plottable, see <ref refid="class_q_custom_plot_1adea38bdc660da9412ba69fb939031567" kindref="member">QCustomPlot::plottable()</ref></para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5f4f15991c14bf9ad659bb2a19dfbed4" kindref="member">plottableCount</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3839" column="24" bodyfile="qcustomplot.cpp" bodystart="14239" bodyend="14249"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1adea38bdc660da9412ba69fb939031567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> *</type>
        <definition>QCPAbstractPlottable * QCustomPlot::plottable</definition>
        <argsstring>()</argsstring>
        <name>plottable</name>
        <qualifiedname>QCustomPlot::plottable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Returns the last plottable that was added to the plot. If there are no plottables in the plot, returns <computeroutput>nullptr</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5f4f15991c14bf9ad659bb2a19dfbed4" kindref="member">plottableCount</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3840" column="24" bodyfile="qcustomplot.cpp" bodystart="14258" bodyend="14265"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::removePlottable</definition>
        <argsstring>(QCPAbstractPlottable *plottable)</argsstring>
        <name>removePlottable</name>
        <qualifiedname>QCustomPlot::removePlottable</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> *</type>
          <declname>plottable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the specified plottable from the plot and deletes it. If necessary, the corresponding legend item is also removed from the default legend (<ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">QCustomPlot::legend</ref>).</para>
<para>Returns true on success.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a9a409bb3201878adb7ffba1c89c4e004" kindref="member">clearPlottables</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3841" column="8" bodyfile="qcustomplot.cpp" bodystart="14275" bodyend="14292"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1afc210e0021480f8119bccf37839dbcc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::removePlottable</definition>
        <argsstring>(int index)</argsstring>
        <name>removePlottable</name>
        <qualifiedname>QCustomPlot::removePlottable</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Removes and deletes the plottable by its <emphasis>index</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3842" column="8" bodyfile="qcustomplot.cpp" bodystart="14298" bodyend="14307"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a9a409bb3201878adb7ffba1c89c4e004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCustomPlot::clearPlottables</definition>
        <argsstring>()</argsstring>
        <name>clearPlottables</name>
        <qualifiedname>QCustomPlot::clearPlottables</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all plottables from the plot and deletes them. Corresponding legend items are also removed from the default legend (<ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">QCustomPlot::legend</ref>).</para>
<para>Returns the number of plottables removed.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2" kindref="member">removePlottable</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3843" column="7" bodyfile="qcustomplot.cpp" bodystart="14317" bodyend="14323"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a5f4f15991c14bf9ad659bb2a19dfbed4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCustomPlot::plottableCount</definition>
        <argsstring>() const</argsstring>
        <name>plottableCount</name>
        <qualifiedname>QCustomPlot::plottableCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of currently existing plottables in the plot</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a32de81ff53e263e785b83b52ecd99d6f" kindref="member">plottable</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3844" column="7" bodyfile="qcustomplot.cpp" bodystart="14330" bodyend="14333"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> * &gt;</type>
        <definition>QList&lt; QCPAbstractPlottable * &gt; QCustomPlot::selectedPlottables</definition>
        <argsstring>() const</argsstring>
        <name>selectedPlottables</name>
        <qualifiedname>QCustomPlot::selectedPlottables</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of the selected plottables. If no plottables are currently selected, the list is empty.</para>
<para>There is a convenience function if you&apos;re only interested in selected graphs, see <ref refid="class_q_custom_plot_1ad3547aded026d8a9ae6ef13a69080d06" kindref="member">selectedGraphs</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref>, <ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">QCPAbstractPlottable::setSelectable</ref>, <ref refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" kindref="member">QCPAbstractPlottable::setSelection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3845" column="9" bodyfile="qcustomplot.cpp" bodystart="14342" bodyend="14351"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a545c0e63e13a4fbac3d5acbd8a03ef6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PlottableType</type>
          </param>
        </templateparamlist>
        <type>PlottableType *</type>
        <definition>PlottableType * QCustomPlot::plottableAt</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable=false, int *dataIndex=nullptr) const</argsstring>
        <name>plottableAt</name>
        <qualifiedname>QCustomPlot::plottableAt</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int *</type>
          <declname>dataIndex</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the plottable at the pixel position <emphasis>pos</emphasis>. The plottable type (a <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> subclass) that shall be taken into consideration can be specified via the template parameter.</para>
<para>Plottables that only consist of single lines (like graphs) have a tolerance band around them, see <ref refid="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93" kindref="member">setSelectionTolerance</ref>. If multiple plottables come into consideration, the one closest to <emphasis>pos</emphasis> is returned.</para>
<para>If <emphasis>onlySelectable</emphasis> is true, only plottables that are selectable (<ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">QCPAbstractPlottable::setSelectable</ref>) are considered.</para>
<para>if <emphasis>dataIndex</emphasis> is non-null, it is set to the index of the plottable&apos;s data point that is closest to <emphasis>pos</emphasis>.</para>
<para>If there is no plottable of the specified type at <emphasis>pos</emphasis>, returns <computeroutput>nullptr</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a89f7565773c5d59347a7f2262a737844" kindref="member">itemAt</ref>, <ref refid="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c" kindref="member">layoutElementAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3847" column="17" bodyfile="qcustomplot.h" bodystart="4044" bodyend="4075"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a37f1ef93533c5b91054dc23998c669e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> *</type>
        <definition>QCPAbstractPlottable * QCustomPlot::plottableAt</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable=false, int *dataIndex=nullptr) const</argsstring>
        <name>plottableAt</name>
        <qualifiedname>QCustomPlot::plottableAt</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int *</type>
          <declname>dataIndex</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns any plottable at the pixel position <emphasis>pos</emphasis>. Since it can capture all plottables, the return type is the abstract base class of all plottables, <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref>.</para>
<para>For details, and if you wish to specify a certain plottable type (e.g. <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref>), see the template method <ref refid="class_q_custom_plot_1a545c0e63e13a4fbac3d5acbd8a03ef6f" kindref="member">plottableAt&lt;PlottableType&gt;()</ref></para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a545c0e63e13a4fbac3d5acbd8a03ef6f" kindref="member">plottableAt&lt;PlottableType&gt;()</ref>, <ref refid="class_q_custom_plot_1a89f7565773c5d59347a7f2262a737844" kindref="member">itemAt</ref>, <ref refid="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c" kindref="member">layoutElementAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3848" column="24" bodyfile="qcustomplot.cpp" bodystart="14362" bodyend="14365"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a72cefbfbb9e699940e37be605bd9c51e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::hasPlottable</definition>
        <argsstring>(QCPAbstractPlottable *plottable) const</argsstring>
        <name>hasPlottable</name>
        <qualifiedname>QCustomPlot::hasPlottable</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> *</type>
          <declname>plottable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance contains the <emphasis>plottable</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3849" column="8" bodyfile="qcustomplot.cpp" bodystart="14370" bodyend="14373"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a6ecae130f684b25276fb47bd3a5875c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> *</type>
        <definition>QCPGraph * QCustomPlot::graph</definition>
        <argsstring>(int index) const</argsstring>
        <name>graph</name>
        <qualifiedname>QCustomPlot::graph</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the graph with <emphasis>index</emphasis>. If the index is invalid, returns <computeroutput>nullptr</computeroutput>.</para>
<para>There is an overloaded version of this function with no parameter which returns the last created graph, see <ref refid="class_q_custom_plot_1a6ecae130f684b25276fb47bd3a5875c6" kindref="member">QCustomPlot::graph()</ref></para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5e1787cdde868c4d3790f9ebc8207d90" kindref="member">graphCount</ref>, <ref refid="class_q_custom_plot_1a2836a46e31d5aee174ae054c0aa6580b" kindref="member">addGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3852" column="12" bodyfile="qcustomplot.cpp" bodystart="14383" bodyend="14393"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1aac190865a67f19af3fdf2136774997af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> *</type>
        <definition>QCPGraph * QCustomPlot::graph</definition>
        <argsstring>() const</argsstring>
        <name>graph</name>
        <qualifiedname>QCustomPlot::graph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Returns the last graph, that was created with <ref refid="class_q_custom_plot_1a2836a46e31d5aee174ae054c0aa6580b" kindref="member">addGraph</ref>. If there are no graphs in the plot, returns <computeroutput>nullptr</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5e1787cdde868c4d3790f9ebc8207d90" kindref="member">graphCount</ref>, <ref refid="class_q_custom_plot_1a2836a46e31d5aee174ae054c0aa6580b" kindref="member">addGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3853" column="12" bodyfile="qcustomplot.cpp" bodystart="14402" bodyend="14409"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a2836a46e31d5aee174ae054c0aa6580b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> *</type>
        <definition>QCPGraph * QCustomPlot::addGraph</definition>
        <argsstring>(QCPAxis *keyAxis=nullptr, QCPAxis *valueAxis=nullptr)</argsstring>
        <name>addGraph</name>
        <qualifiedname>QCustomPlot::addGraph</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>keyAxis</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>valueAxis</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new graph inside the plot. If <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> are left unspecified (0), the bottom (xAxis) is used as key and the left (yAxis) is used as value axis. If specified, <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> must reside in this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>.</para>
<para><emphasis>keyAxis</emphasis> will be used as key axis (typically &quot;x&quot;) and <emphasis>valueAxis</emphasis> as value axis (typically &quot;y&quot;) for the graph.</para>
<para>Returns a pointer to the newly created graph, or <computeroutput>nullptr</computeroutput> if adding the graph failed.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a6ecae130f684b25276fb47bd3a5875c6" kindref="member">graph</ref>, <ref refid="class_q_custom_plot_1a5e1787cdde868c4d3790f9ebc8207d90" kindref="member">graphCount</ref>, <ref refid="class_q_custom_plot_1a903561be895fb6528a770d66ac5e6713" kindref="member">removeGraph</ref>, <ref refid="class_q_custom_plot_1ab0f3abff2d2f7df3668b5836f39207fa" kindref="member">clearGraphs</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3854" column="12" bodyfile="qcustomplot.cpp" bodystart="14423" bodyend="14441"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a903561be895fb6528a770d66ac5e6713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::removeGraph</definition>
        <argsstring>(QCPGraph *graph)</argsstring>
        <name>removeGraph</name>
        <qualifiedname>QCustomPlot::removeGraph</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> *</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the specified <emphasis>graph</emphasis> from the plot and deletes it. If necessary, the corresponding legend item is also removed from the default legend (<ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">QCustomPlot::legend</ref>). If any other graphs in the plot have a channel fill set towards the removed graph, the channel fill property of those graphs is reset to <computeroutput>nullptr</computeroutput> (no channel fill).</para>
<para>Returns true on success.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1ab0f3abff2d2f7df3668b5836f39207fa" kindref="member">clearGraphs</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3855" column="8" bodyfile="qcustomplot.cpp" bodystart="14453" bodyend="14456"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a9554b3d2d5b10c0f884bd4010b6c192c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::removeGraph</definition>
        <argsstring>(int index)</argsstring>
        <name>removeGraph</name>
        <qualifiedname>QCustomPlot::removeGraph</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Removes and deletes the graph by its <emphasis>index</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3856" column="8" bodyfile="qcustomplot.cpp" bodystart="14462" bodyend="14468"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ab0f3abff2d2f7df3668b5836f39207fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCustomPlot::clearGraphs</definition>
        <argsstring>()</argsstring>
        <name>clearGraphs</name>
        <qualifiedname>QCustomPlot::clearGraphs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all graphs from the plot and deletes them. Corresponding legend items are also removed from the default legend (<ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">QCustomPlot::legend</ref>).</para>
<para>Returns the number of graphs removed.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a903561be895fb6528a770d66ac5e6713" kindref="member">removeGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3857" column="7" bodyfile="qcustomplot.cpp" bodystart="14478" bodyend="14484"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a5e1787cdde868c4d3790f9ebc8207d90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCustomPlot::graphCount</definition>
        <argsstring>() const</argsstring>
        <name>graphCount</name>
        <qualifiedname>QCustomPlot::graphCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of currently existing graphs in the plot</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a6ecae130f684b25276fb47bd3a5875c6" kindref="member">graph</ref>, <ref refid="class_q_custom_plot_1a2836a46e31d5aee174ae054c0aa6580b" kindref="member">addGraph</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3858" column="7" bodyfile="qcustomplot.cpp" bodystart="14491" bodyend="14494"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ad3547aded026d8a9ae6ef13a69080d06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> * &gt;</type>
        <definition>QList&lt; QCPGraph * &gt; QCustomPlot::selectedGraphs</definition>
        <argsstring>() const</argsstring>
        <name>selectedGraphs</name>
        <qualifiedname>QCustomPlot::selectedGraphs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of the selected graphs. If no graphs are currently selected, the list is empty.</para>
<para>If you are not only interested in selected graphs but other plottables like <ref refid="class_q_c_p_curve" kindref="compound">QCPCurve</ref>, <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref>, etc., use <ref refid="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a" kindref="member">selectedPlottables</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref>, <ref refid="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a" kindref="member">selectedPlottables</ref>, <ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">QCPAbstractPlottable::setSelectable</ref>, <ref refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" kindref="member">QCPAbstractPlottable::setSelection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3859" column="9" bodyfile="qcustomplot.cpp" bodystart="14504" bodyend="14513"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ac042f2e78edd228ccf2f26b7fe215239" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> *</type>
        <definition>QCPAbstractItem * QCustomPlot::item</definition>
        <argsstring>(int index) const</argsstring>
        <name>item</name>
        <qualifiedname>QCustomPlot::item</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the item with <emphasis>index</emphasis>. If the index is invalid, returns <computeroutput>nullptr</computeroutput>.</para>
<para>There is an overloaded version of this function with no parameter which returns the last added item, see <ref refid="class_q_custom_plot_1ac042f2e78edd228ccf2f26b7fe215239" kindref="member">QCustomPlot::item()</ref></para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a16025daf0341f9362be3080e404424c2" kindref="member">itemCount</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3862" column="19" bodyfile="qcustomplot.cpp" bodystart="14523" bodyend="14533"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a12eb2a283cf10a8a9176c01c0443e83e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> *</type>
        <definition>QCPAbstractItem * QCustomPlot::item</definition>
        <argsstring>() const</argsstring>
        <name>item</name>
        <qualifiedname>QCustomPlot::item</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Returns the last item that was added to this plot. If there are no items in the plot, returns <computeroutput>nullptr</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a16025daf0341f9362be3080e404424c2" kindref="member">itemCount</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3863" column="19" bodyfile="qcustomplot.cpp" bodystart="14542" bodyend="14549"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ae04446557292551e8fb6e2c106e1848d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::removeItem</definition>
        <argsstring>(QCPAbstractItem *item)</argsstring>
        <name>removeItem</name>
        <qualifiedname>QCustomPlot::removeItem</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the specified item from the plot and deletes it.</para>
<para>Returns true on success.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1abdfd07d4f0591d0cf967f85013fd3645" kindref="member">clearItems</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3864" column="8" bodyfile="qcustomplot.cpp" bodystart="14558" bodyend="14570"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1abcfdda3d601c0441cab136137d715dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::removeItem</definition>
        <argsstring>(int index)</argsstring>
        <name>removeItem</name>
        <qualifiedname>QCustomPlot::removeItem</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Removes and deletes the item by its <emphasis>index</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3865" column="8" bodyfile="qcustomplot.cpp" bodystart="14576" bodyend="14585"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1abdfd07d4f0591d0cf967f85013fd3645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCustomPlot::clearItems</definition>
        <argsstring>()</argsstring>
        <name>clearItems</name>
        <qualifiedname>QCustomPlot::clearItems</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all items from the plot and deletes them.</para>
<para>Returns the number of items removed.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1ae04446557292551e8fb6e2c106e1848d" kindref="member">removeItem</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3866" column="7" bodyfile="qcustomplot.cpp" bodystart="14594" bodyend="14600"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a16025daf0341f9362be3080e404424c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCustomPlot::itemCount</definition>
        <argsstring>() const</argsstring>
        <name>itemCount</name>
        <qualifiedname>QCustomPlot::itemCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of currently existing items in the plot</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1ac042f2e78edd228ccf2f26b7fe215239" kindref="member">item</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3867" column="7" bodyfile="qcustomplot.cpp" bodystart="14607" bodyend="14610"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1afda487bcf2d6cf1a57173d82495e29ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> * &gt;</type>
        <definition>QList&lt; QCPAbstractItem * &gt; QCustomPlot::selectedItems</definition>
        <argsstring>() const</argsstring>
        <name>selectedItems</name>
        <qualifiedname>QCustomPlot::selectedItems</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of the selected items. If no items are currently selected, the list is empty.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref>, <ref refid="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2" kindref="member">QCPAbstractItem::setSelectable</ref>, <ref refid="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378" kindref="member">QCPAbstractItem::setSelected</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3868" column="9" bodyfile="qcustomplot.cpp" bodystart="14617" bodyend="14626"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a89f7565773c5d59347a7f2262a737844" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ItemType</type>
          </param>
        </templateparamlist>
        <type>ItemType *</type>
        <definition>ItemType * QCustomPlot::itemAt</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable=false) const</argsstring>
        <name>itemAt</name>
        <qualifiedname>QCustomPlot::itemAt</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the item at the pixel position <emphasis>pos</emphasis>. The item type (a <ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> subclass) that shall be taken into consideration can be specified via the template parameter. Items that only consist of single lines (e.g. <ref refid="class_q_c_p_item_line" kindref="compound">QCPItemLine</ref> or <ref refid="class_q_c_p_item_curve" kindref="compound">QCPItemCurve</ref>) have a tolerance band around them, see <ref refid="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93" kindref="member">setSelectionTolerance</ref>. If multiple items come into consideration, the one closest to <emphasis>pos</emphasis> is returned.</para>
<para>If <emphasis>onlySelectable</emphasis> is true, only items that are selectable (<ref refid="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2" kindref="member">QCPAbstractItem::setSelectable</ref>) are considered.</para>
<para>If there is no item at <emphasis>pos</emphasis>, returns <computeroutput>nullptr</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a545c0e63e13a4fbac3d5acbd8a03ef6f" kindref="member">plottableAt</ref>, <ref refid="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c" kindref="member">layoutElementAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3870" column="12" bodyfile="qcustomplot.h" bodystart="4091" bodyend="4113"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ac08578e0e6c059c83a8d340ba0038e8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> *</type>
        <definition>QCPAbstractItem * QCustomPlot::itemAt</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable=false) const</argsstring>
        <name>itemAt</name>
        <qualifiedname>QCustomPlot::itemAt</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the item at the pixel position <emphasis>pos</emphasis>. Since it can capture all items, the return type is the abstract base class of all items, <ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref>.</para>
<para>For details, and if you wish to specify a certain item type (e.g. <ref refid="class_q_c_p_item_line" kindref="compound">QCPItemLine</ref>), see the template method <ref refid="class_q_custom_plot_1a89f7565773c5d59347a7f2262a737844" kindref="member">itemAt&lt;ItemType&gt;()</ref></para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a89f7565773c5d59347a7f2262a737844" kindref="member">itemAt&lt;ItemType&gt;()</ref>, <ref refid="class_q_custom_plot_1a545c0e63e13a4fbac3d5acbd8a03ef6f" kindref="member">plottableAt</ref>, <ref refid="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c" kindref="member">layoutElementAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3871" column="19" bodyfile="qcustomplot.cpp" bodystart="14637" bodyend="14640"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1af0b57f35646079f93fa6161a65b36109" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::hasItem</definition>
        <argsstring>(QCPAbstractItem *item) const</argsstring>
        <name>hasItem</name>
        <qualifiedname>QCustomPlot::hasItem</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> contains the <emphasis>item</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1ac042f2e78edd228ccf2f26b7fe215239" kindref="member">item</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3872" column="8" bodyfile="qcustomplot.cpp" bodystart="14647" bodyend="14650"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> *</type>
        <definition>QCPLayer * QCustomPlot::layer</definition>
        <argsstring>(const QString &amp;name) const</argsstring>
        <name>layer</name>
        <qualifiedname>QCustomPlot::layer</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the layer with the specified <emphasis>name</emphasis>. If there is no layer with the specified name, <computeroutput>nullptr</computeroutput> is returned.</para>
<para>Layer names are case-sensitive.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">addLayer</ref>, <ref refid="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" kindref="member">moveLayer</ref>, <ref refid="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94" kindref="member">removeLayer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3875" column="12" bodyfile="qcustomplot.cpp" bodystart="14660" bodyend="14668"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1acbb570f4c24306e7c2324d40bfe157c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> *</type>
        <definition>QCPLayer * QCustomPlot::layer</definition>
        <argsstring>(int index) const</argsstring>
        <name>layer</name>
        <qualifiedname>QCustomPlot::layer</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Returns the layer by <emphasis>index</emphasis>. If the index is invalid, <computeroutput>nullptr</computeroutput> is returned.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">addLayer</ref>, <ref refid="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" kindref="member">moveLayer</ref>, <ref refid="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94" kindref="member">removeLayer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3876" column="12" bodyfile="qcustomplot.cpp" bodystart="14676" bodyend="14686"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a0421d647f420b0b4c57aec1708857af5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> *</type>
        <definition>QCPLayer * QCustomPlot::currentLayer</definition>
        <argsstring>() const</argsstring>
        <name>currentLayer</name>
        <qualifiedname>QCustomPlot::currentLayer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the layer that is set as current layer (see <ref refid="class_q_custom_plot_1a73a6dc47c653bb6f8f030abca5a11852" kindref="member">setCurrentLayer</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3877" column="12" bodyfile="qcustomplot.cpp" bodystart="14691" bodyend="14694"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a73a6dc47c653bb6f8f030abca5a11852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::setCurrentLayer</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>setCurrentLayer</name>
        <qualifiedname>QCustomPlot::setCurrentLayer</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the layer with the specified <emphasis>name</emphasis> to be the current layer. All layerables (<ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref>), e.g. plottables and items, are created on the current layer.</para>
<para>Returns true on success, i.e. if there is a layer with the specified <emphasis>name</emphasis> in the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>.</para>
<para>Layer names are case-sensitive.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">addLayer</ref>, <ref refid="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" kindref="member">moveLayer</ref>, <ref refid="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94" kindref="member">removeLayer</ref>, <ref refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" kindref="member">QCPLayerable::setLayer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3878" column="8" bodyfile="qcustomplot.cpp" bodystart="14706" bodyend="14716"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a23a4d3cadad1a0063c5fe19aac5659e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::setCurrentLayer</definition>
        <argsstring>(QCPLayer *layer)</argsstring>
        <name>setCurrentLayer</name>
        <qualifiedname>QCustomPlot::setCurrentLayer</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Sets the provided <emphasis>layer</emphasis> to be the current layer.</para>
<para>Returns true on success, i.e. when <emphasis>layer</emphasis> is a valid layer in the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">addLayer</ref>, <ref refid="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" kindref="member">moveLayer</ref>, <ref refid="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94" kindref="member">removeLayer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3879" column="8" bodyfile="qcustomplot.cpp" bodystart="14726" bodyend="14736"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1afa45d61e65292026f4c58c9c88c2cef0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCustomPlot::layerCount</definition>
        <argsstring>() const</argsstring>
        <name>layerCount</name>
        <qualifiedname>QCustomPlot::layerCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of currently existing layers in the plot</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159" kindref="member">layer</ref>, <ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">addLayer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3880" column="7" bodyfile="qcustomplot.cpp" bodystart="14743" bodyend="14746"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::addLayer</definition>
        <argsstring>(const QString &amp;name, QCPLayer *otherLayer=nullptr, LayerInsertMode insertMode=limAbove)</argsstring>
        <name>addLayer</name>
        <qualifiedname>QCustomPlot::addLayer</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> *</type>
          <declname>otherLayer</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7" kindref="member">LayerInsertMode</ref></type>
          <declname>insertMode</declname>
          <defval><ref refid="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7a062b0b7825650b432a713c0df6742d41" kindref="member">limAbove</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a new layer to this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance. The new layer will have the name <emphasis>name</emphasis>, which must be unique. Depending on <emphasis>insertMode</emphasis>, it is positioned either below or above <emphasis>otherLayer</emphasis>.</para>
<para>Returns true on success, i.e. if there is no other layer named <emphasis>name</emphasis> and <emphasis>otherLayer</emphasis> is a valid layer inside this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>.</para>
<para>If <emphasis>otherLayer</emphasis> is 0, the highest layer in the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> will be used.</para>
<para>For an explanation of what layers are in <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>, see the documentation of <ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159" kindref="member">layer</ref>, <ref refid="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" kindref="member">moveLayer</ref>, <ref refid="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94" kindref="member">removeLayer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3881" column="8" bodyfile="qcustomplot.cpp" bodystart="14761" bodyend="14781"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::removeLayer</definition>
        <argsstring>(QCPLayer *layer)</argsstring>
        <name>removeLayer</name>
        <qualifiedname>QCustomPlot::removeLayer</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the specified <emphasis>layer</emphasis> and returns true on success.</para>
<para>All layerables (e.g. plottables and items) on the removed layer will be moved to the layer below <emphasis>layer</emphasis>. If <emphasis>layer</emphasis> is the bottom layer, the layerables are moved to the layer above. In both cases, the total rendering order of all layerables in the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> is preserved.</para>
<para>If <emphasis>layer</emphasis> is the current layer (<ref refid="class_q_custom_plot_1a73a6dc47c653bb6f8f030abca5a11852" kindref="member">setCurrentLayer</ref>), the layer below (or above, if bottom layer) becomes the new current layer.</para>
<para>It is not possible to remove the last layer of the plot.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159" kindref="member">layer</ref>, <ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">addLayer</ref>, <ref refid="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" kindref="member">moveLayer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3882" column="8" bodyfile="qcustomplot.cpp" bodystart="14797" bodyend="14833"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::moveLayer</definition>
        <argsstring>(QCPLayer *layer, QCPLayer *otherLayer, LayerInsertMode insertMode=limAbove)</argsstring>
        <name>moveLayer</name>
        <qualifiedname>QCustomPlot::moveLayer</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> *</type>
          <declname>layer</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> *</type>
          <declname>otherLayer</declname>
        </param>
        <param>
          <type><ref refid="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7" kindref="member">LayerInsertMode</ref></type>
          <declname>insertMode</declname>
          <defval><ref refid="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7a062b0b7825650b432a713c0df6742d41" kindref="member">limAbove</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves the specified <emphasis>layer</emphasis> either above or below <emphasis>otherLayer</emphasis>. Whether it&apos;s placed above or below is controlled with <emphasis>insertMode</emphasis>.</para>
<para>Returns true on success, i.e. when both <emphasis>layer</emphasis> and <emphasis>otherLayer</emphasis> are valid layers in the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159" kindref="member">layer</ref>, <ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">addLayer</ref>, <ref refid="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" kindref="member">moveLayer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3883" column="8" bodyfile="qcustomplot.cpp" bodystart="14844" bodyend="14870"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a8f85940aaac50efb466287d9d2d04ec6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCustomPlot::axisRectCount</definition>
        <argsstring>() const</argsstring>
        <name>axisRectCount</name>
        <qualifiedname>QCustomPlot::axisRectCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of axis rects in the plot.</para>
<para>All axis rects can be accessed via <ref refid="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9" kindref="member">QCustomPlot::axisRect()</ref>.</para>
<para>Initially, only one axis rect exists in the plot.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9" kindref="member">axisRect</ref>, <ref refid="class_q_custom_plot_1a12af771429e2d7e313c8c5d5fca068fe" kindref="member">axisRects</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3886" column="7" bodyfile="qcustomplot.cpp" bodystart="14881" bodyend="14884"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> *</type>
        <definition>QCPAxisRect * QCustomPlot::axisRect</definition>
        <argsstring>(int index=0) const</argsstring>
        <name>axisRect</name>
        <qualifiedname>QCustomPlot::axisRect</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the axis rect with <emphasis>index</emphasis>.</para>
<para>Initially, only one axis rect (with index 0) exists in the plot. If multiple axis rects were added, all of them may be accessed with this function in a linear fashion (even when they are nested in a layout hierarchy or inside other axis rects via <ref refid="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10" kindref="member">QCPAxisRect::insetLayout</ref>).</para>
<para>The order of the axis rects is given by the fill order of the <ref refid="class_q_c_p_layout" kindref="compound">QCPLayout</ref> that is holding them. For example, if the axis rects are in the top level grid layout (accessible via <ref refid="class_q_custom_plot_1af1a1f1f571237deb7c2bd34a5e9f018f" kindref="member">QCustomPlot::plotLayout</ref>), they are ordered from left to right, top to bottom, if the layout&apos;s default <ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref> of <ref refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353ccaac4cb4b796ec4822d5894b47b51627fb3" kindref="member">foColumnsFirst</ref> wasn&apos;t changed.</para>
<para>If you want to access axis rects by their row and column index, use the layout interface. For example, use <ref refid="class_q_c_p_layout_grid_1a602b426609b4411cf6a93c3ddf3a381a" kindref="member">QCPLayoutGrid::element</ref> of the top level grid layout, and <computeroutput>qobject_cast</computeroutput> the returned layout element to <ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref>. (See also thelayoutsystem.)</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a8f85940aaac50efb466287d9d2d04ec6" kindref="member">axisRectCount</ref>, <ref refid="class_q_custom_plot_1a12af771429e2d7e313c8c5d5fca068fe" kindref="member">axisRects</ref>, <ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">QCPLayoutGrid::setFillOrder</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3887" column="15" bodyfile="qcustomplot.cpp" bodystart="14905" bodyend="14916"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a12af771429e2d7e313c8c5d5fca068fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> * &gt;</type>
        <definition>QList&lt; QCPAxisRect * &gt; QCustomPlot::axisRects</definition>
        <argsstring>() const</argsstring>
        <name>axisRects</name>
        <qualifiedname>QCustomPlot::axisRects</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all axis rects in the plot.</para>
<para>The order of the axis rects is given by the fill order of the <ref refid="class_q_c_p_layout" kindref="compound">QCPLayout</ref> that is holding them. For example, if the axis rects are in the top level grid layout (accessible via <ref refid="class_q_custom_plot_1af1a1f1f571237deb7c2bd34a5e9f018f" kindref="member">QCustomPlot::plotLayout</ref>), they are ordered from left to right, top to bottom, if the layout&apos;s default <ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref> of <ref refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353ccaac4cb4b796ec4822d5894b47b51627fb3" kindref="member">foColumnsFirst</ref> wasn&apos;t changed.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a8f85940aaac50efb466287d9d2d04ec6" kindref="member">axisRectCount</ref>, <ref refid="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9" kindref="member">axisRect</ref>, <ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">QCPLayoutGrid::setFillOrder</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3888" column="9" bodyfile="qcustomplot.cpp" bodystart="14929" bodyend="14950"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
        <definition>QCPLayoutElement * QCustomPlot::layoutElementAt</definition>
        <argsstring>(const QPointF &amp;pos) const</argsstring>
        <name>layoutElementAt</name>
        <qualifiedname>QCustomPlot::layoutElementAt</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the layout element at pixel position <emphasis>pos</emphasis>. If there is no element at that position, returns <computeroutput>nullptr</computeroutput>.</para>
<para>Only visible elements are used. If <ref refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" kindref="member">QCPLayoutElement::setVisible</ref> on the element itself or on any of its parent elements is set to false, it will not be considered.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a89f7565773c5d59347a7f2262a737844" kindref="member">itemAt</ref>, <ref refid="class_q_custom_plot_1a545c0e63e13a4fbac3d5acbd8a03ef6f" kindref="member">plottableAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3889" column="20" bodyfile="qcustomplot.cpp" bodystart="14961" bodyend="14979"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a4a08842fc3e9ba6bed83aa410c5c5ba5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> *</type>
        <definition>QCPAxisRect * QCustomPlot::axisRectAt</definition>
        <argsstring>(const QPointF &amp;pos) const</argsstring>
        <name>axisRectAt</name>
        <qualifiedname>QCustomPlot::axisRectAt</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the layout element of type <ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> at pixel position <emphasis>pos</emphasis>. This method ignores other layout elements even if they are visually in front of the axis rect (e.g. a <ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref>). If there is no axis rect at that position, returns <computeroutput>nullptr</computeroutput>.</para>
<para>Only visible axis rects are used. If <ref refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" kindref="member">QCPLayoutElement::setVisible</ref> on the axis rect itself or on any of its parent elements is set to false, it will not be considered.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c" kindref="member">layoutElementAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3890" column="15" bodyfile="qcustomplot.cpp" bodystart="14991" bodyend="15012"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ad86528f2cee6c7e446dea4a6e8839935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SLOT void</type>
        <definition>void QCustomPlot::rescaleAxes</definition>
        <argsstring>(bool onlyVisiblePlottables=false)</argsstring>
        <name>rescaleAxes</name>
        <qualifiedname>QCustomPlot::rescaleAxes</qualifiedname>
        <param>
          <type>bool</type>
          <declname>onlyVisiblePlottables</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rescales the axes such that all plottables (like graphs) in the plot are fully visible.</para>
<para>if <emphasis>onlyVisiblePlottables</emphasis> is set to true, only the plottables that have their visibility set to true (<ref refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" kindref="member">QCPLayerable::setVisible</ref>), will be used to rescale the axes.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" kindref="member">QCPAbstractPlottable::rescaleAxes</ref>, <ref refid="class_q_c_p_axis_1a499345f02ebce4b23d8ccec96e58daa9" kindref="member">QCPAxis::rescale</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3891" column="15" bodyfile="qcustomplot.cpp" bodystart="15187" bodyend="15195"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a7e6b07792b1cb2c31681596582d14dbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
        <definition>QList&lt; QCPAxis * &gt; QCustomPlot::selectedAxes</definition>
        <argsstring>() const</argsstring>
        <name>selectedAxes</name>
        <qualifiedname>QCustomPlot::selectedAxes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the axes that currently have selected parts, i.e. whose selection state is not <ref refid="class_q_c_p_axis_1abee4c7a54c468b1385dfce2c898b115fae0df8123a5528d5ccf87cb7794f971ea" kindref="member">QCPAxis::spNone</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a" kindref="member">selectedPlottables</ref>, <ref refid="class_q_custom_plot_1ac87624ddff1cbf4064781a8e8ae321c4" kindref="member">selectedLegends</ref>, <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref>, <ref refid="class_q_c_p_axis_1ab9d7a69277dcbed9119b3c1f25ca19c3" kindref="member">QCPAxis::setSelectedParts</ref>, <ref refid="class_q_c_p_axis_1a513f9b9e326c505d9bec54880031b085" kindref="member">QCPAxis::setSelectableParts</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3893" column="9" bodyfile="qcustomplot.cpp" bodystart="15021" bodyend="15034"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ac87624ddff1cbf4064781a8e8ae321c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref> * &gt;</type>
        <definition>QList&lt; QCPLegend * &gt; QCustomPlot::selectedLegends</definition>
        <argsstring>() const</argsstring>
        <name>selectedLegends</name>
        <qualifiedname>QCustomPlot::selectedLegends</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the legends that currently have selected parts, i.e. whose selection state is not <ref refid="class_q_c_p_legend_1a5404de8bc1e4a994ca4ae69e2c7072f1a378201c07d500af7126e3ec91652eed7" kindref="member">QCPLegend::spNone</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a" kindref="member">selectedPlottables</ref>, <ref refid="class_q_custom_plot_1a7e6b07792b1cb2c31681596582d14dbe" kindref="member">selectedAxes</ref>, <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref>, <ref refid="class_q_c_p_legend_1a2aee309bb5c2a794b1987f3fc97f8ad8" kindref="member">QCPLegend::setSelectedParts</ref>, <ref refid="class_q_c_p_legend_1a9ce60aa8bbd89f62ae4fa83ac6c60110" kindref="member">QCPLegend::setSelectableParts</ref>, <ref refid="class_q_c_p_legend_1ac7d9e567d5c551e09cd9bcc4306c5532" kindref="member">QCPLegend::selectedItems</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3894" column="9" bodyfile="qcustomplot.cpp" bodystart="15043" bodyend="15068"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SLOT void</type>
        <definition>void QCustomPlot::deselectAll</definition>
        <argsstring>()</argsstring>
        <name>deselectAll</name>
        <qualifiedname>QCustomPlot::deselectAll</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deselects all layerables (plottables, items, axes, legends,...) of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>.</para>
<para>Since calling this function is not a user interaction, this does not emit the <ref refid="class_q_custom_plot_1a500c64a109bc773c973ad274f2fa4190" kindref="member">selectionChangedByUser</ref> signal. The individual selectionChanged signals are emitted though, if the objects were previously selected.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref>, <ref refid="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a" kindref="member">selectedPlottables</ref>, <ref refid="class_q_custom_plot_1afda487bcf2d6cf1a57173d82495e29ba" kindref="member">selectedItems</ref>, <ref refid="class_q_custom_plot_1a7e6b07792b1cb2c31681596582d14dbe" kindref="member">selectedAxes</ref>, <ref refid="class_q_custom_plot_1ac87624ddff1cbf4064781a8e8ae321c4" kindref="member">selectedLegends</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3895" column="15" bodyfile="qcustomplot.cpp" bodystart="15079" bodyend="15086"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::savePdf</definition>
        <argsstring>(const QString &amp;fileName, int width=0, int height=0, QCP::ExportPen exportPen=QCP::epAllowCosmetic, const QString &amp;pdfCreator=QString(), const QString &amp;pdfTitle=QString())</argsstring>
        <name>savePdf</name>
        <qualifiedname>QCustomPlot::savePdf</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespace_q_c_p_1a17844f19e1019693a953e1eb93536d2f" kindref="member">QCP::ExportPen</ref></type>
          <declname>exportPen</declname>
          <defval><ref refid="namespace_q_c_p_1a17844f19e1019693a953e1eb93536d2fa50d3657dba3fb90560b93a823cb0a6e8" kindref="member">QCP::epAllowCosmetic</ref></defval>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>pdfCreator</declname>
          <defval>QString()</defval>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>pdfTitle</declname>
          <defval>QString()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves a PDF with the vectorized plot to the file <emphasis>fileName</emphasis>. The axis ratio as well as the scale of texts and lines will be derived from the specified <emphasis>width</emphasis> and <emphasis>height</emphasis>. This means, the output will look like the normal on-screen output of a <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget with the corresponding pixel width and height. If either <emphasis>width</emphasis> or <emphasis>height</emphasis> is zero, the exported image will have the same dimensions as the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget currently has.</para>
<para>Setting <emphasis>exportPen</emphasis> to <ref refid="namespace_q_c_p_1a17844f19e1019693a953e1eb93536d2faae8fcfaafee234ce18558afef83f6a78" kindref="member">QCP::epNoCosmetic</ref> allows to disable the use of cosmetic pens when drawing to the PDF file. Cosmetic pens are pens with numerical width 0, which are always drawn as a one pixel wide line, no matter what zoom factor is set in the PDF-Viewer. For more information about cosmetic pens, see the QPainter and QPen documentation.</para>
<para>The objects of the plot will appear in the current selection state. If you don&apos;t want any selected objects to be painted in their selected look, deselect everything with <ref refid="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c" kindref="member">deselectAll</ref> before calling this function.</para>
<para>Returns true on success.</para>
<para><simplesect kind="warning"><para><itemizedlist>
<listitem><para>If you plan on editing the exported PDF file with a vector graphics editor like Inkscape, it is advised to set <emphasis>exportPen</emphasis> to <ref refid="namespace_q_c_p_1a17844f19e1019693a953e1eb93536d2faae8fcfaafee234ce18558afef83f6a78" kindref="member">QCP::epNoCosmetic</ref> to avoid losing those cosmetic lines (which might be quite many, because cosmetic pens are the default for e.g. axes and tick marks). </para>
</listitem>
<listitem><para>If calling this function inside the constructor of the parent of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget (i.e. the <ref refid="class_main_window" kindref="compound">MainWindow</ref> constructor, if <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> is inside the <ref refid="class_main_window" kindref="compound">MainWindow</ref>), always provide explicit non-zero widths and heights. If you leave <emphasis>width</emphasis> or <emphasis>height</emphasis> as 0 (default), this function uses the current width and height of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget. However, in Qt, these aren&apos;t defined yet inside the constructor, so you would get an image that has strange widths/heights.</para>
</listitem>
</itemizedlist>
<emphasis>pdfCreator</emphasis> and <emphasis>pdfTitle</emphasis> may be used to set the according metadata fields in the resulting PDF file.</para>
</simplesect>
<simplesect kind="note"><para>On Android systems, this method does nothing and issues an according qDebug warning message. This is also the case if for other reasons the define flag <computeroutput>QT_NO_PRINTER</computeroutput> is set.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9" kindref="member">savePng</ref>, <ref refid="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d" kindref="member">saveBmp</ref>, <ref refid="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4" kindref="member">saveJpg</ref>, <ref refid="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352" kindref="member">saveRastered</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3897" column="8" bodyfile="qcustomplot.cpp" bodystart="15234" bodyend="15295"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::savePng</definition>
        <argsstring>(const QString &amp;fileName, int width=0, int height=0, double scale=1.0, int quality=-1, int resolution=96, QCP::ResolutionUnit resolutionUnit=QCP::ruDotsPerInch)</argsstring>
        <name>savePng</name>
        <qualifiedname>QCustomPlot::savePng</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>quality</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>resolution</declname>
          <defval>96</defval>
        </param>
        <param>
          <type><ref refid="namespace_q_c_p_1a715d46153da230990aa887d0f0602452" kindref="member">QCP::ResolutionUnit</ref></type>
          <declname>resolutionUnit</declname>
          <defval><ref refid="namespace_q_c_p_1a715d46153da230990aa887d0f0602452affb887d8efe79c39a1aca2acd7002afc" kindref="member">QCP::ruDotsPerInch</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves a PNG image file to <emphasis>fileName</emphasis> on disc. The output plot will have the dimensions <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels, multiplied by <emphasis>scale</emphasis>. If either <emphasis>width</emphasis> or <emphasis>height</emphasis> is zero, the current width and height of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is used instead. Line widths and texts etc. are not scaled up when larger widths/heights are used. If you want that effect, use the <emphasis>scale</emphasis> parameter.</para>
<para>For example, if you set both <emphasis>width</emphasis> and <emphasis>height</emphasis> to 100 and <emphasis>scale</emphasis> to 2, you will end up with an image file of size 200*200 in which all graphical elements are scaled up by factor 2 (line widths, texts, etc.). This scaling is not done by stretching a 100*100 image, the result will have full 200*200 pixel resolution.</para>
<para>If you use a high scaling factor, it is recommended to enable antialiasing for all elements by temporarily setting <ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">QCustomPlot::setAntialiasedElements</ref> to <ref refid="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0caa897c232a0ffc8368e7c100ffc59ef31" kindref="member">QCP::aeAll</ref> as this allows <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> to place objects with sub-pixel accuracy.</para>
<para>image compression can be controlled with the <emphasis>quality</emphasis> parameter which must be between 0 and 100 or -1 to use the default setting.</para>
<para>The <emphasis>resolution</emphasis> will be written to the image file header and has no direct consequence for the quality or the pixel size. However, if opening the image with a tool which respects the metadata, it will be able to scale the image to match either a given size in real units of length (inch, centimeters, etc.), or the target display DPI. You can specify in which units <emphasis>resolution</emphasis> is given, by setting <emphasis>resolutionUnit</emphasis>. The <emphasis>resolution</emphasis> is converted to the format&apos;s expected resolution unit internally.</para>
<para>Returns true on success. If this function fails, most likely the PNG format isn&apos;t supported by the system, see Qt docs about QImageWriter::supportedImageFormats().</para>
<para>The objects of the plot will appear in the current selection state. If you don&apos;t want any selected objects to be painted in their selected look, deselect everything with <ref refid="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c" kindref="member">deselectAll</ref> before calling this function.</para>
<para>If you want the PNG to have a transparent background, call <ref refid="class_q_custom_plot_1a8ed256cf467bfa7ba1f9feaae62c3bd0" kindref="member">setBackground(const QBrush &amp;brush)</ref> with no brush (Qt::NoBrush) or a transparent color (Qt::transparent), before saving.</para>
<para><simplesect kind="warning"><para>If calling this function inside the constructor of the parent of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget (i.e. the <ref refid="class_main_window" kindref="compound">MainWindow</ref> constructor, if <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> is inside the <ref refid="class_main_window" kindref="compound">MainWindow</ref>), always provide explicit non-zero widths and heights. If you leave <emphasis>width</emphasis> or <emphasis>height</emphasis> as 0 (default), this function uses the current width and height of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget. However, in Qt, these aren&apos;t defined yet inside the constructor, so you would get an image that has strange widths/heights.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412" kindref="member">savePdf</ref>, <ref refid="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d" kindref="member">saveBmp</ref>, <ref refid="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4" kindref="member">saveJpg</ref>, <ref refid="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352" kindref="member">saveRastered</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3898" column="8" bodyfile="qcustomplot.cpp" bodystart="15342" bodyend="15345"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::saveJpg</definition>
        <argsstring>(const QString &amp;fileName, int width=0, int height=0, double scale=1.0, int quality=-1, int resolution=96, QCP::ResolutionUnit resolutionUnit=QCP::ruDotsPerInch)</argsstring>
        <name>saveJpg</name>
        <qualifiedname>QCustomPlot::saveJpg</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>quality</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>resolution</declname>
          <defval>96</defval>
        </param>
        <param>
          <type><ref refid="namespace_q_c_p_1a715d46153da230990aa887d0f0602452" kindref="member">QCP::ResolutionUnit</ref></type>
          <declname>resolutionUnit</declname>
          <defval><ref refid="namespace_q_c_p_1a715d46153da230990aa887d0f0602452affb887d8efe79c39a1aca2acd7002afc" kindref="member">QCP::ruDotsPerInch</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves a JPEG image file to <emphasis>fileName</emphasis> on disc. The output plot will have the dimensions <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels, multiplied by <emphasis>scale</emphasis>. If either <emphasis>width</emphasis> or <emphasis>height</emphasis> is zero, the current width and height of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is used instead. Line widths and texts etc. are not scaled up when larger widths/heights are used. If you want that effect, use the <emphasis>scale</emphasis> parameter.</para>
<para>For example, if you set both <emphasis>width</emphasis> and <emphasis>height</emphasis> to 100 and <emphasis>scale</emphasis> to 2, you will end up with an image file of size 200*200 in which all graphical elements are scaled up by factor 2 (line widths, texts, etc.). This scaling is not done by stretching a 100*100 image, the result will have full 200*200 pixel resolution.</para>
<para>If you use a high scaling factor, it is recommended to enable antialiasing for all elements by temporarily setting <ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">QCustomPlot::setAntialiasedElements</ref> to <ref refid="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0caa897c232a0ffc8368e7c100ffc59ef31" kindref="member">QCP::aeAll</ref> as this allows <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> to place objects with sub-pixel accuracy.</para>
<para>image compression can be controlled with the <emphasis>quality</emphasis> parameter which must be between 0 and 100 or -1 to use the default setting.</para>
<para>The <emphasis>resolution</emphasis> will be written to the image file header and has no direct consequence for the quality or the pixel size. However, if opening the image with a tool which respects the metadata, it will be able to scale the image to match either a given size in real units of length (inch, centimeters, etc.), or the target display DPI. You can specify in which units <emphasis>resolution</emphasis> is given, by setting <emphasis>resolutionUnit</emphasis>. The <emphasis>resolution</emphasis> is converted to the format&apos;s expected resolution unit internally.</para>
<para>Returns true on success. If this function fails, most likely the JPEG format isn&apos;t supported by the system, see Qt docs about QImageWriter::supportedImageFormats().</para>
<para>The objects of the plot will appear in the current selection state. If you don&apos;t want any selected objects to be painted in their selected look, deselect everything with <ref refid="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c" kindref="member">deselectAll</ref> before calling this function.</para>
<para><simplesect kind="warning"><para>If calling this function inside the constructor of the parent of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget (i.e. the <ref refid="class_main_window" kindref="compound">MainWindow</ref> constructor, if <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> is inside the <ref refid="class_main_window" kindref="compound">MainWindow</ref>), always provide explicit non-zero widths and heights. If you leave <emphasis>width</emphasis> or <emphasis>height</emphasis> as 0 (default), this function uses the current width and height of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget. However, in Qt, these aren&apos;t defined yet inside the constructor, so you would get an image that has strange widths/heights.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412" kindref="member">savePdf</ref>, <ref refid="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9" kindref="member">savePng</ref>, <ref refid="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d" kindref="member">saveBmp</ref>, <ref refid="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352" kindref="member">saveRastered</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3899" column="8" bodyfile="qcustomplot.cpp" bodystart="15389" bodyend="15392"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::saveBmp</definition>
        <argsstring>(const QString &amp;fileName, int width=0, int height=0, double scale=1.0, int resolution=96, QCP::ResolutionUnit resolutionUnit=QCP::ruDotsPerInch)</argsstring>
        <name>saveBmp</name>
        <qualifiedname>QCustomPlot::saveBmp</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>resolution</declname>
          <defval>96</defval>
        </param>
        <param>
          <type><ref refid="namespace_q_c_p_1a715d46153da230990aa887d0f0602452" kindref="member">QCP::ResolutionUnit</ref></type>
          <declname>resolutionUnit</declname>
          <defval><ref refid="namespace_q_c_p_1a715d46153da230990aa887d0f0602452affb887d8efe79c39a1aca2acd7002afc" kindref="member">QCP::ruDotsPerInch</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves a BMP image file to <emphasis>fileName</emphasis> on disc. The output plot will have the dimensions <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels, multiplied by <emphasis>scale</emphasis>. If either <emphasis>width</emphasis> or <emphasis>height</emphasis> is zero, the current width and height of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is used instead. Line widths and texts etc. are not scaled up when larger widths/heights are used. If you want that effect, use the <emphasis>scale</emphasis> parameter.</para>
<para>For example, if you set both <emphasis>width</emphasis> and <emphasis>height</emphasis> to 100 and <emphasis>scale</emphasis> to 2, you will end up with an image file of size 200*200 in which all graphical elements are scaled up by factor 2 (line widths, texts, etc.). This scaling is not done by stretching a 100*100 image, the result will have full 200*200 pixel resolution.</para>
<para>If you use a high scaling factor, it is recommended to enable antialiasing for all elements by temporarily setting <ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">QCustomPlot::setAntialiasedElements</ref> to <ref refid="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0caa897c232a0ffc8368e7c100ffc59ef31" kindref="member">QCP::aeAll</ref> as this allows <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> to place objects with sub-pixel accuracy.</para>
<para>The <emphasis>resolution</emphasis> will be written to the image file header and has no direct consequence for the quality or the pixel size. However, if opening the image with a tool which respects the metadata, it will be able to scale the image to match either a given size in real units of length (inch, centimeters, etc.), or the target display DPI. You can specify in which units <emphasis>resolution</emphasis> is given, by setting <emphasis>resolutionUnit</emphasis>. The <emphasis>resolution</emphasis> is converted to the format&apos;s expected resolution unit internally.</para>
<para>Returns true on success. If this function fails, most likely the BMP format isn&apos;t supported by the system, see Qt docs about QImageWriter::supportedImageFormats().</para>
<para>The objects of the plot will appear in the current selection state. If you don&apos;t want any selected objects to be painted in their selected look, deselect everything with <ref refid="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c" kindref="member">deselectAll</ref> before calling this function.</para>
<para><simplesect kind="warning"><para>If calling this function inside the constructor of the parent of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget (i.e. the <ref refid="class_main_window" kindref="compound">MainWindow</ref> constructor, if <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> is inside the <ref refid="class_main_window" kindref="compound">MainWindow</ref>), always provide explicit non-zero widths and heights. If you leave <emphasis>width</emphasis> or <emphasis>height</emphasis> as 0 (default), this function uses the current width and height of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget. However, in Qt, these aren&apos;t defined yet inside the constructor, so you would get an image that has strange widths/heights.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412" kindref="member">savePdf</ref>, <ref refid="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9" kindref="member">savePng</ref>, <ref refid="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4" kindref="member">saveJpg</ref>, <ref refid="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352" kindref="member">saveRastered</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3900" column="8" bodyfile="qcustomplot.cpp" bodystart="15433" bodyend="15436"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::saveRastered</definition>
        <argsstring>(const QString &amp;fileName, int width, int height, double scale, const char *format, int quality=-1, int resolution=96, QCP::ResolutionUnit resolutionUnit=QCP::ruDotsPerInch)</argsstring>
        <name>saveRastered</name>
        <qualifiedname>QCustomPlot::saveRastered</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quality</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>resolution</declname>
          <defval>96</defval>
        </param>
        <param>
          <type><ref refid="namespace_q_c_p_1a715d46153da230990aa887d0f0602452" kindref="member">QCP::ResolutionUnit</ref></type>
          <declname>resolutionUnit</declname>
          <defval><ref refid="namespace_q_c_p_1a715d46153da230990aa887d0f0602452affb887d8efe79c39a1aca2acd7002afc" kindref="member">QCP::ruDotsPerInch</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves the plot to a rastered image file <emphasis>fileName</emphasis> in the image format <emphasis>format</emphasis>. The plot is sized to <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels and scaled with <emphasis>scale</emphasis>. (width 100 and scale 2.0 lead to a full resolution file with width 200.) If the <emphasis>format</emphasis> supports compression, <emphasis>quality</emphasis> may be between 0 and 100 to control it.</para>
<para>Returns true on success. If this function fails, most likely the given <emphasis>format</emphasis> isn&apos;t supported by the system, see Qt docs about QImageWriter::supportedImageFormats().</para>
<para>The <emphasis>resolution</emphasis> will be written to the image file header (if the file format supports this) and has no direct consequence for the quality or the pixel size. However, if opening the image with a tool which respects the metadata, it will be able to scale the image to match either a given size in real units of length (inch, centimeters, etc.), or the target display DPI. You can specify in which units <emphasis>resolution</emphasis> is given, by setting <emphasis>resolutionUnit</emphasis>. The <emphasis>resolution</emphasis> is converted to the format&apos;s expected resolution unit internally.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d" kindref="member">saveBmp</ref>, <ref refid="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4" kindref="member">saveJpg</ref>, <ref refid="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9" kindref="member">savePng</ref>, <ref refid="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412" kindref="member">savePdf</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3901" column="8" bodyfile="qcustomplot.cpp" bodystart="16370" bodyend="16387"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1aabb974d71ce96c137dc04eb6eab844fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QPixmap</type>
        <definition>QPixmap QCustomPlot::toPixmap</definition>
        <argsstring>(int width=0, int height=0, double scale=1.0)</argsstring>
        <name>toPixmap</name>
        <qualifiedname>QCustomPlot::toPixmap</qualifiedname>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Renders the plot to a pixmap and returns it.</para>
<para>The plot is sized to <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels and scaled with <emphasis>scale</emphasis>. (width 100 and scale 2.0 lead to a full resolution pixmap with width 200.)</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a1be68d5c0f1e086d6374d1340a193fb9" kindref="member">toPainter</ref>, <ref refid="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352" kindref="member">saveRastered</ref>, <ref refid="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d" kindref="member">saveBmp</ref>, <ref refid="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9" kindref="member">savePng</ref>, <ref refid="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4" kindref="member">saveJpg</ref>, <ref refid="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412" kindref="member">savePdf</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3902" column="11" bodyfile="qcustomplot.cpp" bodystart="16397" bodyend="16439"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a1be68d5c0f1e086d6374d1340a193fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::toPainter</definition>
        <argsstring>(QCPPainter *painter, int width=0, int height=0)</argsstring>
        <name>toPainter</name>
        <qualifiedname>QCustomPlot::toPainter</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Renders the plot using the passed <emphasis>painter</emphasis>.</para>
<para>The plot is sized to <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels. If the <emphasis>painter&apos;s</emphasis> scale is not 1.0, the resulting plot will appear scaled accordingly.</para>
<para><simplesect kind="note"><para>If you are restricted to using a QPainter (instead of <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref>), create a temporary QPicture and open a <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> on it. Then call <ref refid="class_q_custom_plot_1a1be68d5c0f1e086d6374d1340a193fb9" kindref="member">toPainter</ref> with this <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref>. After ending the paint operation on the picture, draw it with the QPainter. This will reproduce the painter actions the <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> took, with a QPainter.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_q_custom_plot_1aabb974d71ce96c137dc04eb6eab844fe" kindref="member">toPixmap</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3903" column="8" bodyfile="qcustomplot.cpp" bodystart="16453" bodyend="16478"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SLOT void</type>
        <definition>void QCustomPlot::replot</definition>
        <argsstring>(QCustomPlot::RefreshPriority refreshPriority=QCustomPlot::rpRefreshHint)</argsstring>
        <name>replot</name>
        <qualifiedname>QCustomPlot::replot</qualifiedname>
        <param>
          <type><ref refid="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39" kindref="member">QCustomPlot::RefreshPriority</ref></type>
          <declname>refreshPriority</declname>
          <defval><ref refid="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a49666a5854a68dbcca8b277b03331260" kindref="member">QCustomPlot::rpRefreshHint</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Causes a complete replot into the internal paint buffer(s). Finally, the widget surface is refreshed with the new buffer contents. This is the method that must be called to make changes to the plot, e.g. on the axis ranges or data points of graphs, visible.</para>
<para>The parameter <emphasis>refreshPriority</emphasis> can be used to fine-tune the timing of the replot. For example if your application calls <ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">replot</ref> very quickly in succession (e.g. multiple independent functions change some aspects of the plot and each wants to make sure the change gets replotted), it is advisable to set <emphasis>refreshPriority</emphasis> to <ref refid="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a019650c6ddf308f97e811fbfff207a8f" kindref="member">QCustomPlot::rpQueuedReplot</ref>. This way, the actual replotting is deferred to the next event loop iteration. Multiple successive calls of <ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">replot</ref> with this priority will only cause a single replot, avoiding redundant replots and improving performance.</para>
<para>Under a few circumstances, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> causes a replot by itself. Those are resize events of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget and user interactions (object selection and range dragging/zooming).</para>
<para>Before the replot happens, the signal <ref refid="class_q_custom_plot_1a0cd30e29b73efd6afe096e44bc5956f5" kindref="member">beforeReplot</ref> is emitted. After the replot, <ref refid="class_q_custom_plot_1a6f4fa624af060bc5919c5f266cf426a0" kindref="member">afterReplot</ref> is emitted. It is safe to mutually connect the replot slot with any of those two signals on two QCustomPlots to make them replot synchronously, it won&apos;t cause an infinite recursion.</para>
<para>If a layer is in mode <ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538" kindref="member">QCPLayer::lmBuffered</ref> (<ref refid="class_q_c_p_layer_1a938d57b04f4e4c23cedf1711f983919b" kindref="member">QCPLayer::setMode</ref>), it is also possible to replot only that specific layer via <ref refid="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180" kindref="member">QCPLayer::replot</ref>. See the documentation there for details.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1ad582e335061a25da006acc58a4009ccc" kindref="member">replotTime</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3904" column="15" bodyfile="qcustomplot.cpp" bodystart="15115" bodyend="15166"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ad582e335061a25da006acc58a4009ccc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QCustomPlot::replotTime</definition>
        <argsstring>(bool average=false) const</argsstring>
        <name>replotTime</name>
        <qualifiedname>QCustomPlot::replotTime</qualifiedname>
        <param>
          <type>bool</type>
          <declname>average</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the time in milliseconds that the last replot took. If <emphasis>average</emphasis> is set to true, an exponential moving average over the last couple of replots is returned.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">replot</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3905" column="10" bodyfile="qcustomplot.cpp" bodystart="15174" bodyend="15177"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_q_custom_plot_1a9b232142c64fcf273a953ee08e5b90e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::mouseDoubleClick</definition>
        <argsstring>(QMouseEvent *event)</argsstring>
        <name>mouseDoubleClick</name>
        <qualifiedname>QCustomPlot::mouseDoubleClick</qualifiedname>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> receives a mouse double click event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3911" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1aca75bf9afb5dd19349c375de2a87a051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::mousePress</definition>
        <argsstring>(QMouseEvent *event)</argsstring>
        <name>mousePress</name>
        <qualifiedname>QCustomPlot::mousePress</qualifiedname>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> receives a mouse press event.</para>
<para>It is emitted before <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> handles any other mechanism like range dragging. So a slot connected to this signal can still influence the behaviour e.g. with <ref refid="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418" kindref="member">QCPAxisRect::setRangeDrag</ref> or <ref refid="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" kindref="member">QCPAxisRect::setRangeDragAxes</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3912" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1a742ca4f94688bed2a685fd8a56ce5704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::mouseMove</definition>
        <argsstring>(QMouseEvent *event)</argsstring>
        <name>mouseMove</name>
        <qualifiedname>QCustomPlot::mouseMove</qualifiedname>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> receives a mouse move event.</para>
<para>It is emitted before <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> handles any other mechanism like range dragging. So a slot connected to this signal can still influence the behaviour e.g. with <ref refid="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418" kindref="member">QCPAxisRect::setRangeDrag</ref> or <ref refid="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" kindref="member">QCPAxisRect::setRangeDragAxes</ref>.</para>
<para><simplesect kind="warning"><para>It is discouraged to change the drag-axes with <ref refid="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" kindref="member">QCPAxisRect::setRangeDragAxes</ref> here, because the dragging starting point was saved the moment the mouse was pressed. Thus it only has a meaning for the range drag axes that were set at that moment. If you want to change the drag axes, consider doing this in the <ref refid="class_q_custom_plot_1aca75bf9afb5dd19349c375de2a87a051" kindref="member">mousePress</ref> signal instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3913" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1ac8dc0ee6bb98e923c00b4ebafbe6134d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::mouseRelease</definition>
        <argsstring>(QMouseEvent *event)</argsstring>
        <name>mouseRelease</name>
        <qualifiedname>QCustomPlot::mouseRelease</qualifiedname>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> receives a mouse release event.</para>
<para>It is emitted before <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> handles any other mechanisms like object selection. So a slot connected to this signal can still influence the behaviour e.g. with <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref> or <ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">QCPAbstractPlottable::setSelectable</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3914" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1ac80a14206f99304a91d2aa55775ec3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::mouseWheel</definition>
        <argsstring>(QWheelEvent *event)</argsstring>
        <name>mouseWheel</name>
        <qualifiedname>QCustomPlot::mouseWheel</qualifiedname>
        <param>
          <type>QWheelEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> receives a mouse wheel event.</para>
<para>It is emitted before <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> handles any other mechanisms like range zooming. So a slot connected to this signal can still influence the behaviour e.g. with <ref refid="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31" kindref="member">QCPAxisRect::setRangeZoom</ref>, <ref refid="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2" kindref="member">QCPAxisRect::setRangeZoomAxes</ref> or <ref refid="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac" kindref="member">QCPAxisRect::setRangeZoomFactor</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3915" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1af5fe78b8bc9e4e96df921612837fd4fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::plottableClick</definition>
        <argsstring>(QCPAbstractPlottable *plottable, int dataIndex, QMouseEvent *event)</argsstring>
        <name>plottableClick</name>
        <qualifiedname>QCustomPlot::plottableClick</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> *</type>
          <declname>plottable</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dataIndex</declname>
        </param>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when a plottable is clicked.</para>
<para><emphasis>event</emphasis> is the mouse event that caused the click and <emphasis>plottable</emphasis> is the plottable that received the click. The parameter <emphasis>dataIndex</emphasis> indicates the data point that was closest to the click position.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a86a3ab7263c9c4e008e70d6c5fce9fbd" kindref="member">plottableDoubleClick</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3917" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1a86a3ab7263c9c4e008e70d6c5fce9fbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::plottableDoubleClick</definition>
        <argsstring>(QCPAbstractPlottable *plottable, int dataIndex, QMouseEvent *event)</argsstring>
        <name>plottableDoubleClick</name>
        <qualifiedname>QCustomPlot::plottableDoubleClick</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> *</type>
          <declname>plottable</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dataIndex</declname>
        </param>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when a plottable is double clicked.</para>
<para><emphasis>event</emphasis> is the mouse event that caused the click and <emphasis>plottable</emphasis> is the plottable that received the click. The parameter <emphasis>dataIndex</emphasis> indicates the data point that was closest to the click position.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1af5fe78b8bc9e4e96df921612837fd4fd" kindref="member">plottableClick</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3918" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1ae16b51f52d2b7aebbc7e3e74e6ff2e4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::itemClick</definition>
        <argsstring>(QCPAbstractItem *item, QMouseEvent *event)</argsstring>
        <name>itemClick</name>
        <qualifiedname>QCustomPlot::itemClick</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when an item is clicked.</para>
<para><emphasis>event</emphasis> is the mouse event that caused the click and <emphasis>item</emphasis> is the item that received the click.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1ac83aa9f5a3e9bb3efc9cdc763dcd42a6" kindref="member">itemDoubleClick</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3919" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1ac83aa9f5a3e9bb3efc9cdc763dcd42a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::itemDoubleClick</definition>
        <argsstring>(QCPAbstractItem *item, QMouseEvent *event)</argsstring>
        <name>itemDoubleClick</name>
        <qualifiedname>QCustomPlot::itemDoubleClick</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when an item is double clicked.</para>
<para><emphasis>event</emphasis> is the mouse event that caused the click and <emphasis>item</emphasis> is the item that received the click.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1ae16b51f52d2b7aebbc7e3e74e6ff2e4b" kindref="member">itemClick</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3920" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1abf635f8b56ab5c16d5de9f358543e82b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::axisClick</definition>
        <argsstring>(QCPAxis *axis, QCPAxis::SelectablePart part, QMouseEvent *event)</argsstring>
        <name>axisClick</name>
        <qualifiedname>QCustomPlot::axisClick</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>axis</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_axis_1abee4c7a54c468b1385dfce2c898b115f" kindref="member">QCPAxis::SelectablePart</ref></type>
          <declname>part</declname>
        </param>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when an axis is clicked.</para>
<para><emphasis>event</emphasis> is the mouse event that caused the click, <emphasis>axis</emphasis> is the axis that received the click and <emphasis>part</emphasis> indicates the part of the axis that was clicked.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a6df35357460181a72da3e93d600f5256" kindref="member">axisDoubleClick</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3921" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1a6df35357460181a72da3e93d600f5256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::axisDoubleClick</definition>
        <argsstring>(QCPAxis *axis, QCPAxis::SelectablePart part, QMouseEvent *event)</argsstring>
        <name>axisDoubleClick</name>
        <qualifiedname>QCustomPlot::axisDoubleClick</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>axis</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_axis_1abee4c7a54c468b1385dfce2c898b115f" kindref="member">QCPAxis::SelectablePart</ref></type>
          <declname>part</declname>
        </param>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when an axis is double clicked.</para>
<para><emphasis>event</emphasis> is the mouse event that caused the click, <emphasis>axis</emphasis> is the axis that received the click and <emphasis>part</emphasis> indicates the part of the axis that was clicked.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1abf635f8b56ab5c16d5de9f358543e82b" kindref="member">axisClick</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3922" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1a79cff0baafbca10a3aaf694d2d3b9ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::legendClick</definition>
        <argsstring>(QCPLegend *legend, QCPAbstractLegendItem *item, QMouseEvent *event)</argsstring>
        <name>legendClick</name>
        <qualifiedname>QCustomPlot::legendClick</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref> *</type>
          <declname>legend</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_abstract_legend_item" kindref="compound">QCPAbstractLegendItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when a legend (item) is clicked.</para>
<para><emphasis>event</emphasis> is the mouse event that caused the click, <emphasis>legend</emphasis> is the legend that received the click and <emphasis>item</emphasis> is the legend item that received the click. If only the legend and no item is clicked, <emphasis>item</emphasis> is <computeroutput>nullptr</computeroutput>. This happens for a click inside the legend padding or the space between two items.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a0250f835c044521df1619b132288bca7" kindref="member">legendDoubleClick</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3923" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1a0250f835c044521df1619b132288bca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::legendDoubleClick</definition>
        <argsstring>(QCPLegend *legend, QCPAbstractLegendItem *item, QMouseEvent *event)</argsstring>
        <name>legendDoubleClick</name>
        <qualifiedname>QCustomPlot::legendDoubleClick</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref> *</type>
          <declname>legend</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_abstract_legend_item" kindref="compound">QCPAbstractLegendItem</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when a legend (item) is double clicked.</para>
<para><emphasis>event</emphasis> is the mouse event that caused the click, <emphasis>legend</emphasis> is the legend that received the click and <emphasis>item</emphasis> is the legend item that received the click. If only the legend and no item is clicked, <emphasis>item</emphasis> is <computeroutput>nullptr</computeroutput>. This happens for a click inside the legend padding or the space between two items.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a79cff0baafbca10a3aaf694d2d3b9ab3" kindref="member">legendClick</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3924" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1a500c64a109bc773c973ad274f2fa4190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::selectionChangedByUser</definition>
        <argsstring>()</argsstring>
        <name>selectionChangedByUser</name>
        <qualifiedname>QCustomPlot::selectionChangedByUser</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted after the user has changed the selection in the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>, e.g. by clicking. It is not emitted when the selection state of an object has changed programmatically by a direct call to <computeroutput>setSelected()</computeroutput>/<computeroutput>setSelection()</computeroutput> on an object or by calling <ref refid="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c" kindref="member">deselectAll</ref>.</para>
<para>In addition to this signal, selectable objects also provide individual signals, for example <ref refid="class_q_c_p_axis_1a62b598abeee7174a05f9d542cc85b1f5" kindref="member">QCPAxis::selectionChanged</ref> or <ref refid="class_q_c_p_abstract_plottable_1a3af66432b1dca93b28e00e78a8c7c1d9" kindref="member">QCPAbstractPlottable::selectionChanged</ref>. Note that those signals are emitted even if the selection state is changed programmatically.</para>
<para>See the documentation of <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">setInteractions</ref> for details about the selection mechanism.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a" kindref="member">selectedPlottables</ref>, <ref refid="class_q_custom_plot_1ad3547aded026d8a9ae6ef13a69080d06" kindref="member">selectedGraphs</ref>, <ref refid="class_q_custom_plot_1afda487bcf2d6cf1a57173d82495e29ba" kindref="member">selectedItems</ref>, <ref refid="class_q_custom_plot_1a7e6b07792b1cb2c31681596582d14dbe" kindref="member">selectedAxes</ref>, <ref refid="class_q_custom_plot_1ac87624ddff1cbf4064781a8e8ae321c4" kindref="member">selectedLegends</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3926" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1a0cd30e29b73efd6afe096e44bc5956f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::beforeReplot</definition>
        <argsstring>()</argsstring>
        <name>beforeReplot</name>
        <qualifiedname>QCustomPlot::beforeReplot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted immediately before a replot takes place (caused by a call to the slot <ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">replot</ref>).</para>
<para>It is safe to mutually connect the replot slot with this signal on two QCustomPlots to make them replot synchronously, it won&apos;t cause an infinite recursion.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">replot</ref>, <ref refid="class_q_custom_plot_1a6f4fa624af060bc5919c5f266cf426a0" kindref="member">afterReplot</ref>, <ref refid="class_q_custom_plot_1aa3a37a057f64a7587436dabe98c592e9" kindref="member">afterLayout</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3927" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1aa3a37a057f64a7587436dabe98c592e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::afterLayout</definition>
        <argsstring>()</argsstring>
        <name>afterLayout</name>
        <qualifiedname>QCustomPlot::afterLayout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted immediately after the layout step has been completed, which occurs right before drawing the plot. This is typically during a call to <ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">replot</ref>, and in such cases this signal is emitted in between the signals <ref refid="class_q_custom_plot_1a0cd30e29b73efd6afe096e44bc5956f5" kindref="member">beforeReplot</ref> and <ref refid="class_q_custom_plot_1a6f4fa624af060bc5919c5f266cf426a0" kindref="member">afterReplot</ref>. Unlike those signals however, this signal is also emitted during off-screen painting, such as when calling <ref refid="class_q_custom_plot_1aabb974d71ce96c137dc04eb6eab844fe" kindref="member">toPixmap</ref> or <ref refid="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412" kindref="member">savePdf</ref>.</para>
<para>The layout step queries all layouts and layout elements in the plot for their proposed size and arranges the objects accordingly as preparation for the subsequent drawing step. Through this signal, you have the opportunity to update certain things in your plot that depend crucially on the exact dimensions/positioning of layout elements such as axes and axis rects.</para>
<para><simplesect kind="warning"><para>However, changing any parameters of this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance which would normally affect the layouting (e.g. axis range order of magnitudes, tick label sizes, etc.) will not issue a second run of the layout step. It will propagate directly to the draw step and may cause graphical inconsistencies such as overlapping objects, if sizes or positions have changed.</para>
</simplesect>
<simplesect kind="see"><para>updateLayout, <ref refid="class_q_custom_plot_1a0cd30e29b73efd6afe096e44bc5956f5" kindref="member">beforeReplot</ref>, <ref refid="class_q_custom_plot_1a6f4fa624af060bc5919c5f266cf426a0" kindref="member">afterReplot</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3928" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_custom_plot_1a6f4fa624af060bc5919c5f266cf426a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::afterReplot</definition>
        <argsstring>()</argsstring>
        <name>afterReplot</name>
        <qualifiedname>QCustomPlot::afterReplot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted immediately after a replot has taken place (caused by a call to the slot <ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">replot</ref>).</para>
<para>It is safe to mutually connect the replot slot with this signal on two QCustomPlots to make them replot synchronously, it won&apos;t cause an infinite recursion.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">replot</ref>, <ref refid="class_q_custom_plot_1a0cd30e29b73efd6afe096e44bc5956f5" kindref="member">beforeReplot</ref>, <ref refid="class_q_custom_plot_1aa3a37a057f64a7587436dabe98c592e9" kindref="member">afterLayout</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3929" column="8"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_custom_plot_1a968a01cd4077d63aecde1aef1db057fc" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSize</type>
        <definition>QSize QCustomPlot::minimumSizeHint</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>minimumSizeHint</name>
        <qualifiedname>QCustomPlot::minimumSizeHint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3978" column="17" bodyfile="qcustomplot.cpp" bodystart="15446" bodyend="15449"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ac9d6fe101e082daf756903b11f6e6213" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSize</type>
        <definition>QSize QCustomPlot::sizeHint</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>sizeHint</name>
        <qualifiedname>QCustomPlot::sizeHint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3979" column="17" bodyfile="qcustomplot.cpp" bodystart="15456" bodyend="15459"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a8068b368e5813065ee0f4cf7c6d21330" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCustomPlot::paintEvent</definition>
        <argsstring>(QPaintEvent *event) Q_DECL_OVERRIDE</argsstring>
        <name>paintEvent</name>
        <qualifiedname>QCustomPlot::paintEvent</qualifiedname>
        <param>
          <type>QPaintEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3980" column="16" bodyfile="qcustomplot.cpp" bodystart="15466" bodyend="15481"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1af5b69dc6a431562ecdd1d0718bcbdf70" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCustomPlot::resizeEvent</definition>
        <argsstring>(QResizeEvent *event) Q_DECL_OVERRIDE</argsstring>
        <name>resizeEvent</name>
        <qualifiedname>QCustomPlot::resizeEvent</qualifiedname>
        <param>
          <type>QResizeEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3981" column="16" bodyfile="qcustomplot.cpp" bodystart="15488" bodyend="15494"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a344075e6e80ed6d575c79b81694abb8a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCustomPlot::mouseDoubleClickEvent</definition>
        <argsstring>(QMouseEvent *event) Q_DECL_OVERRIDE</argsstring>
        <name>mouseDoubleClickEvent</name>
        <qualifiedname>QCustomPlot::mouseDoubleClickEvent</qualifiedname>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3982" column="16" bodyfile="qcustomplot.cpp" bodystart="15505" bodyend="15546"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1aac0a7296a6031dc667c01c1abd4ecc6b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCustomPlot::mousePressEvent</definition>
        <argsstring>(QMouseEvent *event) Q_DECL_OVERRIDE</argsstring>
        <name>mousePressEvent</name>
        <qualifiedname>QCustomPlot::mousePressEvent</qualifiedname>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3983" column="16" bodyfile="qcustomplot.cpp" bodystart="15557" bodyend="15593"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ae7abdc93b26d2ad4632c1ab75ae5b46f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCustomPlot::mouseMoveEvent</definition>
        <argsstring>(QMouseEvent *event) Q_DECL_OVERRIDE</argsstring>
        <name>mouseMoveEvent</name>
        <qualifiedname>QCustomPlot::mouseMoveEvent</qualifiedname>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3984" column="16" bodyfile="qcustomplot.cpp" bodystart="15607" bodyend="15620"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1adc24846f52199e5a9bc35c387a6ce68d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCustomPlot::mouseReleaseEvent</definition>
        <argsstring>(QMouseEvent *event) Q_DECL_OVERRIDE</argsstring>
        <name>mouseReleaseEvent</name>
        <qualifiedname>QCustomPlot::mouseReleaseEvent</qualifiedname>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3985" column="16" bodyfile="qcustomplot.cpp" bodystart="15636" bodyend="15683"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a7848c9ac8be60bbd8fcea9b53be543c5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCustomPlot::wheelEvent</definition>
        <argsstring>(QWheelEvent *event) Q_DECL_OVERRIDE</argsstring>
        <name>wheelEvent</name>
        <qualifiedname>QCustomPlot::wheelEvent</qualifiedname>
        <param>
          <type>QWheelEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3986" column="16" bodyfile="qcustomplot.cpp" bodystart="15690" bodyend="15709"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ad7a7d878bf050f101a43008e7d8fdb52" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCustomPlot::draw</definition>
        <argsstring>(QCPPainter *painter)</argsstring>
        <name>draw</name>
        <qualifiedname>QCustomPlot::draw</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3989" column="16" bodyfile="qcustomplot.cpp" bodystart="15721" bodyend="15742"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a6e6693e2c249f65437382ffd93405e04" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCustomPlot::updateLayout</definition>
        <argsstring>()</argsstring>
        <name>updateLayout</name>
        <qualifiedname>QCustomPlot::updateLayout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3990" column="16" bodyfile="qcustomplot.cpp" bodystart="15752" bodyend="15760"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a8b46607021c463c94709d3504951cb47" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCustomPlot::axisRemoved</definition>
        <argsstring>(QCPAxis *axis)</argsstring>
        <name>axisRemoved</name>
        <qualifiedname>QCustomPlot::axisRemoved</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3991" column="16" bodyfile="qcustomplot.cpp" bodystart="15988" bodyend="16000"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a9d173454555021c9ffd4f675c4d9037a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCustomPlot::legendRemoved</definition>
        <argsstring>(QCPLegend *legend)</argsstring>
        <name>legendRemoved</name>
        <qualifiedname>QCustomPlot::legendRemoved</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref> *</type>
          <declname>legend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3992" column="16" bodyfile="qcustomplot.cpp" bodystart="16007" bodyend="16011"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ac10849411e1d0e858ea7f29c8ade364c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Q_SLOT void</type>
        <definition>void QCustomPlot::processRectSelection</definition>
        <argsstring>(QRect rect, QMouseEvent *event)</argsstring>
        <name>processRectSelection</name>
        <qualifiedname>QCustomPlot::processRectSelection</qualifiedname>
        <param>
          <type>QRect</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3993" column="23" bodyfile="qcustomplot.cpp" bodystart="16030" bodyend="16105"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a5508a207dcc279f316142f96d984bba3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Q_SLOT void</type>
        <definition>void QCustomPlot::processRectZoom</definition>
        <argsstring>(QRect rect, QMouseEvent *event)</argsstring>
        <name>processRectZoom</name>
        <qualifiedname>QCustomPlot::processRectZoom</qualifiedname>
        <param>
          <type>QRect</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3994" column="23" bodyfile="qcustomplot.cpp" bodystart="16118" bodyend="16128"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ac13c10fff6613e3e80e13c787b010838" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Q_SLOT void</type>
        <definition>void QCustomPlot::processPointSelection</definition>
        <argsstring>(QMouseEvent *event)</argsstring>
        <name>processPointSelection</name>
        <qualifiedname>QCustomPlot::processPointSelection</qualifiedname>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3995" column="23" bodyfile="qcustomplot.cpp" bodystart="16147" bodyend="16181"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1aeba7733bb9fadfb5a375b3f40de9e58a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::registerPlottable</definition>
        <argsstring>(QCPAbstractPlottable *plottable)</argsstring>
        <name>registerPlottable</name>
        <qualifiedname>QCustomPlot::registerPlottable</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> *</type>
          <declname>plottable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3998" column="8" bodyfile="qcustomplot.cpp" bodystart="16194" bodyend="16214"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1acfc01230bddaea4f1782e4aa7d130af6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::registerGraph</definition>
        <argsstring>(QCPGraph *graph)</argsstring>
        <name>registerGraph</name>
        <qualifiedname>QCustomPlot::registerGraph</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> *</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3999" column="8" bodyfile="qcustomplot.cpp" bodystart="16225" bodyend="16240"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1afbd4010b2e3f364c8d512691b2a1640a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::registerItem</definition>
        <argsstring>(QCPAbstractItem *item)</argsstring>
        <name>registerItem</name>
        <qualifiedname>QCustomPlot::registerItem</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4000" column="8" bodyfile="qcustomplot.cpp" bodystart="16252" bodyend="16269"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a7f1ca67a66d37b6d260a0b93de08f3bd" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::updateLayerIndices</definition>
        <argsstring>() const</argsstring>
        <name>updateLayerIndices</name>
        <qualifiedname>QCustomPlot::updateLayerIndices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4001" column="8" bodyfile="qcustomplot.cpp" bodystart="16277" bodyend="16281"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a998b3a93d7f08d42ce3ec4eab43afc03" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref> *</type>
        <definition>QCPLayerable * QCustomPlot::layerableAt</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable, QVariant *selectionDetails=nullptr) const</argsstring>
        <name>layerableAt</name>
        <qualifiedname>QCustomPlot::layerableAt</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <param>
          <type>QVariant *</type>
          <declname>selectionDetails</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4002" column="16" bodyfile="qcustomplot.cpp" bodystart="16298" bodyend="16308"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a3f9d0033397b309343a6df8e87fb46c9" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref> * &gt;</type>
        <definition>QList&lt; QCPLayerable * &gt; QCustomPlot::layerableListAt</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable, QList&lt; QVariant &gt; *selectionDetails=nullptr) const</argsstring>
        <name>layerableListAt</name>
        <qualifiedname>QCustomPlot::layerableListAt</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <param>
          <type>QList&lt; QVariant &gt; *</type>
          <declname>selectionDetails</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4003" column="9" bodyfile="qcustomplot.cpp" bodystart="16329" bodyend="16350"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a05dd52438cee4353b18c1e53a439008d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::drawBackground</definition>
        <argsstring>(QCPPainter *painter)</argsstring>
        <name>drawBackground</name>
        <qualifiedname>QCustomPlot::drawBackground</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4004" column="8" bodyfile="qcustomplot.cpp" bodystart="15779" bodyend="15799"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a2685341f7242c3882f4cc5e379308d71" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::setupPaintBuffers</definition>
        <argsstring>()</argsstring>
        <name>setupPaintBuffers</name>
        <qualifiedname>QCustomPlot::setupPaintBuffers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4005" column="8" bodyfile="qcustomplot.cpp" bodystart="15820" bodyend="15856"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a943b57596a1adf7f0e75c3b50e407ae6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_abstract_paint_buffer" kindref="compound">QCPAbstractPaintBuffer</ref> *</type>
        <definition>QCPAbstractPaintBuffer * QCustomPlot::createPaintBuffer</definition>
        <argsstring>()</argsstring>
        <name>createPaintBuffer</name>
        <qualifiedname>QCustomPlot::createPaintBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4006" column="26" bodyfile="qcustomplot.cpp" bodystart="15866" bodyend="15880"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1ad452b582348c8e99462d83fe1cd0279b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::hasInvalidatedPaintBuffers</definition>
        <argsstring>()</argsstring>
        <name>hasInvalidatedPaintBuffers</name>
        <qualifiedname>QCustomPlot::hasInvalidatedPaintBuffers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method returns whether any of the paint buffers held by this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance are invalidated.</para>
<para>If any buffer is invalidated, a partial replot (<ref refid="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180" kindref="member">QCPLayer::replot</ref>) is not allowed and always causes a full replot (<ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">QCustomPlot::replot</ref>) of all layers. This is the case when for example the layer order has changed, new layers were added or removed, layer modes were changed (<ref refid="class_q_c_p_layer_1a938d57b04f4e4c23cedf1711f983919b" kindref="member">QCPLayer::setMode</ref>), or layerables were added or removed.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_paint_buffer_1ae4c7dc70dfc66be2879ce297b2b3d67f" kindref="member">QCPAbstractPaintBuffer::setInvalidated</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4007" column="8" bodyfile="qcustomplot.cpp" bodystart="15893" bodyend="15901"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1a8954c4667c51070ff4e9b02d858fd190" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCustomPlot::setupOpenGl</definition>
        <argsstring>()</argsstring>
        <name>setupOpenGl</name>
        <qualifiedname>QCustomPlot::setupOpenGl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4008" column="8" bodyfile="qcustomplot.cpp" bodystart="15916" bodyend="15961"/>
      </memberdef>
      <memberdef kind="function" id="class_q_custom_plot_1aaa3073362074581a7b5905726b4a0067" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCustomPlot::freeOpenGl</definition>
        <argsstring>()</argsstring>
        <name>freeOpenGl</name>
        <qualifiedname>QCustomPlot::freeOpenGl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4009" column="8" bodyfile="qcustomplot.cpp" bodystart="15974" bodyend="15981"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The central class of the library. This is the QWidget which displays the plot and interacts with the user. </para>
    </briefdescription>
    <detaileddescription>
<para>For tutorials on how to use <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>, see the website<linebreak/>
<ulink url="http://www.qcustomplot.com/">http://www.qcustomplot.com/</ulink> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QWidget</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="14" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="11">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="17">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QObject</label>
      </node>
      <node id="2">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="3753" column="1" bodyfile="qcustomplot.h" bodystart="3754" bodyend="4018"/>
    <listofallmembers>
      <member refid="class_q_custom_plot_1a2836a46e31d5aee174ae054c0aa6580b" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>addGraph</name></member>
      <member refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>addLayer</name></member>
      <member refid="class_q_custom_plot_1aa3a37a057f64a7587436dabe98c592e9" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>afterLayout</name></member>
      <member refid="class_q_custom_plot_1a6f4fa624af060bc5919c5f266cf426a0" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>afterReplot</name></member>
      <member refid="class_q_custom_plot_1a631762eb183aceecee73d30e108641ee" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>antialiasedElements</name></member>
      <member refid="class_q_custom_plot_1ac4b87de13eaceadc8db5a66654197689" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>autoAddPlottableToLegend</name></member>
      <member refid="class_q_custom_plot_1abf635f8b56ab5c16d5de9f358543e82b" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>axisClick</name></member>
      <member refid="class_q_custom_plot_1a6df35357460181a72da3e93d600f5256" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>axisDoubleClick</name></member>
      <member refid="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>axisRect</name></member>
      <member refid="class_q_custom_plot_1a4a08842fc3e9ba6bed83aa410c5c5ba5" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>axisRectAt</name></member>
      <member refid="class_q_custom_plot_1a8f85940aaac50efb466287d9d2d04ec6" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>axisRectCount</name></member>
      <member refid="class_q_custom_plot_1a12af771429e2d7e313c8c5d5fca068fe" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>axisRects</name></member>
      <member refid="class_q_custom_plot_1a8b46607021c463c94709d3504951cb47" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>axisRemoved</name></member>
      <member refid="class_q_custom_plot_1a5b9bbc838cb856e31b39c050fad49f9a" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>background</name></member>
      <member refid="class_q_custom_plot_1aac96f3a0f5070228ed13602976886b80" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>backgroundScaled</name></member>
      <member refid="class_q_custom_plot_1af8f1ebfdbf48d7c49f95136475d55b14" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>backgroundScaledMode</name></member>
      <member refid="class_q_custom_plot_1a0cd30e29b73efd6afe096e44bc5956f5" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>beforeReplot</name></member>
      <member refid="class_q_custom_plot_1a53d35abe0f576f9838cde5d0bee47657" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>bufferDevicePixelRatio</name></member>
      <member refid="class_q_custom_plot_1ab0f3abff2d2f7df3668b5836f39207fa" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>clearGraphs</name></member>
      <member refid="class_q_custom_plot_1abdfd07d4f0591d0cf967f85013fd3645" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>clearItems</name></member>
      <member refid="class_q_custom_plot_1a9a409bb3201878adb7ffba1c89c4e004" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>clearPlottables</name></member>
      <member refid="class_q_custom_plot_1a943b57596a1adf7f0e75c3b50e407ae6" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>createPaintBuffer</name></member>
      <member refid="class_q_custom_plot_1a0421d647f420b0b4c57aec1708857af5" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>currentLayer</name></member>
      <member refid="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>deselectAll</name></member>
      <member refid="class_q_custom_plot_1ad7a7d878bf050f101a43008e7d8fdb52" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>draw</name></member>
      <member refid="class_q_custom_plot_1a05dd52438cee4353b18c1e53a439008d" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>drawBackground</name></member>
      <member refid="class_q_custom_plot_1aaa3073362074581a7b5905726b4a0067" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>freeOpenGl</name></member>
      <member refid="class_q_custom_plot_1a6ecae130f684b25276fb47bd3a5875c6" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>graph</name></member>
      <member refid="class_q_custom_plot_1aac190865a67f19af3fdf2136774997af" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>graph</name></member>
      <member refid="class_q_custom_plot_1a5e1787cdde868c4d3790f9ebc8207d90" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>graphCount</name></member>
      <member refid="class_q_custom_plot_1ad452b582348c8e99462d83fe1cd0279b" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>hasInvalidatedPaintBuffers</name></member>
      <member refid="class_q_custom_plot_1af0b57f35646079f93fa6161a65b36109" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>hasItem</name></member>
      <member refid="class_q_custom_plot_1a72cefbfbb9e699940e37be605bd9c51e" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>hasPlottable</name></member>
      <member refid="class_q_custom_plot_1a2c78c5fd2943c148ab76652801d3f2dc" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>interactions</name></member>
      <member refid="class_q_custom_plot_1ac042f2e78edd228ccf2f26b7fe215239" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>item</name></member>
      <member refid="class_q_custom_plot_1a12eb2a283cf10a8a9176c01c0443e83e" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>item</name></member>
      <member refid="class_q_custom_plot_1a89f7565773c5d59347a7f2262a737844" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>itemAt</name></member>
      <member refid="class_q_custom_plot_1ac08578e0e6c059c83a8d340ba0038e8e" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>itemAt</name></member>
      <member refid="class_q_custom_plot_1ae16b51f52d2b7aebbc7e3e74e6ff2e4b" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>itemClick</name></member>
      <member refid="class_q_custom_plot_1a16025daf0341f9362be3080e404424c2" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>itemCount</name></member>
      <member refid="class_q_custom_plot_1ac83aa9f5a3e9bb3efc9cdc763dcd42a6" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>itemDoubleClick</name></member>
      <member refid="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>layer</name></member>
      <member refid="class_q_custom_plot_1acbb570f4c24306e7c2324d40bfe157c2" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>layer</name></member>
      <member refid="class_q_custom_plot_1a998b3a93d7f08d42ce3ec4eab43afc03" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>layerableAt</name></member>
      <member refid="class_q_custom_plot_1a3f9d0033397b309343a6df8e87fb46c9" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>layerableListAt</name></member>
      <member refid="class_q_custom_plot_1afa45d61e65292026f4c58c9c88c2cef0" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>layerCount</name></member>
      <member refid="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>LayerInsertMode</name></member>
      <member refid="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>layoutElementAt</name></member>
      <member refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>legend</name></member>
      <member refid="class_q_custom_plot_1a79cff0baafbca10a3aaf694d2d3b9ab3" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>legendClick</name></member>
      <member refid="class_q_custom_plot_1a0250f835c044521df1619b132288bca7" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>legendDoubleClick</name></member>
      <member refid="class_q_custom_plot_1a9d173454555021c9ffd4f675c4d9037a" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>legendRemoved</name></member>
      <member refid="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7a062b0b7825650b432a713c0df6742d41" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>limAbove</name></member>
      <member refid="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7aee39cf650cd24e68552da0b697ce4a93" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>limBelow</name></member>
      <member refid="class_q_custom_plot_1aa333200629256830e273873b582a5524" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mAntialiasedElements</name></member>
      <member refid="class_q_custom_plot_1aaf3ea6a4cb04d35a149cc9a0cdac3394" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mAutoAddPlottableToLegend</name></member>
      <member refid="class_q_custom_plot_1a3aef5de4ac012178e3293248e9c63737" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mBackgroundBrush</name></member>
      <member refid="class_q_custom_plot_1ae8f4677399324a78c5f8dbfb95a34f90" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mBackgroundPixmap</name></member>
      <member refid="class_q_custom_plot_1a62fe584b20680b1b2e1c7efb5c5416a5" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mBackgroundScaled</name></member>
      <member refid="class_q_custom_plot_1ab82e8a5e3ad6b486f95d6da8bf49e9aa" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mBackgroundScaledMode</name></member>
      <member refid="class_q_custom_plot_1a63a40c57a2d89eea27b90b62cc4eee1f" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mBufferDevicePixelRatio</name></member>
      <member refid="class_q_custom_plot_1aa27569c92e74395af10151357d268628" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mCurrentLayer</name></member>
      <member refid="class_q_custom_plot_1adaf8d407d72a725169d7dbed2ee386bb" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mGraphs</name></member>
      <member refid="class_q_custom_plot_1a968a01cd4077d63aecde1aef1db057fc" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>minimumSizeHint</name></member>
      <member refid="class_q_custom_plot_1ad717377ceba7493b4b32f0bcbbdf1895" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mInteractions</name></member>
      <member refid="class_q_custom_plot_1a6a93905372326e31e98d6c3bc8953ec8" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mItems</name></member>
      <member refid="class_q_custom_plot_1a72ee313041b873d76c198793ce7e6c37" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mLayers</name></member>
      <member refid="class_q_custom_plot_1a243867f445d2f4e35e00add2f589e1da" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mMouseEventLayerable</name></member>
      <member refid="class_q_custom_plot_1ad604958ef16fc022c474521a08d88a2d" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mMouseEventLayerableDetails</name></member>
      <member refid="class_q_custom_plot_1ad2108936f001a8be5974b0b6ff13dae3" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mMouseHasMoved</name></member>
      <member refid="class_q_custom_plot_1ac57090da95056ae4dd67be67adfa85bd" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mMousePressPos</name></member>
      <member refid="class_q_custom_plot_1adf81640dbf365bd4fa22494e3e504e70" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mMouseSignalLayerable</name></member>
      <member refid="class_q_custom_plot_1a2f313604bb22781633137915f3c100e6" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mMouseSignalLayerableDetails</name></member>
      <member refid="class_q_custom_plot_1a0e97e701c5671e7e463d2ce0211d0f8a" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mMultiSelectModifier</name></member>
      <member refid="class_q_custom_plot_1ac83df968435f6b8ec79f2993ab9124e8" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mNoAntialiasingOnDrag</name></member>
      <member refid="class_q_custom_plot_1a2b6ebcad00a90ba07f146cefcd4293da" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mNotAntialiasedElements</name></member>
      <member refid="class_q_custom_plot_1a0841dbea13bd120d20e3f0cc36767ff9" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mOpenGl</name></member>
      <member refid="class_q_custom_plot_1adbf005715d5f8550511819a4baf841fb" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mOpenGlAntialiasedElementsBackup</name></member>
      <member refid="class_q_custom_plot_1ab1692469dde841080fa33719533bf2b7" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mOpenGlCacheLabelsBackup</name></member>
      <member refid="class_q_custom_plot_1aacafac2b2280b6a868a4b734273a394c" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mOpenGlMultisamples</name></member>
      <member refid="class_q_custom_plot_1a9b232142c64fcf273a953ee08e5b90e9" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>mouseDoubleClick</name></member>
      <member refid="class_q_custom_plot_1a344075e6e80ed6d575c79b81694abb8a" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>mouseDoubleClickEvent</name></member>
      <member refid="class_q_custom_plot_1a742ca4f94688bed2a685fd8a56ce5704" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>mouseMove</name></member>
      <member refid="class_q_custom_plot_1ae7abdc93b26d2ad4632c1ab75ae5b46f" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>mouseMoveEvent</name></member>
      <member refid="class_q_custom_plot_1aca75bf9afb5dd19349c375de2a87a051" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>mousePress</name></member>
      <member refid="class_q_custom_plot_1aac0a7296a6031dc667c01c1abd4ecc6b" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>mousePressEvent</name></member>
      <member refid="class_q_custom_plot_1ac8dc0ee6bb98e923c00b4ebafbe6134d" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>mouseRelease</name></member>
      <member refid="class_q_custom_plot_1adc24846f52199e5a9bc35c387a6ce68d" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>mouseReleaseEvent</name></member>
      <member refid="class_q_custom_plot_1ac80a14206f99304a91d2aa55775ec3ff" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>mouseWheel</name></member>
      <member refid="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>moveLayer</name></member>
      <member refid="class_q_custom_plot_1a57b270b1e3990e0d1b9fb39b137d5a5d" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mPaintBuffers</name></member>
      <member refid="class_q_custom_plot_1ac97298756882a0eecd98151679850ac1" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mPlotLayout</name></member>
      <member refid="class_q_custom_plot_1a62bf8e4e7f8d23fc1e9301ba0148269f" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mPlottables</name></member>
      <member refid="class_q_custom_plot_1aa184197a6101a9cc5807469e1d006c9e" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mPlottingHints</name></member>
      <member refid="class_q_custom_plot_1acedeef316dfcde835b8ea0112cec2a77" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mReplotQueued</name></member>
      <member refid="class_q_custom_plot_1a0279737e4f10ed92c566968befe98529" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mReplotTime</name></member>
      <member refid="class_q_custom_plot_1a8e7659163d63e18ba42036d6cb3aa920" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mReplotTimeAverage</name></member>
      <member refid="class_q_custom_plot_1ab30daeca6612c3948afd368dce5f1c39" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mReplotting</name></member>
      <member refid="class_q_custom_plot_1a081bf046501d52642dc6d7e3bdb97d57" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mScaledBackgroundPixmap</name></member>
      <member refid="class_q_custom_plot_1a4827bc84ef5ce52dfbf9ff630ed1b276" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mSelectionRect</name></member>
      <member refid="class_q_custom_plot_1abe04c5def373cc4fede8de20542ca3f2" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mSelectionRectMode</name></member>
      <member refid="class_q_custom_plot_1abc36e12dd0482117ad810a800c847722" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mSelectionTolerance</name></member>
      <member refid="class_q_custom_plot_1a28182402ed11609c9a429f0788162d18" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>multiSelectModifier</name></member>
      <member refid="class_q_custom_plot_1ac0a7c38a715526c257cff95774f83ab6" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>mViewport</name></member>
      <member refid="class_q_custom_plot_1aca3f01f903fb250a3dd27104d92830be" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>noAntialiasingOnDrag</name></member>
      <member refid="class_q_custom_plot_1a75571bc5b2167e83def132fc993091b3" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>notAntialiasedElements</name></member>
      <member refid="class_q_custom_plot_1abe5556ac80dc0140fd57f2b2f94a1f0e" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>openGl</name></member>
      <member refid="class_q_custom_plot_1a8068b368e5813065ee0f4cf7c6d21330" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>paintEvent</name></member>
      <member refid="class_q_custom_plot_1af1a1f1f571237deb7c2bd34a5e9f018f" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>plotLayout</name></member>
      <member refid="class_q_custom_plot_1a32de81ff53e263e785b83b52ecd99d6f" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>plottable</name></member>
      <member refid="class_q_custom_plot_1adea38bdc660da9412ba69fb939031567" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>plottable</name></member>
      <member refid="class_q_custom_plot_1a545c0e63e13a4fbac3d5acbd8a03ef6f" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>plottableAt</name></member>
      <member refid="class_q_custom_plot_1a37f1ef93533c5b91054dc23998c669e1" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>plottableAt</name></member>
      <member refid="class_q_custom_plot_1af5fe78b8bc9e4e96df921612837fd4fd" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>plottableClick</name></member>
      <member refid="class_q_custom_plot_1a5f4f15991c14bf9ad659bb2a19dfbed4" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>plottableCount</name></member>
      <member refid="class_q_custom_plot_1a86a3ab7263c9c4e008e70d6c5fce9fbd" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>plottableDoubleClick</name></member>
      <member refid="class_q_custom_plot_1ac724f4075822f74f7b676a790095b877" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>plottingHints</name></member>
      <member refid="class_q_custom_plot_1ac13c10fff6613e3e80e13c787b010838" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>processPointSelection</name></member>
      <member refid="class_q_custom_plot_1ac10849411e1d0e858ea7f29c8ade364c" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>processRectSelection</name></member>
      <member refid="class_q_custom_plot_1a5508a207dcc279f316142f96d984bba3" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>processRectZoom</name></member>
      <member refid="class_q_custom_plot_1a93e962f2e677e31ecc575bb884e46adf" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>QCPAbstractItem</name></member>
      <member refid="class_q_custom_plot_1a53cf0e76aca814550c796fed79e345d6" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>QCPAbstractPlottable</name></member>
      <member refid="class_q_custom_plot_1af123edeca169ec7a31958a1d714e1a8a" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>QCPAxis</name></member>
      <member refid="class_q_custom_plot_1acbf20ecb140f66c5fd1bc64ae0762990" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>QCPAxisRect</name></member>
      <member refid="class_q_custom_plot_1ad0c52e327d94c699d415fd61f930700a" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>QCPGraph</name></member>
      <member refid="class_q_custom_plot_1a5dbf96bf7664c1b6fce49063eeea6eef" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>QCPLayer</name></member>
      <member refid="class_q_custom_plot_1a8429035e7adfbd7f05805a6530ad5e3b" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>QCPLegend</name></member>
      <member refid="class_q_custom_plot_1a3c1c171f620ef0ea4ae3dbb2e6a0209a" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>QCustomPlot</name></member>
      <member refid="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>RefreshPriority</name></member>
      <member refid="class_q_custom_plot_1acfc01230bddaea4f1782e4aa7d130af6" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>registerGraph</name></member>
      <member refid="class_q_custom_plot_1afbd4010b2e3f364c8d512691b2a1640a" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>registerItem</name></member>
      <member refid="class_q_custom_plot_1aeba7733bb9fadfb5a375b3f40de9e58a" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>registerPlottable</name></member>
      <member refid="class_q_custom_plot_1a903561be895fb6528a770d66ac5e6713" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>removeGraph</name></member>
      <member refid="class_q_custom_plot_1a9554b3d2d5b10c0f884bd4010b6c192c" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>removeGraph</name></member>
      <member refid="class_q_custom_plot_1ae04446557292551e8fb6e2c106e1848d" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>removeItem</name></member>
      <member refid="class_q_custom_plot_1abcfdda3d601c0441cab136137d715dea" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>removeItem</name></member>
      <member refid="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>removeLayer</name></member>
      <member refid="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>removePlottable</name></member>
      <member refid="class_q_custom_plot_1afc210e0021480f8119bccf37839dbcc8" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>removePlottable</name></member>
      <member refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>replot</name></member>
      <member refid="class_q_custom_plot_1ad582e335061a25da006acc58a4009ccc" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>replotTime</name></member>
      <member refid="class_q_custom_plot_1ad86528f2cee6c7e446dea4a6e8839935" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>rescaleAxes</name></member>
      <member refid="class_q_custom_plot_1af5b69dc6a431562ecdd1d0718bcbdf70" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>resizeEvent</name></member>
      <member refid="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39aa6eda645ccf1a60635df3e8b71ea6ae2" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>rpImmediateRefresh</name></member>
      <member refid="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39acd6f1e590ea775d1ddee666428077f3e" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>rpQueuedRefresh</name></member>
      <member refid="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a019650c6ddf308f97e811fbfff207a8f" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>rpQueuedReplot</name></member>
      <member refid="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a49666a5854a68dbcca8b277b03331260" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>rpRefreshHint</name></member>
      <member refid="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>saveBmp</name></member>
      <member refid="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>saveJpg</name></member>
      <member refid="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>savePdf</name></member>
      <member refid="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>savePng</name></member>
      <member refid="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>saveRastered</name></member>
      <member refid="class_q_custom_plot_1a7e6b07792b1cb2c31681596582d14dbe" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>selectedAxes</name></member>
      <member refid="class_q_custom_plot_1ad3547aded026d8a9ae6ef13a69080d06" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>selectedGraphs</name></member>
      <member refid="class_q_custom_plot_1afda487bcf2d6cf1a57173d82495e29ba" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>selectedItems</name></member>
      <member refid="class_q_custom_plot_1ac87624ddff1cbf4064781a8e8ae321c4" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>selectedLegends</name></member>
      <member refid="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>selectedPlottables</name></member>
      <member refid="class_q_custom_plot_1a500c64a109bc773c973ad274f2fa4190" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>selectionChangedByUser</name></member>
      <member refid="class_q_custom_plot_1ad7df2bcbba307e644db383b449e31efd" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>selectionRect</name></member>
      <member refid="class_q_custom_plot_1a6e53c402de2770a978dffa5584c05b27" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>selectionRectMode</name></member>
      <member refid="class_q_custom_plot_1a5441d11013afeaf4b8f2ea06e8624a25" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>selectionTolerance</name></member>
      <member refid="class_q_custom_plot_1aeef813bcf7efab8e765f9f87ec454691" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setAntialiasedElement</name></member>
      <member refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setAntialiasedElements</name></member>
      <member refid="class_q_custom_plot_1ad8858410c2db47b7104040a3aa61c3fc" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setAutoAddPlottableToLegend</name></member>
      <member refid="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setBackground</name></member>
      <member refid="class_q_custom_plot_1a8513971d6aa24d8b0d6a68d45b542130" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setBackground</name></member>
      <member refid="class_q_custom_plot_1a8ed256cf467bfa7ba1f9feaae62c3bd0" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setBackground</name></member>
      <member refid="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setBackgroundScaled</name></member>
      <member refid="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setBackgroundScaledMode</name></member>
      <member refid="class_q_custom_plot_1a159162653ad6f8b8bf21263ba5787215" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setBufferDevicePixelRatio</name></member>
      <member refid="class_q_custom_plot_1a73a6dc47c653bb6f8f030abca5a11852" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setCurrentLayer</name></member>
      <member refid="class_q_custom_plot_1a23a4d3cadad1a0063c5fe19aac5659e6" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setCurrentLayer</name></member>
      <member refid="class_q_custom_plot_1a422bf1bc6d56dac75a3d805d9a65902c" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setInteraction</name></member>
      <member refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setInteractions</name></member>
      <member refid="class_q_custom_plot_1a8fc96e3b5138a06759a2a90c166df516" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setMultiSelectModifier</name></member>
      <member refid="class_q_custom_plot_1a775bdcb6329d44701aeaa6135b0e5265" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setNoAntialiasingOnDrag</name></member>
      <member refid="class_q_custom_plot_1afc657938a707c890e449ae89203a076d" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setNotAntialiasedElement</name></member>
      <member refid="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setNotAntialiasedElements</name></member>
      <member refid="class_q_custom_plot_1a7db1adc09016329f3aef7c60da935789" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setOpenGl</name></member>
      <member refid="class_q_custom_plot_1a3b7c97bb6c16464e9e15190c07abe9a9" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setPlottingHint</name></member>
      <member refid="class_q_custom_plot_1a94a33cbdadbbac5934843508bcfc210d" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setPlottingHints</name></member>
      <member refid="class_q_custom_plot_1a0c09f96df15faa4799ad7051bb16cf33" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setSelectionRect</name></member>
      <member refid="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setSelectionRectMode</name></member>
      <member refid="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setSelectionTolerance</name></member>
      <member refid="class_q_custom_plot_1a8954c4667c51070ff4e9b02d858fd190" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>setupOpenGl</name></member>
      <member refid="class_q_custom_plot_1a2685341f7242c3882f4cc5e379308d71" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>setupPaintBuffers</name></member>
      <member refid="class_q_custom_plot_1a3f9bc4b939dd8aaba9339fd09f273fc4" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>setViewport</name></member>
      <member refid="class_q_custom_plot_1ac9d6fe101e082daf756903b11f6e6213" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>sizeHint</name></member>
      <member refid="class_q_custom_plot_1a1be68d5c0f1e086d6374d1340a193fb9" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>toPainter</name></member>
      <member refid="class_q_custom_plot_1aabb974d71ce96c137dc04eb6eab844fe" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>toPixmap</name></member>
      <member refid="class_q_custom_plot_1a7f1ca67a66d37b6d260a0b93de08f3bd" prot="protected" virt="non-virtual"><scope>QCustomPlot</scope><name>updateLayerIndices</name></member>
      <member refid="class_q_custom_plot_1a6e6693e2c249f65437382ffd93405e04" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>updateLayout</name></member>
      <member refid="class_q_custom_plot_1a19842409b18f556b256d05e97fffc670" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>viewport</name></member>
      <member refid="class_q_custom_plot_1a7848c9ac8be60bbd8fcea9b53be543c5" prot="protected" virt="virtual"><scope>QCustomPlot</scope><name>wheelEvent</name></member>
      <member refid="class_q_custom_plot_1a968b5ac86c181a49bba78c2b62a80cb3" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>xAxis</name></member>
      <member refid="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>xAxis2</name></member>
      <member refid="class_q_custom_plot_1af6fea5679725b152c14facd920b19367" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>yAxis</name></member>
      <member refid="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7" prot="public" virt="non-virtual"><scope>QCustomPlot</scope><name>yAxis2</name></member>
      <member refid="class_q_custom_plot_1a6a10e600c05635e9a314597a8a5c94e0" prot="public" virt="virtual"><scope>QCustomPlot</scope><name>~QCustomPlot</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
