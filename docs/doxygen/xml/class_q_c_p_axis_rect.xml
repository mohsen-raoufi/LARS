<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_axis_rect" kind="class" language="C++" prot="public">
    <compoundname>QCPAxisRect</compoundname>
    <basecompoundref refid="class_q_c_p_layout_element" prot="public" virt="non-virtual">QCPLayoutElement</basecompoundref>
    <derivedcompoundref refid="class_q_c_p_color_scale_axis_rect_private" prot="public" virt="non-virtual">QCPColorScaleAxisRectPrivate</derivedcompoundref>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1a5748e1a37f63c428e38b0a7724b46259" prot="protected" static="no" mutable="no">
        <type>QBrush</type>
        <definition>QBrush QCPAxisRect::mBackgroundBrush</definition>
        <argsstring></argsstring>
        <name>mBackgroundBrush</name>
        <qualifiedname>QCPAxisRect::mBackgroundBrush</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4968" column="10" bodyfile="qcustomplot.h" bodystart="4968" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1a38fb1a15f43228a0c124553649303722" prot="protected" static="no" mutable="no">
        <type>QPixmap</type>
        <definition>QPixmap QCPAxisRect::mBackgroundPixmap</definition>
        <argsstring></argsstring>
        <name>mBackgroundPixmap</name>
        <qualifiedname>QCPAxisRect::mBackgroundPixmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4969" column="11" bodyfile="qcustomplot.h" bodystart="4969" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1aa74b9415598d59b49290e41e42d7ee27" prot="protected" static="no" mutable="no">
        <type>QPixmap</type>
        <definition>QPixmap QCPAxisRect::mScaledBackgroundPixmap</definition>
        <argsstring></argsstring>
        <name>mScaledBackgroundPixmap</name>
        <qualifiedname>QCPAxisRect::mScaledBackgroundPixmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4970" column="11" bodyfile="qcustomplot.h" bodystart="4970" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1a5ad835f0fae5d7cc5ada9e063641dbf1" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPAxisRect::mBackgroundScaled</definition>
        <argsstring></argsstring>
        <name>mBackgroundScaled</name>
        <qualifiedname>QCPAxisRect::mBackgroundScaled</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4971" column="8" bodyfile="qcustomplot.h" bodystart="4971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1a859fd368e794663e346b4f53f35078e9" prot="protected" static="no" mutable="no">
        <type>Qt::AspectRatioMode</type>
        <definition>Qt::AspectRatioMode QCPAxisRect::mBackgroundScaledMode</definition>
        <argsstring></argsstring>
        <name>mBackgroundScaledMode</name>
        <qualifiedname>QCPAxisRect::mBackgroundScaledMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4972" column="23" bodyfile="qcustomplot.h" bodystart="4972" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1a255240399e0fd24baad80cbbe46f698a" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_layout_inset" kindref="compound">QCPLayoutInset</ref> *</type>
        <definition>QCPLayoutInset* QCPAxisRect::mInsetLayout</definition>
        <argsstring></argsstring>
        <name>mInsetLayout</name>
        <qualifiedname>QCPAxisRect::mInsetLayout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4973" column="18" bodyfile="qcustomplot.h" bodystart="4973" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1aa9f107f66ca3469ad50ee6cea7c9e237" prot="protected" static="no" mutable="no">
        <type>Qt::Orientations</type>
        <definition>Qt::Orientations QCPAxisRect::mRangeDrag</definition>
        <argsstring></argsstring>
        <name>mRangeDrag</name>
        <qualifiedname>QCPAxisRect::mRangeDrag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4974" column="20" bodyfile="qcustomplot.h" bodystart="4974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1a215eff671d48df2edccc36e7f976f28c" prot="protected" static="no" mutable="no">
        <type>Qt::Orientations</type>
        <definition>Qt::Orientations QCPAxisRect::mRangeZoom</definition>
        <argsstring></argsstring>
        <name>mRangeZoom</name>
        <qualifiedname>QCPAxisRect::mRangeZoom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4974" column="31" bodyfile="qcustomplot.h" bodystart="4974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1abd4f1d854b41a9c6730f3a3d605c42af" prot="protected" static="no" mutable="no">
        <type>QList&lt; QPointer&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> &gt; &gt;</type>
        <definition>QList&lt;QPointer&lt;QCPAxis&gt; &gt; QCPAxisRect::mRangeDragHorzAxis</definition>
        <argsstring></argsstring>
        <name>mRangeDragHorzAxis</name>
        <qualifiedname>QCPAxisRect::mRangeDragHorzAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4975" column="9" bodyfile="qcustomplot.h" bodystart="4975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1a3b0a86e5bb136a458d7bc20773e45853" prot="protected" static="no" mutable="no">
        <type>QList&lt; QPointer&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> &gt; &gt;</type>
        <definition>QList&lt;QPointer&lt;QCPAxis&gt; &gt; QCPAxisRect::mRangeDragVertAxis</definition>
        <argsstring></argsstring>
        <name>mRangeDragVertAxis</name>
        <qualifiedname>QCPAxisRect::mRangeDragVertAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4975" column="28" bodyfile="qcustomplot.h" bodystart="4975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1aa35eeb02f68b63f2069fcc80c9334b91" prot="protected" static="no" mutable="no">
        <type>QList&lt; QPointer&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> &gt; &gt;</type>
        <definition>QList&lt;QPointer&lt;QCPAxis&gt; &gt; QCPAxisRect::mRangeZoomHorzAxis</definition>
        <argsstring></argsstring>
        <name>mRangeZoomHorzAxis</name>
        <qualifiedname>QCPAxisRect::mRangeZoomHorzAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4976" column="9" bodyfile="qcustomplot.h" bodystart="4976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1aafb0e243294c158668499fd62cee057c" prot="protected" static="no" mutable="no">
        <type>QList&lt; QPointer&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> &gt; &gt;</type>
        <definition>QList&lt;QPointer&lt;QCPAxis&gt; &gt; QCPAxisRect::mRangeZoomVertAxis</definition>
        <argsstring></argsstring>
        <name>mRangeZoomVertAxis</name>
        <qualifiedname>QCPAxisRect::mRangeZoomVertAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4976" column="28" bodyfile="qcustomplot.h" bodystart="4976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1ad08d0250ed7b99de387d0ea6c7fd4dc1" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double QCPAxisRect::mRangeZoomFactorHorz</definition>
        <argsstring></argsstring>
        <name>mRangeZoomFactorHorz</name>
        <qualifiedname>QCPAxisRect::mRangeZoomFactorHorz</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4977" column="10" bodyfile="qcustomplot.h" bodystart="4977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1a32f063629581d5bf82b12769940b34ad" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double QCPAxisRect::mRangeZoomFactorVert</definition>
        <argsstring></argsstring>
        <name>mRangeZoomFactorVert</name>
        <qualifiedname>QCPAxisRect::mRangeZoomFactorVert</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4977" column="31" bodyfile="qcustomplot.h" bodystart="4977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1a274aef08c4de084a3f26c3e92fac3a79" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref> &gt;</type>
        <definition>QList&lt;QCPRange&gt; QCPAxisRect::mDragStartHorzRange</definition>
        <argsstring></argsstring>
        <name>mDragStartHorzRange</name>
        <qualifiedname>QCPAxisRect::mDragStartHorzRange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4980" column="9" bodyfile="qcustomplot.h" bodystart="4980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1ab362ee8f71a156d812a1ea793a1e42cb" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref> &gt;</type>
        <definition>QList&lt;QCPRange&gt; QCPAxisRect::mDragStartVertRange</definition>
        <argsstring></argsstring>
        <name>mDragStartVertRange</name>
        <qualifiedname>QCPAxisRect::mDragStartVertRange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4980" column="29" bodyfile="qcustomplot.h" bodystart="4980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1aa4a24f76360cfebe1bcf17a77fa7521b" prot="protected" static="no" mutable="no">
        <type>QCP::AntialiasedElements</type>
        <definition>QCP::AntialiasedElements QCPAxisRect::mAADragBackup</definition>
        <argsstring></argsstring>
        <name>mAADragBackup</name>
        <qualifiedname>QCPAxisRect::mAADragBackup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4981" column="28" bodyfile="qcustomplot.h" bodystart="4981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1a6fcb12e052e276d57efbb128be31d6f5" prot="protected" static="no" mutable="no">
        <type>QCP::AntialiasedElements</type>
        <definition>QCP::AntialiasedElements QCPAxisRect::mNotAADragBackup</definition>
        <argsstring></argsstring>
        <name>mNotAADragBackup</name>
        <qualifiedname>QCPAxisRect::mNotAADragBackup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4981" column="42" bodyfile="qcustomplot.h" bodystart="4981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1ab49a6698194cf0e9e38a1d734c0888a8" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPAxisRect::mDragging</definition>
        <argsstring></argsstring>
        <name>mDragging</name>
        <qualifiedname>QCPAxisRect::mDragging</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4982" column="8" bodyfile="qcustomplot.h" bodystart="4982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_rect_1afe7a24d2a2bea98fc552fa826350ba81" prot="protected" static="no" mutable="no">
        <type>QHash&lt; <ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a" kindref="member">QCPAxis::AxisType</ref>, QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt; &gt;</type>
        <definition>QHash&lt;QCPAxis::AxisType, QList&lt;QCPAxis*&gt; &gt; QCPAxisRect::mAxes</definition>
        <argsstring></argsstring>
        <name>mAxes</name>
        <qualifiedname>QCPAxisRect::mAxes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4983" column="9" bodyfile="qcustomplot.h" bodystart="4983" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_c_p_axis_rect_1a1cdf9df76adcfae45261690aa0ca2198" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCustomPlot</definition>
        <argsstring></argsstring>
        <name>QCustomPlot</name>
        <qualifiedname>QCPAxisRect::QCustomPlot</qualifiedname>
        <param>
          <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5003" column="16" bodyfile="qcustomplot.h" bodystart="5003" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a60b31dece805462c1b82eea2e69ba042" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPAxisRect::QCPAxisRect</definition>
        <argsstring>(QCustomPlot *parentPlot, bool setupDefaultAxes=true)</argsstring>
        <name>QCPAxisRect</name>
        <qualifiedname>QCPAxisRect::QCPAxisRect</qualifiedname>
        <param>
          <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> *</type>
          <declname>parentPlot</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>setupDefaultAxes</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> instance and sets default values. An axis is added for each of the four sides, the top and right axes are set invisible initially. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4898" column="12" bodyfile="qcustomplot.cpp" bodystart="17536" bodyend="17578"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a1e8a674908e23d107aaf275227c54aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPAxisRect::~QCPAxisRect</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>~QCPAxisRect</name>
        <qualifiedname>QCPAxisRect::~QCPAxisRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4899" column="11" bodyfile="qcustomplot.cpp" bodystart="17580" bodyend="17587"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a572deec9c9a4d5987d5c5f78521991e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPixmap</type>
        <definition>QPixmap QCPAxisRect::background</definition>
        <argsstring>() const</argsstring>
        <name>background</name>
        <qualifiedname>QCPAxisRect::background</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4902" column="11" bodyfile="qcustomplot.h" bodystart="4902" bodyend="4902"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a7d09540e3fef12362d00e6bac92b6453" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QBrush</type>
        <definition>QBrush QCPAxisRect::backgroundBrush</definition>
        <argsstring>() const</argsstring>
        <name>backgroundBrush</name>
        <qualifiedname>QCPAxisRect::backgroundBrush</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4903" column="10" bodyfile="qcustomplot.h" bodystart="4903" bodyend="4903"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a059ede9a5fdcafb5cef280cd65fe4f3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAxisRect::backgroundScaled</definition>
        <argsstring>() const</argsstring>
        <name>backgroundScaled</name>
        <qualifiedname>QCPAxisRect::backgroundScaled</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4904" column="8" bodyfile="qcustomplot.h" bodystart="4904" bodyend="4904"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a06b98faf54b5491bff780294e423d3ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Qt::AspectRatioMode</type>
        <definition>Qt::AspectRatioMode QCPAxisRect::backgroundScaledMode</definition>
        <argsstring>() const</argsstring>
        <name>backgroundScaledMode</name>
        <qualifiedname>QCPAxisRect::backgroundScaledMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4905" column="23" bodyfile="qcustomplot.h" bodystart="4905" bodyend="4905"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1aa3a84c768ad6edd08fd4c5dec176828f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Qt::Orientations</type>
        <definition>Qt::Orientations QCPAxisRect::rangeDrag</definition>
        <argsstring>() const</argsstring>
        <name>rangeDrag</name>
        <qualifiedname>QCPAxisRect::rangeDrag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4906" column="20" bodyfile="qcustomplot.h" bodystart="4906" bodyend="4906"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1aa0d8414ef040523f8b2d55f0c0bddbee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Qt::Orientations</type>
        <definition>Qt::Orientations QCPAxisRect::rangeZoom</definition>
        <argsstring>() const</argsstring>
        <name>rangeZoom</name>
        <qualifiedname>QCPAxisRect::rangeZoom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4907" column="20" bodyfile="qcustomplot.h" bodystart="4907" bodyend="4907"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a6d7c22cfc54fac7a3d6ef80b133a8574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
        <definition>QCPAxis * QCPAxisRect::rangeDragAxis</definition>
        <argsstring>(Qt::Orientation orientation)</argsstring>
        <name>rangeDragAxis</name>
        <qualifiedname>QCPAxisRect::rangeDragAxis</qualifiedname>
        <param>
          <type>Qt::Orientation</type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the range drag axis of the <emphasis>orientation</emphasis> provided. If multiple axes were set, returns the first one (use <ref refid="class_q_c_p_axis_rect_1aae5f99a044ca911685a306f01b7ff941" kindref="member">rangeDragAxes</ref> to retrieve a list with all set axes).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" kindref="member">setRangeDragAxes</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4908" column="11" bodyfile="qcustomplot.cpp" bodystart="18106" bodyend="18112"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a679c63f2b8daccfe6ec5110dce3dd3b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
        <definition>QCPAxis * QCPAxisRect::rangeZoomAxis</definition>
        <argsstring>(Qt::Orientation orientation)</argsstring>
        <name>rangeZoomAxis</name>
        <qualifiedname>QCPAxisRect::rangeZoomAxis</qualifiedname>
        <param>
          <type>Qt::Orientation</type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the range zoom axis of the <emphasis>orientation</emphasis> provided. If multiple axes were set, returns the first one (use <ref refid="class_q_c_p_axis_rect_1a86aac0f435f209d60dacd22cda10c104" kindref="member">rangeZoomAxes</ref> to retrieve a list with all set axes).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2" kindref="member">setRangeZoomAxes</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4909" column="11" bodyfile="qcustomplot.cpp" bodystart="18120" bodyend="18126"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1aae5f99a044ca911685a306f01b7ff941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
        <definition>QList&lt; QCPAxis * &gt; QCPAxisRect::rangeDragAxes</definition>
        <argsstring>(Qt::Orientation orientation)</argsstring>
        <name>rangeDragAxes</name>
        <qualifiedname>QCPAxisRect::rangeDragAxes</qualifiedname>
        <param>
          <type>Qt::Orientation</type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all range drag axes of the <emphasis>orientation</emphasis> provided.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a679c63f2b8daccfe6ec5110dce3dd3b6" kindref="member">rangeZoomAxis</ref>, <ref refid="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2" kindref="member">setRangeZoomAxes</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4910" column="9" bodyfile="qcustomplot.cpp" bodystart="18133" bodyend="18152"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a86aac0f435f209d60dacd22cda10c104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
        <definition>QList&lt; QCPAxis * &gt; QCPAxisRect::rangeZoomAxes</definition>
        <argsstring>(Qt::Orientation orientation)</argsstring>
        <name>rangeZoomAxes</name>
        <qualifiedname>QCPAxisRect::rangeZoomAxes</qualifiedname>
        <param>
          <type>Qt::Orientation</type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all range zoom axes of the <emphasis>orientation</emphasis> provided.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a6d7c22cfc54fac7a3d6ef80b133a8574" kindref="member">rangeDragAxis</ref>, <ref refid="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" kindref="member">setRangeDragAxes</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4911" column="9" bodyfile="qcustomplot.cpp" bodystart="18159" bodyend="18178"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1ae4e6c4d143aacc88d2d3c56f117c2fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QCPAxisRect::rangeZoomFactor</definition>
        <argsstring>(Qt::Orientation orientation)</argsstring>
        <name>rangeZoomFactor</name>
        <qualifiedname>QCPAxisRect::rangeZoomFactor</qualifiedname>
        <param>
          <type>Qt::Orientation</type>
          <declname>orientation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the range zoom factor of the <emphasis>orientation</emphasis> provided.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac" kindref="member">setRangeZoomFactor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4912" column="10" bodyfile="qcustomplot.cpp" bodystart="18185" bodyend="18188"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setBackground</definition>
        <argsstring>(const QPixmap &amp;pm)</argsstring>
        <name>setBackground</name>
        <qualifiedname>QCPAxisRect::setBackground</qualifiedname>
        <param>
          <type>const QPixmap &amp;</type>
          <declname>pm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets <emphasis>pm</emphasis> as the axis background pixmap. The axis background pixmap will be drawn inside the axis rect. Since axis rects place themselves on the &quot;background&quot; layer by default, the axis rect backgrounds are usually drawn below everything else.</para>
<para>For cases where the provided pixmap doesn&apos;t have the same size as the axis rect, scaling can be enabled with <ref refid="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503" kindref="member">setBackgroundScaled</ref> and the scaling mode (i.e. whether and how the aspect ratio is preserved) can be set with <ref refid="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305" kindref="member">setBackgroundScaledMode</ref>. To set all these options in one call, consider using the overloaded version of this function.</para>
<para>Below the pixmap, the axis rect may be optionally filled with a brush, if specified with <ref refid="class_q_c_p_axis_rect_1a22a22b8668735438dc06f9a55fe46b33" kindref="member">setBackground(const QBrush &amp;brush)</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503" kindref="member">setBackgroundScaled</ref>, <ref refid="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305" kindref="member">setBackgroundScaledMode</ref>, <ref refid="class_q_c_p_axis_rect_1a22a22b8668735438dc06f9a55fe46b33" kindref="member">setBackground(const QBrush &amp;brush)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4915" column="8" bodyfile="qcustomplot.cpp" bodystart="18036" bodyend="18040"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1ac48a2d5d9b7732e73b86605c69c5e4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setBackground</definition>
        <argsstring>(const QPixmap &amp;pm, bool scaled, Qt::AspectRatioMode mode=Qt::KeepAspectRatioByExpanding)</argsstring>
        <name>setBackground</name>
        <qualifiedname>QCPAxisRect::setBackground</qualifiedname>
        <param>
          <type>const QPixmap &amp;</type>
          <declname>pm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scaled</declname>
        </param>
        <param>
          <type>Qt::AspectRatioMode</type>
          <declname>mode</declname>
          <defval>Qt::KeepAspectRatioByExpanding</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Allows setting the background pixmap of the axis rect, whether it shall be scaled and how it shall be scaled in one call.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5" kindref="member">setBackground(const QPixmap &amp;pm)</ref>, <ref refid="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503" kindref="member">setBackgroundScaled</ref>, <ref refid="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305" kindref="member">setBackgroundScaledMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4916" column="8" bodyfile="qcustomplot.cpp" bodystart="18067" bodyend="18073"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a22a22b8668735438dc06f9a55fe46b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setBackground</definition>
        <argsstring>(const QBrush &amp;brush)</argsstring>
        <name>setBackground</name>
        <qualifiedname>QCPAxisRect::setBackground</qualifiedname>
        <param>
          <type>const QBrush &amp;</type>
          <declname>brush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Sets <emphasis>brush</emphasis> as the background brush. The axis rect background will be filled with this brush. Since axis rects place themselves on the &quot;background&quot; layer by default, the axis rect backgrounds are usually drawn below everything else.</para>
<para>The brush will be drawn before (under) any background pixmap, which may be specified with <ref refid="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5" kindref="member">setBackground(const QPixmap &amp;pm)</ref>.</para>
<para>To disable drawing of a background brush, set <emphasis>brush</emphasis> to Qt::NoBrush.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5" kindref="member">setBackground(const QPixmap &amp;pm)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4917" column="8" bodyfile="qcustomplot.cpp" bodystart="18055" bodyend="18058"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setBackgroundScaled</definition>
        <argsstring>(bool scaled)</argsstring>
        <name>setBackgroundScaled</name>
        <qualifiedname>QCPAxisRect::setBackgroundScaled</qualifiedname>
        <param>
          <type>bool</type>
          <declname>scaled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the axis background pixmap shall be scaled to fit the axis rect or not. If <emphasis>scaled</emphasis> is set to true, you may control whether and how the aspect ratio of the original pixmap is preserved with <ref refid="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305" kindref="member">setBackgroundScaledMode</ref>.</para>
<para>Note that the scaled version of the original pixmap is buffered, so there is no performance penalty on replots. (Except when the axis rect dimensions are changed continuously.)</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5" kindref="member">setBackground</ref>, <ref refid="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305" kindref="member">setBackgroundScaledMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4918" column="8" bodyfile="qcustomplot.cpp" bodystart="18085" bodyend="18088"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setBackgroundScaledMode</definition>
        <argsstring>(Qt::AspectRatioMode mode)</argsstring>
        <name>setBackgroundScaledMode</name>
        <qualifiedname>QCPAxisRect::setBackgroundScaledMode</qualifiedname>
        <param>
          <type>Qt::AspectRatioMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If scaling of the axis background pixmap is enabled (<ref refid="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503" kindref="member">setBackgroundScaled</ref>), use this function to define whether and how the aspect ratio of the original pixmap passed to <ref refid="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5" kindref="member">setBackground</ref> is preserved. <simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5" kindref="member">setBackground</ref>, <ref refid="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503" kindref="member">setBackgroundScaled</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4919" column="8" bodyfile="qcustomplot.cpp" bodystart="18095" bodyend="18098"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setRangeDrag</definition>
        <argsstring>(Qt::Orientations orientations)</argsstring>
        <name>setRangeDrag</name>
        <qualifiedname>QCPAxisRect::setRangeDrag</qualifiedname>
        <param>
          <type>Qt::Orientations</type>
          <declname>orientations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets which axis orientation may be range dragged by the user with mouse interaction. What orientation corresponds to which specific axis can be set with <ref refid="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" kindref="member">setRangeDragAxes(QCPAxis *horizontal, QCPAxis *vertical)</ref>. By default, the horizontal axis is the bottom axis (xAxis) and the vertical axis is the left axis (yAxis).</para>
<para>To disable range dragging entirely, pass <computeroutput>nullptr</computeroutput> as <emphasis>orientations</emphasis> or remove <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a2c4432b9aceafb94000be8d1b589ef18" kindref="member">QCP::iRangeDrag</ref> from <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref>. To enable range dragging for both directions, pass <computeroutput>Qt::Horizontal | Qt::Vertical</computeroutput> as <emphasis>orientations</emphasis>.</para>
<para>In addition to setting <emphasis>orientations</emphasis> to a non-zero value, make sure <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref> contains <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a2c4432b9aceafb94000be8d1b589ef18" kindref="member">QCP::iRangeDrag</ref> to enable the range dragging interaction.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31" kindref="member">setRangeZoom</ref>, <ref refid="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" kindref="member">setRangeDragAxes</ref>, <ref refid="class_q_custom_plot_1a775bdcb6329d44701aeaa6135b0e5265" kindref="member">QCustomPlot::setNoAntialiasingOnDrag</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4920" column="8" bodyfile="qcustomplot.cpp" bodystart="18206" bodyend="18209"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setRangeZoom</definition>
        <argsstring>(Qt::Orientations orientations)</argsstring>
        <name>setRangeZoom</name>
        <qualifiedname>QCPAxisRect::setRangeZoom</qualifiedname>
        <param>
          <type>Qt::Orientations</type>
          <declname>orientations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets which axis orientation may be zoomed by the user with the mouse wheel. What orientation corresponds to which specific axis can be set with <ref refid="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2" kindref="member">setRangeZoomAxes(QCPAxis *horizontal,
QCPAxis *vertical)</ref>. By default, the horizontal axis is the bottom axis (xAxis) and the vertical axis is the left axis (yAxis).</para>
<para>To disable range zooming entirely, pass <computeroutput>nullptr</computeroutput> as <emphasis>orientations</emphasis> or remove <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037abee1e94353525a636aeaf0ba32b72e14" kindref="member">QCP::iRangeZoom</ref> from <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref>. To enable range zooming for both directions, pass <computeroutput>Qt::Horizontal | Qt::Vertical</computeroutput> as <emphasis>orientations</emphasis>.</para>
<para>In addition to setting <emphasis>orientations</emphasis> to a non-zero value, make sure <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref> contains <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037abee1e94353525a636aeaf0ba32b72e14" kindref="member">QCP::iRangeZoom</ref> to enable the range zooming interaction.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac" kindref="member">setRangeZoomFactor</ref>, <ref refid="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2" kindref="member">setRangeZoomAxes</ref>, <ref refid="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418" kindref="member">setRangeDrag</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4921" column="8" bodyfile="qcustomplot.cpp" bodystart="18226" bodyend="18229"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setRangeDragAxes</definition>
        <argsstring>(QCPAxis *horizontal, QCPAxis *vertical)</argsstring>
        <name>setRangeDragAxes</name>
        <qualifiedname>QCPAxisRect::setRangeDragAxes</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>horizontal</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>vertical</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Sets the axes whose range will be dragged when <ref refid="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418" kindref="member">setRangeDrag</ref> enables mouse range dragging on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget. Pass <computeroutput>nullptr</computeroutput> if no axis shall be dragged in the respective orientation.</para>
<para>Use the overload taking a list of axes, if multiple axes (more than one per orientation) shall react to dragging interactions.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2" kindref="member">setRangeZoomAxes</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4922" column="8" bodyfile="qcustomplot.cpp" bodystart="18242" bodyend="18250"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1af0fbc510147a2a54b9c8cd296e6df8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setRangeDragAxes</definition>
        <argsstring>(QList&lt; QCPAxis * &gt; axes)</argsstring>
        <name>setRangeDragAxes</name>
        <qualifiedname>QCPAxisRect::setRangeDragAxes</qualifiedname>
        <param>
          <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
          <declname>axes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This method allows to set up multiple axes to react to horizontal and vertical dragging. The drag orientation that the respective axis will react to is deduced from its orientation (<ref refid="class_q_c_p_axis_1ab988ef4538e2655bb77bd138189cd42e" kindref="member">QCPAxis::orientation</ref>).</para>
<para>In the unusual case that you wish to e.g. drag a vertically oriented axis with a horizontal drag motion, use the overload taking two separate lists for horizontal and vertical dragging. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4923" column="8" bodyfile="qcustomplot.cpp" bodystart="18261" bodyend="18272"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a8366903edcb3bb703a8b0be783a85746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setRangeDragAxes</definition>
        <argsstring>(QList&lt; QCPAxis * &gt; horizontal, QList&lt; QCPAxis * &gt; vertical)</argsstring>
        <name>setRangeDragAxes</name>
        <qualifiedname>QCPAxisRect::setRangeDragAxes</qualifiedname>
        <param>
          <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
          <declname>horizontal</declname>
        </param>
        <param>
          <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
          <declname>vertical</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This method allows to set multiple axes up to react to horizontal and vertical dragging, and define specifically which axis reacts to which drag orientation (irrespective of the axis orientation). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4924" column="8" bodyfile="qcustomplot.cpp" bodystart="18280" bodyend="18300"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setRangeZoomAxes</definition>
        <argsstring>(QCPAxis *horizontal, QCPAxis *vertical)</argsstring>
        <name>setRangeZoomAxes</name>
        <qualifiedname>QCPAxisRect::setRangeZoomAxes</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>horizontal</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>vertical</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the axes whose range will be zoomed when <ref refid="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31" kindref="member">setRangeZoom</ref> enables mouse wheel zooming on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget. Pass <computeroutput>nullptr</computeroutput> if no axis shall be zoomed in the respective orientation.</para>
<para>The two axes can be zoomed with different strengths, when different factors are passed to <ref refid="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac" kindref="member">setRangeZoomFactor(double horizontalFactor, double verticalFactor)</ref>.</para>
<para>Use the overload taking a list of axes, if multiple axes (more than one per orientation) shall react to zooming interactions.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" kindref="member">setRangeDragAxes</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4925" column="8" bodyfile="qcustomplot.cpp" bodystart="18314" bodyend="18322"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a89c1ab7ee6d2a14b56c57c9a796ba623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setRangeZoomAxes</definition>
        <argsstring>(QList&lt; QCPAxis * &gt; axes)</argsstring>
        <name>setRangeZoomAxes</name>
        <qualifiedname>QCPAxisRect::setRangeZoomAxes</qualifiedname>
        <param>
          <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
          <declname>axes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This method allows to set up multiple axes to react to horizontal and vertical range zooming. The zoom orientation that the respective axis will react to is deduced from its orientation (<ref refid="class_q_c_p_axis_1ab988ef4538e2655bb77bd138189cd42e" kindref="member">QCPAxis::orientation</ref>).</para>
<para>In the unusual case that you wish to e.g. zoom a vertically oriented axis with a horizontal zoom interaction, use the overload taking two separate lists for horizontal and vertical zooming. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4926" column="8" bodyfile="qcustomplot.cpp" bodystart="18333" bodyend="18344"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1ae29d6e9e54ebd981769c986e498ae118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setRangeZoomAxes</definition>
        <argsstring>(QList&lt; QCPAxis * &gt; horizontal, QList&lt; QCPAxis * &gt; vertical)</argsstring>
        <name>setRangeZoomAxes</name>
        <qualifiedname>QCPAxisRect::setRangeZoomAxes</qualifiedname>
        <param>
          <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
          <declname>horizontal</declname>
        </param>
        <param>
          <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
          <declname>vertical</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This method allows to set multiple axes up to react to horizontal and vertical zooming, and define specifically which axis reacts to which zoom orientation (irrespective of the axis orientation). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4927" column="8" bodyfile="qcustomplot.cpp" bodystart="18352" bodyend="18372"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setRangeZoomFactor</definition>
        <argsstring>(double horizontalFactor, double verticalFactor)</argsstring>
        <name>setRangeZoomFactor</name>
        <qualifiedname>QCPAxisRect::setRangeZoomFactor</qualifiedname>
        <param>
          <type>double</type>
          <declname>horizontalFactor</declname>
        </param>
        <param>
          <type>double</type>
          <declname>verticalFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets how strong one rotation step of the mouse wheel zooms, when range zoom was activated with <ref refid="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31" kindref="member">setRangeZoom</ref>. The two parameters <emphasis>horizontalFactor</emphasis> and <emphasis>verticalFactor</emphasis> provide a way to let the horizontal axis zoom at different rates than the vertical axis. Which axis is horizontal and which is vertical, can be set with <ref refid="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2" kindref="member">setRangeZoomAxes</ref>.</para>
<para>When the zoom factor is greater than one, scrolling the mouse wheel backwards (towards the user) will zoom in (make the currently visible range smaller). For zoom factors smaller than one, the same scrolling direction will zoom out. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4928" column="8" bodyfile="qcustomplot.cpp" bodystart="18384" bodyend="18388"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1ae83d187b03fc6fa4f00765ad50cd3fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setRangeZoomFactor</definition>
        <argsstring>(double factor)</argsstring>
        <name>setRangeZoomFactor</name>
        <qualifiedname>QCPAxisRect::setRangeZoomFactor</qualifiedname>
        <param>
          <type>double</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Sets both the horizontal and vertical zoom <emphasis>factor</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4929" column="8" bodyfile="qcustomplot.cpp" bodystart="18394" bodyend="18398"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a85b321acec0f694d8b5fdeafdbff3133" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCPAxisRect::axisCount</definition>
        <argsstring>(QCPAxis::AxisType type) const</argsstring>
        <name>axisCount</name>
        <qualifiedname>QCPAxisRect::axisCount</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a" kindref="member">QCPAxis::AxisType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of axes on the axis rect side specified with <emphasis>type</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1" kindref="member">axis</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4932" column="7" bodyfile="qcustomplot.cpp" bodystart="17594" bodyend="17597"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
        <definition>QCPAxis * QCPAxisRect::axis</definition>
        <argsstring>(QCPAxis::AxisType type, int index=0) const</argsstring>
        <name>axis</name>
        <qualifiedname>QCPAxisRect::axis</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a" kindref="member">QCPAxis::AxisType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the axis with the given <emphasis>index</emphasis> on the axis rect side specified with <emphasis>type</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a85b321acec0f694d8b5fdeafdbff3133" kindref="member">axisCount</ref>, <ref refid="class_q_c_p_axis_rect_1a8db4722cb93e9c4a6f0d91150c200867" kindref="member">axes</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4933" column="11" bodyfile="qcustomplot.cpp" bodystart="17604" bodyend="17615"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a8db4722cb93e9c4a6f0d91150c200867" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
        <definition>QList&lt; QCPAxis * &gt; QCPAxisRect::axes</definition>
        <argsstring>(QCPAxis::AxisTypes types) const</argsstring>
        <name>axes</name>
        <qualifiedname>QCPAxisRect::axes</qualifiedname>
        <param>
          <type>QCPAxis::AxisTypes</type>
          <declname>types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all axes on the axis rect sides specified with <emphasis>types</emphasis>.</para>
<para><emphasis>types</emphasis> may be a single <ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a" kindref="member">QCPAxis::AxisType</ref> or an <computeroutput>or</computeroutput>-combination, to get the axes of multiple sides.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1" kindref="member">axis</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4934" column="9" bodyfile="qcustomplot.cpp" bodystart="17625" bodyend="17637"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a11657b8faebe9677180860e8057ede26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
        <definition>QList&lt; QCPAxis * &gt; QCPAxisRect::axes</definition>
        <argsstring>() const</argsstring>
        <name>axes</name>
        <qualifiedname>QCPAxisRect::axes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Returns all axes of this axis rect. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4935" column="9" bodyfile="qcustomplot.cpp" bodystart="17643" bodyend="17653"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a2a845ee60eac7a8d5e71718c5e77c274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
        <definition>QCPAxis * QCPAxisRect::addAxis</definition>
        <argsstring>(QCPAxis::AxisType type, QCPAxis *axis=nullptr)</argsstring>
        <name>addAxis</name>
        <qualifiedname>QCPAxisRect::addAxis</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a" kindref="member">QCPAxis::AxisType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>axis</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a new axis to the axis rect side specified with <emphasis>type</emphasis>, and returns it. If <emphasis>axis</emphasis> is 0, a new <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> instance is created internally. <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> owns the returned axis, so if you want to remove an axis, use <ref refid="class_q_c_p_axis_rect_1a03c39cd9704f0d36fb6cf980cdddcbaa" kindref="member">removeAxis</ref> instead of deleting it manually.</para>
<para>You may inject <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> instances (or subclasses of <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref>) by setting <emphasis>axis</emphasis> to an axis that was previously created outside <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>. It is important to note that <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> takes ownership of the axis, so you may not delete it afterwards. Further, the <emphasis>axis</emphasis> must have been created with this axis rect as parent and with the same axis type as specified in <emphasis>type</emphasis>. If this is not the case, a debug output is generated, the axis is not added, and the method returns <computeroutput>nullptr</computeroutput>.</para>
<para>This method can not be used to move <emphasis>axis</emphasis> between axis rects. The same <emphasis>axis</emphasis> instance must not be added multiple times to the same or different axis rects.</para>
<para>If an axis rect side already contains one or more axes, the lower and upper endings of the new axis (<ref refid="class_q_c_p_axis_1a08af1c72db9ae4dc8cb8a973d44405ab" kindref="member">QCPAxis::setLowerEnding</ref>, <ref refid="class_q_c_p_axis_1a69119b892fc306f651763596685aa377" kindref="member">QCPAxis::setUpperEnding</ref>) are set to <ref refid="class_q_c_p_line_ending_1a5ef16e6876b4b74959c7261d8d4c2cd5a126c390f0c359fcd8df1fc5e38d26d5b" kindref="member">QCPLineEnding::esHalfBar</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a792e1f3d9cb1591fca135bb0de9b81fc" kindref="member">addAxes</ref>, <ref refid="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4" kindref="member">setupFullAxesBox</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4936" column="11" bodyfile="qcustomplot.cpp" bodystart="17675" bodyend="17720"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a792e1f3d9cb1591fca135bb0de9b81fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt;</type>
        <definition>QList&lt; QCPAxis * &gt; QCPAxisRect::addAxes</definition>
        <argsstring>(QCPAxis::AxisTypes types)</argsstring>
        <name>addAxes</name>
        <qualifiedname>QCPAxisRect::addAxes</qualifiedname>
        <param>
          <type>QCPAxis::AxisTypes</type>
          <declname>types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a new axis with <ref refid="class_q_c_p_axis_rect_1a2a845ee60eac7a8d5e71718c5e77c274" kindref="member">addAxis</ref> to each axis rect side specified in <emphasis>types</emphasis>. This may be an <computeroutput>or</computeroutput>-combination of <ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a" kindref="member">QCPAxis::AxisType</ref>, so axes can be added to multiple sides at once.</para>
<para>Returns a list of the added axes.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a2a845ee60eac7a8d5e71718c5e77c274" kindref="member">addAxis</ref>, <ref refid="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4" kindref="member">setupFullAxesBox</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4937" column="9" bodyfile="qcustomplot.cpp" bodystart="17730" bodyend="17742"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a03c39cd9704f0d36fb6cf980cdddcbaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAxisRect::removeAxis</definition>
        <argsstring>(QCPAxis *axis)</argsstring>
        <name>removeAxis</name>
        <qualifiedname>QCPAxisRect::removeAxis</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the specified <emphasis>axis</emphasis> from the axis rect and deletes it.</para>
<para>Returns true on success, i.e. if <emphasis>axis</emphasis> was a valid axis in this axis rect.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a2a845ee60eac7a8d5e71718c5e77c274" kindref="member">addAxis</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4938" column="8" bodyfile="qcustomplot.cpp" bodystart="17751" bodyend="17771"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_layout_inset" kindref="compound">QCPLayoutInset</ref> *</type>
        <definition>QCPLayoutInset * QCPAxisRect::insetLayout</definition>
        <argsstring>() const</argsstring>
        <name>insetLayout</name>
        <qualifiedname>QCPAxisRect::insetLayout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inset layout of this axis rect. It can be used to place other layout elements (or even layouts with multiple other elements) inside/on top of an axis rect.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_inset" kindref="compound">QCPLayoutInset</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4939" column="18" bodyfile="qcustomplot.h" bodystart="4939" bodyend="4939"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a5fc8460564e81dcc2a9343dc8bc1fe67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::zoom</definition>
        <argsstring>(const QRectF &amp;pixelRect)</argsstring>
        <name>zoom</name>
        <qualifiedname>QCPAxisRect::zoom</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>pixelRect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Zooms in (or out) to the passed rectangular region <emphasis>pixelRect</emphasis>, given in pixel coordinates.</para>
<para>All axes of this axis rect will have their range zoomed accordingly. If you only wish to zoom specific axes, use the overloaded version of this method.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb" kindref="member">QCustomPlot::setSelectionRectMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4941" column="8" bodyfile="qcustomplot.cpp" bodystart="17781" bodyend="17784"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1ae481c28b50e10cfbbec59fde45e77367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::zoom</definition>
        <argsstring>(const QRectF &amp;pixelRect, const QList&lt; QCPAxis * &gt; &amp;affectedAxes)</argsstring>
        <name>zoom</name>
        <qualifiedname>QCPAxisRect::zoom</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>pixelRect</declname>
        </param>
        <param>
          <type>const QList&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> * &gt; &amp;</type>
          <declname>affectedAxes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Zooms in (or out) to the passed rectangular region <emphasis>pixelRect</emphasis>, given in pixel coordinates.</para>
<para>Only the axes passed in <emphasis>affectedAxes</emphasis> will have their ranges zoomed accordingly.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb" kindref="member">QCustomPlot::setSelectionRectMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4942" column="8" bodyfile="qcustomplot.cpp" bodystart="17794" bodyend="17810"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::setupFullAxesBox</definition>
        <argsstring>(bool connectRanges=false)</argsstring>
        <name>setupFullAxesBox</name>
        <qualifiedname>QCPAxisRect::setupFullAxesBox</qualifiedname>
        <param>
          <type>bool</type>
          <declname>connectRanges</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function to create an axis on each side that doesn&apos;t have any axes yet and set their visibility to true. Further, the top/right axes are assigned the following properties of the bottom/left axes:</para>
<para><itemizedlist>
<listitem><para>range (<ref refid="class_q_c_p_axis_1aebdfea5d44c3a0ad2b4700cd4d25b641" kindref="member">QCPAxis::setRange</ref>) </para>
</listitem>
<listitem><para>range reversed (<ref refid="class_q_c_p_axis_1a2172fdb196b1a0dc3f40992fcad8e9e1" kindref="member">QCPAxis::setRangeReversed</ref>) </para>
</listitem>
<listitem><para>scale type (<ref refid="class_q_c_p_axis_1adef29cae617af4f519f6c40d1a866ca6" kindref="member">QCPAxis::setScaleType</ref>) </para>
</listitem>
<listitem><para>tick visibility (<ref refid="class_q_c_p_axis_1ac891409315bc379e3b1abdb162c1a011" kindref="member">QCPAxis::setTicks</ref>) </para>
</listitem>
<listitem><para>number format (<ref refid="class_q_c_p_axis_1ae585a54dc2aac662e90a2ca82f002590" kindref="member">QCPAxis::setNumberFormat</ref>) </para>
</listitem>
<listitem><para>number precision (<ref refid="class_q_c_p_axis_1a21dc8023ad7500382ad9574b48137e63" kindref="member">QCPAxis::setNumberPrecision</ref>) </para>
</listitem>
<listitem><para>tick count of ticker (<ref refid="class_q_c_p_axis_ticker_1a47752abba8293e6dc18491501ae34008" kindref="member">QCPAxisTicker::setTickCount</ref>) </para>
</listitem>
<listitem><para>tick origin of ticker (<ref refid="class_q_c_p_axis_ticker_1ab509c7e500293bf66a8409f0d7c23943" kindref="member">QCPAxisTicker::setTickOrigin</ref>)</para>
</listitem>
</itemizedlist>
Tick label visibility (<ref refid="class_q_c_p_axis_1a04ba16e1f6f78d70f938519576ed32c8" kindref="member">QCPAxis::setTickLabels</ref>) of the right and top axes are set to false.</para>
<para>If <emphasis>connectRanges</emphasis> is true, the <ref refid="class_q_c_p_axis_1a0894084e4c16a1736534c4095746f910" kindref="member">rangeChanged</ref> signals of the bottom and left axes are connected to the <ref refid="class_q_c_p_axis_1aebdfea5d44c3a0ad2b4700cd4d25b641" kindref="member">QCPAxis::setRange</ref> slots of the top and right axes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4943" column="8" bodyfile="qcustomplot.cpp" bodystart="17831" bodyend="17884"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a587d073a97b27bc7293fab4b2774ad59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> * &gt;</type>
        <definition>QList&lt; QCPAbstractPlottable * &gt; QCPAxisRect::plottables</definition>
        <argsstring>() const</argsstring>
        <name>plottables</name>
        <qualifiedname>QCPAxisRect::plottables</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of all the plottables that are associated with this axis rect.</para>
<para>A plottable is considered associated with an axis rect if its key or value axis (or both) is in this axis rect.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a2d9ded3eca97be1fcb5867949391bb88" kindref="member">graphs</ref>, <ref refid="class_q_c_p_axis_rect_1a03c113a2175448300ee8f944e24776ba" kindref="member">items</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4944" column="9" bodyfile="qcustomplot.cpp" bodystart="17894" bodyend="17904"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a2d9ded3eca97be1fcb5867949391bb88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> * &gt;</type>
        <definition>QList&lt; QCPGraph * &gt; QCPAxisRect::graphs</definition>
        <argsstring>() const</argsstring>
        <name>graphs</name>
        <qualifiedname>QCPAxisRect::graphs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of all the graphs that are associated with this axis rect.</para>
<para>A graph is considered associated with an axis rect if its key or value axis (or both) is in this axis rect.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a587d073a97b27bc7293fab4b2774ad59" kindref="member">plottables</ref>, <ref refid="class_q_c_p_axis_rect_1a03c113a2175448300ee8f944e24776ba" kindref="member">items</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4945" column="9" bodyfile="qcustomplot.cpp" bodystart="17914" bodyend="17924"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a03c113a2175448300ee8f944e24776ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref> * &gt;</type>
        <definition>QList&lt; QCPAbstractItem * &gt; QCPAxisRect::items</definition>
        <argsstring>() const</argsstring>
        <name>items</name>
        <qualifiedname>QCPAxisRect::items</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of all the items that are associated with this axis rect.</para>
<para>An item is considered associated with an axis rect if any of its positions has key or value axis set to an axis that is in this axis rect, or if any of its positions has <ref refid="class_q_c_p_item_position_1a0cd9b326fb324710169e92e8ca0041c2" kindref="member">QCPItemPosition::setAxisRect</ref> set to the axis rect, or if the clip axis rect (<ref refid="class_q_c_p_abstract_item_1a7dc75fcbcd10206fe0b75d757ea7a347" kindref="member">QCPAbstractItem::setClipAxisRect</ref>) is set to this axis rect.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a587d073a97b27bc7293fab4b2774ad59" kindref="member">plottables</ref>, <ref refid="class_q_c_p_axis_rect_1a2d9ded3eca97be1fcb5867949391bb88" kindref="member">graphs</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4946" column="9" bodyfile="qcustomplot.cpp" bodystart="17936" bodyend="17960"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1afb4a3de02046b20b9310bdb8fca781c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPAxisRect::left</definition>
        <argsstring>() const</argsstring>
        <name>left</name>
        <qualifiedname>QCPAxisRect::left</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pixel position of the left border of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4949" column="7" bodyfile="qcustomplot.h" bodystart="4949" bodyend="4949"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a3f819d4a1b2193723d1fdafc573eea10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPAxisRect::right</definition>
        <argsstring>() const</argsstring>
        <name>right</name>
        <qualifiedname>QCPAxisRect::right</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pixel position of the right border of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4950" column="7" bodyfile="qcustomplot.h" bodystart="4950" bodyend="4950"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a45dbad181cbb9f09d068dbb76c817c95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPAxisRect::top</definition>
        <argsstring>() const</argsstring>
        <name>top</name>
        <qualifiedname>QCPAxisRect::top</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pixel position of the top border of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4951" column="7" bodyfile="qcustomplot.h" bodystart="4951" bodyend="4951"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1acefdf1abaa8a8ab681e906cc2be9581e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPAxisRect::bottom</definition>
        <argsstring>() const</argsstring>
        <name>bottom</name>
        <qualifiedname>QCPAxisRect::bottom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pixel position of the bottom border of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4952" column="7" bodyfile="qcustomplot.h" bodystart="4952" bodyend="4952"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a204645398a4f9d0b0189385c7c2cfb91" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPAxisRect::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <qualifiedname>QCPAxisRect::width</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pixel width of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4953" column="7" bodyfile="qcustomplot.h" bodystart="4953" bodyend="4953"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1acc4377809e79d9a089ab790f39429b0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPAxisRect::height</definition>
        <argsstring>() const</argsstring>
        <name>height</name>
        <qualifiedname>QCPAxisRect::height</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pixel height of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4954" column="7" bodyfile="qcustomplot.h" bodystart="4954" bodyend="4954"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a7a8289346eb612f422c704f8b75cf479" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize QCPAxisRect::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>QCPAxisRect::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pixel size of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4955" column="9" bodyfile="qcustomplot.h" bodystart="4955" bodyend="4955"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a5a847b3ddeca3abec38d3838fefb0dbd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPoint</type>
        <definition>QPoint QCPAxisRect::topLeft</definition>
        <argsstring>() const</argsstring>
        <name>topLeft</name>
        <qualifiedname>QCPAxisRect::topLeft</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the top left corner of this axis rect in pixels. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4956" column="10" bodyfile="qcustomplot.h" bodystart="4956" bodyend="4956"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a7aa221967549ba71b98c465bf8234758" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPoint</type>
        <definition>QPoint QCPAxisRect::topRight</definition>
        <argsstring>() const</argsstring>
        <name>topRight</name>
        <qualifiedname>QCPAxisRect::topRight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the top right corner of this axis rect in pixels. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4957" column="10" bodyfile="qcustomplot.h" bodystart="4957" bodyend="4957"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1ab15d4311d6535ccd7af504dc0e2b98c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPoint</type>
        <definition>QPoint QCPAxisRect::bottomLeft</definition>
        <argsstring>() const</argsstring>
        <name>bottomLeft</name>
        <qualifiedname>QCPAxisRect::bottomLeft</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the bottom left corner of this axis rect in pixels. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4958" column="10" bodyfile="qcustomplot.h" bodystart="4958" bodyend="4958"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a36dac884ec8fa3a3a2f3842ca7b7d32d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPoint</type>
        <definition>QPoint QCPAxisRect::bottomRight</definition>
        <argsstring>() const</argsstring>
        <name>bottomRight</name>
        <qualifiedname>QCPAxisRect::bottomRight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the bottom right corner of this axis rect in pixels. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4959" column="10" bodyfile="qcustomplot.h" bodystart="4959" bodyend="4959"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1ade3aef874bafcec6dd16174fba44c0b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPoint</type>
        <definition>QPoint QCPAxisRect::center</definition>
        <argsstring>() const</argsstring>
        <name>center</name>
        <qualifiedname>QCPAxisRect::center</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the center of this axis rect in pixels. Margins are not taken into account here, so the returned value is with respect to the inner <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4960" column="10" bodyfile="qcustomplot.h" bodystart="4960" bodyend="4960"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1add049d464b9ef2ccdc638adc4ccb4aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAxisRect::update</definition>
        <argsstring>(UpdatePhase phase) Q_DECL_OVERRIDE</argsstring>
        <name>update</name>
        <qualifiedname>QCPAxisRect::update</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1a929c2ec62e0e0e1d8418eaa802e2af9b">update</reimplements>
        <reimplementedby refid="class_q_c_p_color_scale_axis_rect_private_1add049d464b9ef2ccdc638adc4ccb4aca">update</reimplementedby>
        <param>
          <type><ref refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d" kindref="member">UpdatePhase</ref></type>
          <declname>phase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called automatically upon replot and doesn&apos;t need to be called by users of <ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref>.</para>
<para>Calls the base class implementation to update the margins (see <ref refid="class_q_c_p_layout_element_1a929c2ec62e0e0e1d8418eaa802e2af9b" kindref="member">QCPLayoutElement::update</ref>), and finally passes the <ref refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" kindref="member">rect</ref> to the inset layout (<ref refid="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10" kindref="member">insetLayout</ref>) and calls its QCPInsetLayout::update function.</para>
<para>\seebaseclassmethod </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4963" column="16" bodyfile="qcustomplot.cpp" bodystart="17972" bodyend="17994"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a3aee067fd105f2fa8de9eb8024435ac5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QList&lt; <ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> * &gt;</type>
        <definition>QList&lt; QCPLayoutElement * &gt; QCPAxisRect::elements</definition>
        <argsstring>(bool recursive) const Q_DECL_OVERRIDE</argsstring>
        <name>elements</name>
        <qualifiedname>QCPAxisRect::elements</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1a76dec8cb31e498994a944d7647a43309">elements</reimplements>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of all child elements in this layout element. If <emphasis>recursive</emphasis> is true, all sub-child elements are included in the list, too.</para>
<para><simplesect kind="warning"><para>There may be <computeroutput>nullptr</computeroutput> entries in the returned list. For example, <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref> may have empty cells which yield <computeroutput>nullptr</computeroutput> at the respective index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4964" column="17" bodyfile="qcustomplot.cpp" bodystart="17997" bodyend="18007"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a4a318008e2b7f881a14c3d97186b31f9" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAxisRect::applyDefaultAntialiasingHint</definition>
        <argsstring>(QCPPainter *painter) const Q_DECL_OVERRIDE</argsstring>
        <name>applyDefaultAntialiasingHint</name>
        <qualifiedname>QCPAxisRect::applyDefaultAntialiasingHint</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1a0a8f18141bcf46cf40ad4c13324ff346">applyDefaultAntialiasingHint</reimplements>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4986" column="16" bodyfile="qcustomplot.cpp" bodystart="18010" bodyend="18013"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1af710c50530e370539a4439d6c4db9090" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAxisRect::draw</definition>
        <argsstring>(QCPPainter *painter) Q_DECL_OVERRIDE</argsstring>
        <name>draw</name>
        <qualifiedname>QCPAxisRect::draw</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1ad1c597b1d608cfdd86e7b76819a94cfb">draw</reimplements>
        <reimplementedby refid="class_q_c_p_color_scale_axis_rect_private_1a52a21c7cbe086cd587c955cfe6e25e3b">draw</reimplementedby>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4987" column="16" bodyfile="qcustomplot.cpp" bodystart="18016" bodyend="18019"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1ac51055d83f5f414b6d013d3a24b0a941" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int QCPAxisRect::calculateAutoMargin</definition>
        <argsstring>(QCP::MarginSide side) Q_DECL_OVERRIDE</argsstring>
        <name>calculateAutoMargin</name>
        <qualifiedname>QCPAxisRect::calculateAutoMargin</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1a005c9f0fe84bc1591a2cf2c46fd477b4">calculateAutoMargin</reimplements>
        <reimplementedby refid="class_q_c_p_color_scale_axis_rect_private_1ac51055d83f5f414b6d013d3a24b0a941">calculateAutoMargin</reimplementedby>
        <param>
          <type><ref refid="namespace_q_c_p_1a7e487e3e2ccb62ab7771065bab7cae54" kindref="member">QCP::MarginSide</ref></type>
          <declname>side</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4988" column="15" bodyfile="qcustomplot.cpp" bodystart="18473" bodyend="18486"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a575e38ac71a21906dc2d7b3364db2d62" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAxisRect::layoutChanged</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>layoutChanged</name>
        <qualifiedname>QCPAxisRect::layoutChanged</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1a765f041a73af0c2de41b41a5a03e31a4">layoutChanged</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4989" column="16" bodyfile="qcustomplot.cpp" bodystart="18498" bodyend="18511"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAxisRect::mousePressEvent</definition>
        <argsstring>(QMouseEvent *event, const QVariant &amp;details) Q_DECL_OVERRIDE</argsstring>
        <name>mousePressEvent</name>
        <qualifiedname>QCPAxisRect::mousePressEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</reimplements>
        <reimplementedby refid="class_q_c_p_color_scale_axis_rect_private_1aa9a7c807eaa4666870ac94aa6abc4dde">mousePressEvent</reimplementedby>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const QVariant &amp;</type>
          <declname>details</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This event gets called when the user presses a mouse button while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <ref refid="class_q_c_p_layout_element_1a62d60f1b0ee9bb23e38811d71586d79c" kindref="member">selectTest</ref>.</para>
<para>The current pixel position of the cursor on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>details</emphasis> contains layerable-specific details about the hit, which were generated in the previous call to <ref refid="class_q_c_p_layout_element_1a62d60f1b0ee9bb23e38811d71586d79c" kindref="member">selectTest</ref>. For example, One-dimensional plottables like <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> or <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref> convey the clicked data point in the <emphasis>details</emphasis> parameter, as <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> packed as QVariant. Multi-part objects convey the specific <computeroutput>SelectablePart</computeroutput> that was hit (e.g. <ref refid="class_q_c_p_axis_1abee4c7a54c468b1385dfce2c898b115f" kindref="member">QCPAxis::SelectablePart</ref> in the case of axes).</para>
<para><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> uses an event propagation system that works the same as Qt&apos;s system. If your layerable doesn&apos;t reimplement the <ref refid="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde" kindref="member">mousePressEvent</ref> or explicitly calls <computeroutput>event-&gt;ignore()</computeroutput> in its reimplementation, the event will be propagated to the next layerable in the stacking order.</para>
<para>Once a layerable has accepted the <ref refid="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde" kindref="member">mousePressEvent</ref>, it is considered the mouse grabber and will receive all following calls to <ref refid="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb" kindref="member">mouseMoveEvent</ref> or <ref refid="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4" kindref="member">mouseReleaseEvent</ref> for this mouse interaction (a &quot;mouse interaction&quot; in this context ends with the release).</para>
<para>The default implementation does nothing except explicitly ignoring the event with <computeroutput>event-&gt;ignore()</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb" kindref="member">mouseMoveEvent</ref>, <ref refid="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4" kindref="member">mouseReleaseEvent</ref>, <ref refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" kindref="member">mouseDoubleClickEvent</ref>, <ref refid="class_q_c_p_axis_rect_1a93eeaa0c127d6d6fe8171b2455080262" kindref="member">wheelEvent</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4991" column="16" bodyfile="qcustomplot.cpp" bodystart="18524" bodyend="18547"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAxisRect::mouseMoveEvent</definition>
        <argsstring>(QMouseEvent *event, const QPointF &amp;startPos) Q_DECL_OVERRIDE</argsstring>
        <name>mouseMoveEvent</name>
        <qualifiedname>QCPAxisRect::mouseMoveEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</reimplements>
        <reimplementedby refid="class_q_c_p_color_scale_axis_rect_private_1a9cd27ad8c5cfb49aefd9dbb30def4beb">mouseMoveEvent</reimplementedby>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>startPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This event gets called when the user moves the mouse while holding a mouse button, after this layerable has become the mouse grabber by accepting the preceding <ref refid="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde" kindref="member">mousePressEvent</ref>.</para>
<para>The current pixel position of the cursor on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>startPos</emphasis> indicates the position where the initial <ref refid="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde" kindref="member">mousePressEvent</ref> occurred, that started the mouse interaction.</para>
<para>The default implementation does nothing.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde" kindref="member">mousePressEvent</ref>, <ref refid="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4" kindref="member">mouseReleaseEvent</ref>, <ref refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" kindref="member">mouseDoubleClickEvent</ref>, <ref refid="class_q_c_p_axis_rect_1a93eeaa0c127d6d6fe8171b2455080262" kindref="member">wheelEvent</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4992" column="16" bodyfile="qcustomplot.cpp" bodystart="18556" bodyend="18613"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAxisRect::mouseReleaseEvent</definition>
        <argsstring>(QMouseEvent *event, const QPointF &amp;startPos) Q_DECL_OVERRIDE</argsstring>
        <name>mouseReleaseEvent</name>
        <qualifiedname>QCPAxisRect::mouseReleaseEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</reimplements>
        <reimplementedby refid="class_q_c_p_color_scale_axis_rect_private_1a6c89b988d3a0b93c0878f0ebdb5037f4">mouseReleaseEvent</reimplementedby>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>startPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This event gets called when the user releases the mouse button, after this layerable has become the mouse grabber by accepting the preceding <ref refid="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde" kindref="member">mousePressEvent</ref>.</para>
<para>The current pixel position of the cursor on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>startPos</emphasis> indicates the position where the initial <ref refid="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde" kindref="member">mousePressEvent</ref> occurred, that started the mouse interaction.</para>
<para>The default implementation does nothing.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde" kindref="member">mousePressEvent</ref>, <ref refid="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb" kindref="member">mouseMoveEvent</ref>, <ref refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" kindref="member">mouseDoubleClickEvent</ref>, <ref refid="class_q_c_p_axis_rect_1a93eeaa0c127d6d6fe8171b2455080262" kindref="member">wheelEvent</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4993" column="16" bodyfile="qcustomplot.cpp" bodystart="18616" bodyend="18626"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a93eeaa0c127d6d6fe8171b2455080262" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAxisRect::wheelEvent</definition>
        <argsstring>(QWheelEvent *event) Q_DECL_OVERRIDE</argsstring>
        <name>wheelEvent</name>
        <qualifiedname>QCPAxisRect::wheelEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</reimplements>
        <reimplementedby refid="class_q_c_p_color_scale_axis_rect_private_1a93eeaa0c127d6d6fe8171b2455080262">wheelEvent</reimplementedby>
        <param>
          <type>QWheelEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This event gets called when the user turns the mouse scroll wheel while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <ref refid="class_q_c_p_layout_element_1a62d60f1b0ee9bb23e38811d71586d79c" kindref="member">selectTest</ref>.</para>
<para>The current pixel position of the cursor on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>.</para>
<para>The <computeroutput>event-&gt;angleDelta()</computeroutput> indicates how far the mouse wheel was turned, which is usually +/- 120 for single rotation steps. However, if the mouse wheel is turned rapidly, multiple steps may accumulate to one event, making the delta larger. On the other hand, if the wheel has very smooth steps or none at all, the delta may be smaller.</para>
<para>The default implementation does nothing.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde" kindref="member">mousePressEvent</ref>, <ref refid="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb" kindref="member">mouseMoveEvent</ref>, <ref refid="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4" kindref="member">mouseReleaseEvent</ref>, <ref refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" kindref="member">mouseDoubleClickEvent</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4994" column="16" bodyfile="qcustomplot.cpp" bodystart="18642" bodyend="18684"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1ab49d338d1ce74b476fcead5b32cf06dc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::drawBackground</definition>
        <argsstring>(QCPPainter *painter)</argsstring>
        <name>drawBackground</name>
        <qualifiedname>QCPAxisRect::drawBackground</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4997" column="8" bodyfile="qcustomplot.cpp" bodystart="18418" bodyend="18440"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_rect_1a6024ccdc74f5dc0e8a0fe482e5b28a20" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisRect::updateAxesOffset</definition>
        <argsstring>(QCPAxis::AxisType type)</argsstring>
        <name>updateAxesOffset</name>
        <qualifiedname>QCPAxisRect::updateAxesOffset</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a" kindref="member">QCPAxis::AxisType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4998" column="8" bodyfile="qcustomplot.cpp" bodystart="18452" bodyend="18470"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Holds multiple axes and arranges them in a rectangular shape. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents an axis rect, a rectangular area that is bounded on all sides with an arbitrary number of axes.</para>
<para>Initially <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> has one axis rect, accessible via <ref refid="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9" kindref="member">QCustomPlot::axisRect()</ref>. However, the layout system allows to have multiple axis rects, e.g. arranged in a grid layout (<ref refid="class_q_custom_plot_1af1a1f1f571237deb7c2bd34a5e9f018f" kindref="member">QCustomPlot::plotLayout</ref>).</para>
<para>By default, <ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> comes with four axes, at bottom, top, left and right. They can be accessed via <ref refid="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1" kindref="member">axis</ref> by providing the respective axis type (<ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a" kindref="member">QCPAxis::AxisType</ref>) and index. If you need all axes in the axis rect, use <ref refid="class_q_c_p_axis_rect_1a8db4722cb93e9c4a6f0d91150c200867" kindref="member">axes</ref>. The top and right axes are set to be invisible initially (<ref refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" kindref="member">QCPAxis::setVisible</ref>). To add more axes to a side, use <ref refid="class_q_c_p_axis_rect_1a2a845ee60eac7a8d5e71718c5e77c274" kindref="member">addAxis</ref> or <ref refid="class_q_c_p_axis_rect_1a792e1f3d9cb1591fca135bb0de9b81fc" kindref="member">addAxes</ref>. To remove an axis, use <ref refid="class_q_c_p_axis_rect_1a03c39cd9704f0d36fb6cf980cdddcbaa" kindref="member">removeAxis</ref>.</para>
<para>The axis rect layerable itself only draws a background pixmap or color, if specified (<ref refid="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5" kindref="member">setBackground</ref>). It is placed on the &quot;background&quot; layer initially (see <ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> for an explanation of the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> layer system). The axes that are held by the axis rect can be placed on other layers, independently of the axis rect.</para>
<para>Every axis rect has a child layout of type <ref refid="class_q_c_p_layout_inset" kindref="compound">QCPLayoutInset</ref>. It is accessible via <ref refid="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10" kindref="member">insetLayout</ref> and can be used to have other layout elements (or even other layouts with multiple elements) hovering inside the axis rect.</para>
<para>If an axis rect is clicked and dragged, it processes this by moving certain axis ranges. The behaviour can be controlled with <ref refid="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418" kindref="member">setRangeDrag</ref> and <ref refid="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" kindref="member">setRangeDragAxes</ref>. If the mouse wheel is scrolled while the cursor is on the axis rect, certain axes are scaled. This is controllable via <ref refid="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31" kindref="member">setRangeZoom</ref>, <ref refid="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2" kindref="member">setRangeZoomAxes</ref> and <ref refid="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac" kindref="member">setRangeZoomFactor</ref>. These interactions are only enabled if <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref> contains <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a2c4432b9aceafb94000be8d1b589ef18" kindref="member">QCP::iRangeDrag</ref> and <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037abee1e94353525a636aeaf0ba32b72e14" kindref="member">QCP::iRangeZoom</ref>.</para>
<para><image type="html" name="AxisRectSpacingOverview.png"></image>
 <center>Overview of the spacings and paddings that define the geometry of an axis. The dashed line on the far left indicates the viewport/widget border.</center> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QCPColorScaleAxisRectPrivate</label>
        <link refid="class_q_c_p_color_scale_axis_rect_private"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="11" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="8">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="16">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
      <node id="6">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="4887" column="1" bodyfile="qcustomplot.h" bodystart="4888" bodyend="5004"/>
    <listofallmembers>
      <member refid="class_q_c_p_axis_rect_1a792e1f3d9cb1591fca135bb0de9b81fc" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>addAxes</name></member>
      <member refid="class_q_c_p_axis_rect_1a2a845ee60eac7a8d5e71718c5e77c274" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>addAxis</name></member>
      <member refid="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>antialiased</name></member>
      <member refid="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>applyAntialiasingHint</name></member>
      <member refid="class_q_c_p_axis_rect_1a4a318008e2b7f881a14c3d97186b31f9" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>applyDefaultAntialiasingHint</name></member>
      <member refid="class_q_c_p_layout_element_1a2585bc8c5cc70ee712909751a2fc8909" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>autoMargins</name></member>
      <member refid="class_q_c_p_axis_rect_1a8db4722cb93e9c4a6f0d91150c200867" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>axes</name></member>
      <member refid="class_q_c_p_axis_rect_1a11657b8faebe9677180860e8057ede26" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>axes</name></member>
      <member refid="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>axis</name></member>
      <member refid="class_q_c_p_axis_rect_1a85b321acec0f694d8b5fdeafdbff3133" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>axisCount</name></member>
      <member refid="class_q_c_p_axis_rect_1a572deec9c9a4d5987d5c5f78521991e6" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>background</name></member>
      <member refid="class_q_c_p_axis_rect_1a7d09540e3fef12362d00e6bac92b6453" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>backgroundBrush</name></member>
      <member refid="class_q_c_p_axis_rect_1a059ede9a5fdcafb5cef280cd65fe4f3a" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>backgroundScaled</name></member>
      <member refid="class_q_c_p_axis_rect_1a06b98faf54b5491bff780294e423d3ff" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>backgroundScaledMode</name></member>
      <member refid="class_q_c_p_axis_rect_1acefdf1abaa8a8ab681e906cc2be9581e" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>bottom</name></member>
      <member refid="class_q_c_p_axis_rect_1ab15d4311d6535ccd7af504dc0e2b98c6" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>bottomLeft</name></member>
      <member refid="class_q_c_p_axis_rect_1a36dac884ec8fa3a3a2f3842ca7b7d32d" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>bottomRight</name></member>
      <member refid="class_q_c_p_axis_rect_1ac51055d83f5f414b6d013d3a24b0a941" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>calculateAutoMargin</name></member>
      <member refid="class_q_c_p_axis_rect_1ade3aef874bafcec6dd16174fba44c0b1" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>center</name></member>
      <member refid="class_q_c_p_layerable_1acbcfc9ecc75433747b1978a77b1864b3" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>clipRect</name></member>
      <member refid="class_q_c_p_layerable_1ae546370644a5551c76af739afc008bee" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>deselectEvent</name></member>
      <member refid="class_q_c_p_axis_rect_1af710c50530e370539a4439d6c4db9090" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>draw</name></member>
      <member refid="class_q_c_p_axis_rect_1ab49d338d1ce74b476fcead5b32cf06dc" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>drawBackground</name></member>
      <member refid="class_q_c_p_axis_rect_1a3aee067fd105f2fa8de9eb8024435ac5" prot="public" virt="virtual"><scope>QCPAxisRect</scope><name>elements</name></member>
      <member refid="class_q_c_p_axis_rect_1a2d9ded3eca97be1fcb5867949391bb88" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>graphs</name></member>
      <member refid="class_q_c_p_axis_rect_1acc4377809e79d9a089ab790f39429b0d" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>height</name></member>
      <member refid="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>initializeParentPlot</name></member>
      <member refid="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>insetLayout</name></member>
      <member refid="class_q_c_p_axis_rect_1a03c113a2175448300ee8f944e24776ba" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>items</name></member>
      <member refid="class_q_c_p_layerable_1a9d4e121a7f1d2314f906fe698209cac9" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>layer</name></member>
      <member refid="class_q_c_p_layerable_1abbf8657cedea73ac1c3499b521c90eba" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>layerChanged</name></member>
      <member refid="class_q_c_p_layout_element_1a4efdcbde9d28f410e5ef166c9d691deb" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>layout</name></member>
      <member refid="class_q_c_p_axis_rect_1a575e38ac71a21906dc2d7b3364db2d62" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>layoutChanged</name></member>
      <member refid="class_q_c_p_axis_rect_1afb4a3de02046b20b9310bdb8fca781c3" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>left</name></member>
      <member refid="class_q_c_p_axis_rect_1aa4a24f76360cfebe1bcf17a77fa7521b" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mAADragBackup</name></member>
      <member refid="class_q_c_p_layerable_1a3ab45a4c76a3333ce42eb217a81733ec" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mAntialiased</name></member>
      <member refid="class_q_c_p_layout_element_1aa5513622910f31d9309f87886bee597a" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>marginGroup</name></member>
      <member refid="class_q_c_p_layout_element_1acdd2c6b2ffb1c712e3bb3014fdec2e1b" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>marginGroups</name></member>
      <member refid="class_q_c_p_layout_element_1af4ac9450aa2d60863bf3a8ea0c940c9d" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>margins</name></member>
      <member refid="class_q_c_p_layout_element_1af61c70354d1275778d68206b2a1b2d36" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mAutoMargins</name></member>
      <member refid="class_q_c_p_axis_rect_1afe7a24d2a2bea98fc552fa826350ba81" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mAxes</name></member>
      <member refid="class_q_c_p_layout_element_1ad96efb977a26e360e8a64a4c1e56456d" prot="public" virt="virtual"><scope>QCPAxisRect</scope><name>maximumOuterSizeHint</name></member>
      <member refid="class_q_c_p_layout_element_1afb9503858d4aa0f3b9f1794b084fb40a" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>maximumSize</name></member>
      <member refid="class_q_c_p_axis_rect_1a5748e1a37f63c428e38b0a7724b46259" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mBackgroundBrush</name></member>
      <member refid="class_q_c_p_axis_rect_1a38fb1a15f43228a0c124553649303722" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mBackgroundPixmap</name></member>
      <member refid="class_q_c_p_axis_rect_1a5ad835f0fae5d7cc5ada9e063641dbf1" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mBackgroundScaled</name></member>
      <member refid="class_q_c_p_axis_rect_1a859fd368e794663e346b4f53f35078e9" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mBackgroundScaledMode</name></member>
      <member refid="class_q_c_p_axis_rect_1ab49a6698194cf0e9e38a1d734c0888a8" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mDragging</name></member>
      <member refid="class_q_c_p_axis_rect_1a274aef08c4de084a3f26c3e92fac3a79" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mDragStartHorzRange</name></member>
      <member refid="class_q_c_p_axis_rect_1ab362ee8f71a156d812a1ea793a1e42cb" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mDragStartVertRange</name></member>
      <member refid="class_q_c_p_layout_element_1a5eae30e28f28d73fd1c56409c011393e" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>minimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a46789036c4fcb190fa374f91321d7c09" prot="public" virt="virtual"><scope>QCPAxisRect</scope><name>minimumOuterSizeHint</name></member>
      <member refid="class_q_c_p_layout_element_1a60d4295468a2b57fe91f6f68e20c3993" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>minimumSize</name></member>
      <member refid="class_q_c_p_axis_rect_1a255240399e0fd24baad80cbbe46f698a" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mInsetLayout</name></member>
      <member refid="class_q_c_p_layerable_1aa38ec5891aff0f50b36fd63e9372a0cd" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mLayer</name></member>
      <member refid="class_q_c_p_layout_element_1aeafbbc1130e02eee663c5326761fc963" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mMarginGroups</name></member>
      <member refid="class_q_c_p_layout_element_1ac2a32b99ee527ca5dfff9da03628fe94" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a64a387973fd4addac842028c89088998" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a5ba71f25d1af4bb092b28df618538e63" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mMinimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1affef747c81632de33f08483b7fd10d01" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mMinimumSize</name></member>
      <member refid="class_q_c_p_axis_rect_1a6fcb12e052e276d57efbb128be31d6f5" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mNotAADragBackup</name></member>
      <member refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>mouseDoubleClickEvent</name></member>
      <member refid="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>mouseMoveEvent</name></member>
      <member refid="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>mousePressEvent</name></member>
      <member refid="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>mouseReleaseEvent</name></member>
      <member refid="class_q_c_p_layout_element_1a07bb4973379e75cb0fa5b032c1d24afd" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>moveToLayer</name></member>
      <member refid="class_q_c_p_layerable_1a3291445a980053e2d17a21d15957624e" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mParentLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1ae7c75c25549608bd688bdb65d4c38066" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mParentLayout</name></member>
      <member refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_axis_rect_1aa9f107f66ca3469ad50ee6cea7c9e237" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mRangeDrag</name></member>
      <member refid="class_q_c_p_axis_rect_1abd4f1d854b41a9c6730f3a3d605c42af" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mRangeDragHorzAxis</name></member>
      <member refid="class_q_c_p_axis_rect_1a3b0a86e5bb136a458d7bc20773e45853" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mRangeDragVertAxis</name></member>
      <member refid="class_q_c_p_axis_rect_1a215eff671d48df2edccc36e7f976f28c" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mRangeZoom</name></member>
      <member refid="class_q_c_p_axis_rect_1ad08d0250ed7b99de387d0ea6c7fd4dc1" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mRangeZoomFactorHorz</name></member>
      <member refid="class_q_c_p_axis_rect_1a32f063629581d5bf82b12769940b34ad" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mRangeZoomFactorVert</name></member>
      <member refid="class_q_c_p_axis_rect_1aa35eeb02f68b63f2069fcc80c9334b91" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mRangeZoomHorzAxis</name></member>
      <member refid="class_q_c_p_axis_rect_1aafb0e243294c158668499fd62cee057c" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mRangeZoomVertAxis</name></member>
      <member refid="class_q_c_p_layout_element_1ad8896f05550389f7b9e92c9e6cdf6e01" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mRect</name></member>
      <member refid="class_q_c_p_axis_rect_1aa74b9415598d59b49290e41e42d7ee27" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mScaledBackgroundPixmap</name></member>
      <member refid="class_q_c_p_layout_element_1acc012635b1ae178ff3c4da8a3af303a2" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mSizeConstraintRect</name></member>
      <member refid="class_q_c_p_layerable_1a62e3aed8427d6ce3ccf716f285106cb3" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>outerRect</name></member>
      <member refid="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>parentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1a36ed5b292b90934b524a4e5866a3526c" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layout_element_1ab4bb5c5a958451f5f153fdce350f13cf" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>parentPlotInitialized</name></member>
      <member refid="class_q_c_p_axis_rect_1a587d073a97b27bc7293fab4b2774ad59" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>plottables</name></member>
      <member refid="class_q_c_p_axis_rect_1a60b31dece805462c1b82eea2e69ba042" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>QCPAxisRect</name></member>
      <member refid="class_q_c_p_layerable_1a4f87f420cb2597e2b393aab934d2f099" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1a2c25c7bf27eaa1fad66807af855d8d81" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>QCPLayoutElement</name></member>
      <member refid="class_q_c_p_axis_rect_1a1cdf9df76adcfae45261690aa0ca2198" prot="private" virt="non-virtual"><scope>QCPAxisRect</scope><name>QCustomPlot</name></member>
      <member refid="class_q_c_p_axis_rect_1aa3a84c768ad6edd08fd4c5dec176828f" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>rangeDrag</name></member>
      <member refid="class_q_c_p_axis_rect_1aae5f99a044ca911685a306f01b7ff941" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>rangeDragAxes</name></member>
      <member refid="class_q_c_p_axis_rect_1a6d7c22cfc54fac7a3d6ef80b133a8574" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>rangeDragAxis</name></member>
      <member refid="class_q_c_p_axis_rect_1aa0d8414ef040523f8b2d55f0c0bddbee" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>rangeZoom</name></member>
      <member refid="class_q_c_p_axis_rect_1a86aac0f435f209d60dacd22cda10c104" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>rangeZoomAxes</name></member>
      <member refid="class_q_c_p_axis_rect_1a679c63f2b8daccfe6ec5110dce3dd3b6" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>rangeZoomAxis</name></member>
      <member refid="class_q_c_p_axis_rect_1ae4e6c4d143aacc88d2d3c56f117c2fe1" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>rangeZoomFactor</name></member>
      <member refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>realVisibility</name></member>
      <member refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>rect</name></member>
      <member refid="class_q_c_p_axis_rect_1a03c39cd9704f0d36fb6cf980cdddcbaa" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>removeAxis</name></member>
      <member refid="class_q_c_p_axis_rect_1a3f819d4a1b2193723d1fdafc573eea10" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>right</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aa7fa7e25cd23758b9915c64ed9f1be26c" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>scrInnerRect</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aabe2745b41a6131ed194e13591b08e04d" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>scrOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1a7498c2d0d081cf7cad0fb3bb93aa0e91" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>selectEvent</name></member>
      <member refid="class_q_c_p_layerable_1a908c9edda761886f33893be326dab77d" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>selectionCategory</name></member>
      <member refid="class_q_c_p_layout_element_1a62d60f1b0ee9bb23e38811d71586d79c" prot="public" virt="virtual"><scope>QCPAxisRect</scope><name>selectTest</name></member>
      <member refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setAntialiased</name></member>
      <member refid="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setAutoMargins</name></member>
      <member refid="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setBackground</name></member>
      <member refid="class_q_c_p_axis_rect_1ac48a2d5d9b7732e73b86605c69c5e4c1" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setBackground</name></member>
      <member refid="class_q_c_p_axis_rect_1a22a22b8668735438dc06f9a55fe46b33" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setBackground</name></member>
      <member refid="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setBackgroundScaled</name></member>
      <member refid="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setBackgroundScaledMode</name></member>
      <member refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layout_element_1a516e56f76b6bc100e8e71d329866847d" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setMarginGroup</name></member>
      <member refid="class_q_c_p_layout_element_1a8f450b1f3f992ad576fce2c63d8b79cf" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a03e0e9c48f230217c529b0819f832d84" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a0a8a17abc16b7923159fcc7608f94673" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setMinimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setMinimumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a8e0447614a0bf92de9a7304588c6b96e" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setMinimumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a38975ea13e36de8e53391ce41d94bc0f" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>setParentLayerable</name></member>
      <member refid="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setRangeDrag</name></member>
      <member refid="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setRangeDragAxes</name></member>
      <member refid="class_q_c_p_axis_rect_1af0fbc510147a2a54b9c8cd296e6df8ac" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setRangeDragAxes</name></member>
      <member refid="class_q_c_p_axis_rect_1a8366903edcb3bb703a8b0be783a85746" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setRangeDragAxes</name></member>
      <member refid="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setRangeZoom</name></member>
      <member refid="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setRangeZoomAxes</name></member>
      <member refid="class_q_c_p_axis_rect_1a89c1ab7ee6d2a14b56c57c9a796ba623" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setRangeZoomAxes</name></member>
      <member refid="class_q_c_p_axis_rect_1ae29d6e9e54ebd981769c986e498ae118" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setRangeZoomAxes</name></member>
      <member refid="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setRangeZoomFactor</name></member>
      <member refid="class_q_c_p_axis_rect_1ae83d187b03fc6fa4f00765ad50cd3fc3" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setRangeZoomFactor</name></member>
      <member refid="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setSizeConstraintRect</name></member>
      <member refid="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setupFullAxesBox</name></member>
      <member refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_axis_rect_1a7a8289346eb612f422c704f8b75cf479" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>size</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2a" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>SizeConstraintRect</name></member>
      <member refid="class_q_c_p_layout_element_1a66136f121ee3e1c933b748761203cab4" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>sizeConstraintRect</name></member>
      <member refid="class_q_c_p_axis_rect_1a45dbad181cbb9f09d068dbb76c817c95" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>top</name></member>
      <member refid="class_q_c_p_axis_rect_1a5a847b3ddeca3abec38d3838fefb0dbd" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>topLeft</name></member>
      <member refid="class_q_c_p_axis_rect_1a7aa221967549ba71b98c465bf8234758" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>topRight</name></member>
      <member refid="class_q_c_p_axis_rect_1add049d464b9ef2ccdc638adc4ccb4aca" prot="public" virt="virtual"><scope>QCPAxisRect</scope><name>update</name></member>
      <member refid="class_q_c_p_axis_rect_1a6024ccdc74f5dc0e8a0fe482e5b28a20" prot="protected" virt="non-virtual"><scope>QCPAxisRect</scope><name>updateAxesOffset</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>UpdatePhase</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da5d1ccf5d79967c232c3c511796860045" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>upLayout</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da288cb59a92280e47261a341f2813e676" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>upMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374dad6119882eba136357c2f627992e527d3" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>upPreparation</name></member>
      <member refid="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>visible</name></member>
      <member refid="class_q_c_p_axis_rect_1a93eeaa0c127d6d6fe8171b2455080262" prot="protected" virt="virtual"><scope>QCPAxisRect</scope><name>wheelEvent</name></member>
      <member refid="class_q_c_p_axis_rect_1a204645398a4f9d0b0189385c7c2cfb91" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>width</name></member>
      <member refid="class_q_c_p_axis_rect_1a5fc8460564e81dcc2a9343dc8bc1fe67" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>zoom</name></member>
      <member refid="class_q_c_p_axis_rect_1ae481c28b50e10cfbbec59fde45e77367" prot="public" virt="non-virtual"><scope>QCPAxisRect</scope><name>zoom</name></member>
      <member refid="class_q_c_p_axis_rect_1a1e8a674908e23d107aaf275227c54aaf" prot="public" virt="virtual"><scope>QCPAxisRect</scope><name>~QCPAxisRect</name></member>
      <member refid="class_q_c_p_layerable_1a4231cf5b3601d6d3a5781283e7a9735b" prot="public" virt="virtual"><scope>QCPAxisRect</scope><name>~QCPLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1a2fa26d3d22a2854c4da1d80f188db961" prot="public" virt="virtual"><scope>QCPAxisRect</scope><name>~QCPLayoutElement</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
