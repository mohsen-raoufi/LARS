<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_layout_grid" kind="class" language="C++" prot="public">
    <compoundname>QCPLayoutGrid</compoundname>
    <basecompoundref refid="class_q_c_p_layout" prot="public" virt="non-virtual">QCPLayout</basecompoundref>
    <derivedcompoundref refid="class_q_c_p_legend" prot="public" virt="non-virtual">QCPLegend</derivedcompoundref>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353cca" prot="public" static="no" strong="no">
        <type></type>
        <name>FillOrder</name>
        <qualifiedname>QCPLayoutGrid::FillOrder</qualifiedname>
        <enumvalue id="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353ccaa0202730954e26c474cc820164aedce3e" prot="public">
          <name>foRowsFirst</name>
          <briefdescription>
<para>Rows are filled first, and a new element is wrapped to the next column if the row count would exceed <ref refid="class_q_c_p_layout_grid_1ab36af18d77e4428386d02970382ee598" kindref="member">setWrap</ref>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353ccaac4cb4b796ec4822d5894b47b51627fb3" prot="public">
          <name>foColumnsFirst</name>
          <briefdescription>
<para>Columns are filled first, and a new element is wrapped to the next row if the column count would exceed <ref refid="class_q_c_p_layout_grid_1ab36af18d77e4428386d02970382ee598" kindref="member">setWrap</ref>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines in which direction the grid is filled when using <ref refid="class_q_c_p_layout_grid_1a4c44025dd25acd27e053cadfd448ad7b" kindref="member">addElement(QCPLayoutElement*)</ref>. The column/row at which wrapping into the next row/column occurs can be specified with <ref refid="class_q_c_p_layout_grid_1ab36af18d77e4428386d02970382ee598" kindref="member">setWrap</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1368" column="3" bodyfile="qcustomplot.h" bodystart="1368" bodyend="1370"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_layout_grid_1a3577d3855bf8ad20ef9079291a49f397" prot="protected" static="no" mutable="no">
        <type>QList&lt; QList&lt; <ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> * &gt; &gt;</type>
        <definition>QList&lt;QList&lt;QCPLayoutElement*&gt; &gt; QCPLayoutGrid::mElements</definition>
        <argsstring></argsstring>
        <name>mElements</name>
        <qualifiedname>QCPLayoutGrid::mElements</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1420" column="9" bodyfile="qcustomplot.h" bodystart="1420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layout_grid_1ac6aabe62339f94f18b9f8adab94b1840" prot="protected" static="no" mutable="no">
        <type>QList&lt; double &gt;</type>
        <definition>QList&lt;double&gt; QCPLayoutGrid::mColumnStretchFactors</definition>
        <argsstring></argsstring>
        <name>mColumnStretchFactors</name>
        <qualifiedname>QCPLayoutGrid::mColumnStretchFactors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1421" column="9" bodyfile="qcustomplot.h" bodystart="1421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layout_grid_1a36c85a7eaf342680fb9b8a4977486f16" prot="protected" static="no" mutable="no">
        <type>QList&lt; double &gt;</type>
        <definition>QList&lt;double&gt; QCPLayoutGrid::mRowStretchFactors</definition>
        <argsstring></argsstring>
        <name>mRowStretchFactors</name>
        <qualifiedname>QCPLayoutGrid::mRowStretchFactors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1422" column="9" bodyfile="qcustomplot.h" bodystart="1422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layout_grid_1ae9ac48f0791be07ead0a96dbd5622770" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int QCPLayoutGrid::mColumnSpacing</definition>
        <argsstring></argsstring>
        <name>mColumnSpacing</name>
        <qualifiedname>QCPLayoutGrid::mColumnSpacing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1423" column="7" bodyfile="qcustomplot.h" bodystart="1423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layout_grid_1a8b67f183f4645739cc4c794d75843b40" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int QCPLayoutGrid::mRowSpacing</definition>
        <argsstring></argsstring>
        <name>mRowSpacing</name>
        <qualifiedname>QCPLayoutGrid::mRowSpacing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1423" column="22" bodyfile="qcustomplot.h" bodystart="1423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layout_grid_1a17d90c289139847f68cca9e75d64b0fd" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int QCPLayoutGrid::mWrap</definition>
        <argsstring></argsstring>
        <name>mWrap</name>
        <qualifiedname>QCPLayoutGrid::mWrap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1424" column="7" bodyfile="qcustomplot.h" bodystart="1424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layout_grid_1a35a20072cbca5659dd75ca74eae87beb" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353cca" kindref="member">FillOrder</ref></type>
        <definition>FillOrder QCPLayoutGrid::mFillOrder</definition>
        <argsstring></argsstring>
        <name>mFillOrder</name>
        <qualifiedname>QCPLayoutGrid::mFillOrder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1425" column="13" bodyfile="qcustomplot.h" bodystart="1425" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_layout_grid_1ab2a4c1587dc8aed4c41c509c8d8d2a64" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPLayoutGrid::QCPLayoutGrid</definition>
        <argsstring>()</argsstring>
        <name>QCPLayoutGrid</name>
        <qualifiedname>QCPLayoutGrid::QCPLayoutGrid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an instance of <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref> and sets default values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1373" column="12" bodyfile="qcustomplot.cpp" bodystart="4104" bodyend="4110"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1ab4a55415452c4a58a408c4860a303bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPLayoutGrid::~QCPLayoutGrid</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>~QCPLayoutGrid</name>
        <qualifiedname>QCPLayoutGrid::~QCPLayoutGrid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1374" column="11" bodyfile="qcustomplot.cpp" bodystart="4112" bodyend="4117"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a19c66fd76cbce58a8e94f33797e0c0aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPLayoutGrid::rowCount</definition>
        <argsstring>() const</argsstring>
        <name>rowCount</name>
        <qualifiedname>QCPLayoutGrid::rowCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of rows in the layout.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a1a2962cbf45011405b64b913afa8e7a2" kindref="member">columnCount</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1377" column="7" bodyfile="qcustomplot.h" bodystart="1377" bodyend="1377"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a1a2962cbf45011405b64b913afa8e7a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPLayoutGrid::columnCount</definition>
        <argsstring>() const</argsstring>
        <name>columnCount</name>
        <qualifiedname>QCPLayoutGrid::columnCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of columns in the layout.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a19c66fd76cbce58a8e94f33797e0c0aa" kindref="member">rowCount</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1378" column="7" bodyfile="qcustomplot.h" bodystart="1378" bodyend="1378"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a7c0c87dcd496860d39cb3e193d108113" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QList&lt; double &gt;</type>
        <definition>QList&lt; double &gt; QCPLayoutGrid::columnStretchFactors</definition>
        <argsstring>() const</argsstring>
        <name>columnStretchFactors</name>
        <qualifiedname>QCPLayoutGrid::columnStretchFactors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1379" column="9" bodyfile="qcustomplot.h" bodystart="1379" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a39189b27f4b1ae4afbcd70d7d934431c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QList&lt; double &gt;</type>
        <definition>QList&lt; double &gt; QCPLayoutGrid::rowStretchFactors</definition>
        <argsstring>() const</argsstring>
        <name>rowStretchFactors</name>
        <qualifiedname>QCPLayoutGrid::rowStretchFactors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1380" column="9" bodyfile="qcustomplot.h" bodystart="1380" bodyend="1380"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1adcf4c387d5996bf6e4ae0ed26138247e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPLayoutGrid::columnSpacing</definition>
        <argsstring>() const</argsstring>
        <name>columnSpacing</name>
        <qualifiedname>QCPLayoutGrid::columnSpacing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1381" column="7" bodyfile="qcustomplot.h" bodystart="1381" bodyend="1381"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a4cb6c680505cd0ce6f85b9e217fd2cd0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPLayoutGrid::rowSpacing</definition>
        <argsstring>() const</argsstring>
        <name>rowSpacing</name>
        <qualifiedname>QCPLayoutGrid::rowSpacing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1382" column="7" bodyfile="qcustomplot.h" bodystart="1382" bodyend="1382"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a8bb71b52b2796c9f05fae6a32d2d0efd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPLayoutGrid::wrap</definition>
        <argsstring>() const</argsstring>
        <name>wrap</name>
        <qualifiedname>QCPLayoutGrid::wrap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1383" column="7" bodyfile="qcustomplot.h" bodystart="1383" bodyend="1383"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a6cb6563a13759222ad92ae397bd6c27e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353cca" kindref="member">FillOrder</ref></type>
        <definition>FillOrder QCPLayoutGrid::fillOrder</definition>
        <argsstring>() const</argsstring>
        <name>fillOrder</name>
        <qualifiedname>QCPLayoutGrid::fillOrder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1384" column="13" bodyfile="qcustomplot.h" bodystart="1384" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1ae38f31a71687b9d7ee3104852528fb50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::setColumnStretchFactor</definition>
        <argsstring>(int column, double factor)</argsstring>
        <name>setColumnStretchFactor</name>
        <qualifiedname>QCPLayoutGrid::setColumnStretchFactor</qualifiedname>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <param>
          <type>double</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the stretch <emphasis>factor</emphasis> of <emphasis>column</emphasis>.</para>
<para>Stretch factors control the relative sizes of rows and columns. Cells will not be resized beyond their minimum and maximum widths/heights, regardless of the stretch factor. (see <ref refid="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b" kindref="member">QCPLayoutElement::setMinimumSize</ref>, <ref refid="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95" kindref="member">QCPLayoutElement::setMaximumSize</ref>, <ref refid="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f" kindref="member">QCPLayoutElement::setSizeConstraintRect</ref>.)</para>
<para>The default stretch factor of newly created rows/columns is 1.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a6c2591d1a7e2534ce036989543b49e57" kindref="member">setColumnStretchFactors</ref>, <ref refid="class_q_c_p_layout_grid_1a7b0273de5369bd93d942edbaf5b166ec" kindref="member">setRowStretchFactor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1387" column="8" bodyfile="qcustomplot.cpp" bodystart="4241" bodyend="4251"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a6c2591d1a7e2534ce036989543b49e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::setColumnStretchFactors</definition>
        <argsstring>(const QList&lt; double &gt; &amp;factors)</argsstring>
        <name>setColumnStretchFactors</name>
        <qualifiedname>QCPLayoutGrid::setColumnStretchFactors</qualifiedname>
        <param>
          <type>const QList&lt; double &gt; &amp;</type>
          <declname>factors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the stretch <emphasis>factors</emphasis> of all columns. <emphasis>factors</emphasis> must have the size <ref refid="class_q_c_p_layout_grid_1a1a2962cbf45011405b64b913afa8e7a2" kindref="member">columnCount</ref>.</para>
<para>Stretch factors control the relative sizes of rows and columns. Cells will not be resized beyond their minimum and maximum widths/heights, regardless of the stretch factor. (see <ref refid="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b" kindref="member">QCPLayoutElement::setMinimumSize</ref>, <ref refid="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95" kindref="member">QCPLayoutElement::setMaximumSize</ref>, <ref refid="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f" kindref="member">QCPLayoutElement::setSizeConstraintRect</ref>.)</para>
<para>The default stretch factor of newly created rows/columns is 1.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1ae38f31a71687b9d7ee3104852528fb50" kindref="member">setColumnStretchFactor</ref>, <ref refid="class_q_c_p_layout_grid_1a200b45f9c908f96ebadaa3c8d87a2782" kindref="member">setRowStretchFactors</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1388" column="8" bodyfile="qcustomplot.cpp" bodystart="4265" bodyend="4280"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a7b0273de5369bd93d942edbaf5b166ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::setRowStretchFactor</definition>
        <argsstring>(int row, double factor)</argsstring>
        <name>setRowStretchFactor</name>
        <qualifiedname>QCPLayoutGrid::setRowStretchFactor</qualifiedname>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>double</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the stretch <emphasis>factor</emphasis> of <emphasis>row</emphasis>.</para>
<para>Stretch factors control the relative sizes of rows and columns. Cells will not be resized beyond their minimum and maximum widths/heights, regardless of the stretch factor. (see <ref refid="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b" kindref="member">QCPLayoutElement::setMinimumSize</ref>, <ref refid="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95" kindref="member">QCPLayoutElement::setMaximumSize</ref>, <ref refid="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f" kindref="member">QCPLayoutElement::setSizeConstraintRect</ref>.)</para>
<para>The default stretch factor of newly created rows/columns is 1.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a6c2591d1a7e2534ce036989543b49e57" kindref="member">setColumnStretchFactors</ref>, <ref refid="class_q_c_p_layout_grid_1a7b0273de5369bd93d942edbaf5b166ec" kindref="member">setRowStretchFactor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1389" column="8" bodyfile="qcustomplot.cpp" bodystart="4294" bodyend="4304"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a200b45f9c908f96ebadaa3c8d87a2782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::setRowStretchFactors</definition>
        <argsstring>(const QList&lt; double &gt; &amp;factors)</argsstring>
        <name>setRowStretchFactors</name>
        <qualifiedname>QCPLayoutGrid::setRowStretchFactors</qualifiedname>
        <param>
          <type>const QList&lt; double &gt; &amp;</type>
          <declname>factors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the stretch <emphasis>factors</emphasis> of all rows. <emphasis>factors</emphasis> must have the size <ref refid="class_q_c_p_layout_grid_1a19c66fd76cbce58a8e94f33797e0c0aa" kindref="member">rowCount</ref>.</para>
<para>Stretch factors control the relative sizes of rows and columns. Cells will not be resized beyond their minimum and maximum widths/heights, regardless of the stretch factor. (see <ref refid="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b" kindref="member">QCPLayoutElement::setMinimumSize</ref>, <ref refid="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95" kindref="member">QCPLayoutElement::setMaximumSize</ref>, <ref refid="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f" kindref="member">QCPLayoutElement::setSizeConstraintRect</ref>.)</para>
<para>The default stretch factor of newly created rows/columns is 1.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a7b0273de5369bd93d942edbaf5b166ec" kindref="member">setRowStretchFactor</ref>, <ref refid="class_q_c_p_layout_grid_1a6c2591d1a7e2534ce036989543b49e57" kindref="member">setColumnStretchFactors</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1390" column="8" bodyfile="qcustomplot.cpp" bodystart="4318" bodyend="4333"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a3a49272aba32bb0fddc3bb2a45a3dba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::setColumnSpacing</definition>
        <argsstring>(int pixels)</argsstring>
        <name>setColumnSpacing</name>
        <qualifiedname>QCPLayoutGrid::setColumnSpacing</qualifiedname>
        <param>
          <type>int</type>
          <declname>pixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the gap that is left blank between columns to <emphasis>pixels</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1aaef2cd2d456197ee06a208793678e436" kindref="member">setRowSpacing</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1391" column="8" bodyfile="qcustomplot.cpp" bodystart="4340" bodyend="4343"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1aaef2cd2d456197ee06a208793678e436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::setRowSpacing</definition>
        <argsstring>(int pixels)</argsstring>
        <name>setRowSpacing</name>
        <qualifiedname>QCPLayoutGrid::setRowSpacing</qualifiedname>
        <param>
          <type>int</type>
          <declname>pixels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the gap that is left blank between rows to <emphasis>pixels</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a3a49272aba32bb0fddc3bb2a45a3dba0" kindref="member">setColumnSpacing</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1392" column="8" bodyfile="qcustomplot.cpp" bodystart="4350" bodyend="4353"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1ab36af18d77e4428386d02970382ee598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::setWrap</definition>
        <argsstring>(int count)</argsstring>
        <name>setWrap</name>
        <qualifiedname>QCPLayoutGrid::setWrap</qualifiedname>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the maximum number of columns or rows that are used, before new elements added with <ref refid="class_q_c_p_layout_grid_1a4c44025dd25acd27e053cadfd448ad7b" kindref="member">addElement(QCPLayoutElement*)</ref> will start to fill the next row or column, respectively. It depends on <ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref>, whether rows or columns are wrapped.</para>
<para>If <emphasis>count</emphasis> is set to zero, no wrapping will ever occur.</para>
<para>If you wish to re-wrap the elements currently in the layout, call <ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref> with <emphasis>rearrange</emphasis> set to true (the actual fill order doesn&apos;t need to be changed for the rearranging to be done).</para>
<para>Note that the method <ref refid="class_q_c_p_layout_grid_1adff1a2ca691ed83d2d24a4cd1fe17012" kindref="member">addElement(int row, int column, QCPLayoutElement *element)</ref> with explicitly stated row and column is not subject to wrapping and can place elements even beyond the specified wrapping point.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1393" column="8" bodyfile="qcustomplot.cpp" bodystart="4372" bodyend="4375"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::setFillOrder</definition>
        <argsstring>(FillOrder order, bool rearrange=true)</argsstring>
        <name>setFillOrder</name>
        <qualifiedname>QCPLayoutGrid::setFillOrder</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353cca" kindref="member">FillOrder</ref></type>
          <declname>order</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rearrange</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the filling order and wrapping behaviour that is used when adding new elements with the method <ref refid="class_q_c_p_layout_grid_1a4c44025dd25acd27e053cadfd448ad7b" kindref="member">addElement(QCPLayoutElement*)</ref>.</para>
<para>The specified <emphasis>order</emphasis> defines whether rows or columns are filled first. Using <ref refid="class_q_c_p_layout_grid_1ab36af18d77e4428386d02970382ee598" kindref="member">setWrap</ref>, you can control at which row/column count wrapping into the next column/row will occur. If you set it to zero, no wrapping will ever occur. Changing the fill order also changes the meaning of the linear index used e.g. in <ref refid="class_q_c_p_layout_grid_1a4288f174082555f6bd92021bdedb75dc" kindref="member">elementAt</ref> and <ref refid="class_q_c_p_layout_grid_1a17dd220234d1bbf8835abcc666384d45" kindref="member">takeAt</ref>. The default fill order for <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref> is <ref refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353ccaac4cb4b796ec4822d5894b47b51627fb3" kindref="member">foColumnsFirst</ref>.</para>
<para>If you want to have all current elements arranged in the new order, set <emphasis>rearrange</emphasis> to true. The elements will be rearranged in a way that tries to preserve their linear index. However, empty cells are skipped during build-up of the new cell order, which shifts the succeeding element&apos;s index. The rearranging is performed even if the specified <emphasis>order</emphasis> is already the current fill order. Thus this method can be used to re-wrap the current elements.</para>
<para>If <emphasis>rearrange</emphasis> is false, the current element arrangement is not changed, which means the linear indexes change (because the linear index is dependent on the fill order).</para>
<para>Note that the method <ref refid="class_q_c_p_layout_grid_1adff1a2ca691ed83d2d24a4cd1fe17012" kindref="member">addElement(int row, int column, QCPLayoutElement *element)</ref> with explicitly stated row and column is not subject to wrapping and can place elements even beyond the specified wrapping point.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1ab36af18d77e4428386d02970382ee598" kindref="member">setWrap</ref>, <ref refid="class_q_c_p_layout_grid_1a4c44025dd25acd27e053cadfd448ad7b" kindref="member">addElement(QCPLayoutElement*)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1394" column="8" bodyfile="qcustomplot.cpp" bodystart="4402" bodyend="4425"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a6cf43f14d3fa335fd8758561ccf1f78c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::updateLayout</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>updateLayout</name>
        <qualifiedname>QCPLayoutGrid::updateLayout</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1a165c77f6287ac92e8d03017ad913378b">updateLayout</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1397" column="16" bodyfile="qcustomplot.cpp" bodystart="4589" bodyend="4615"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a9a8942aface780a02445ebcf14c48513" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>virtual int QCPLayoutGrid::elementCount</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>elementCount</name>
        <qualifiedname>QCPLayoutGrid::elementCount</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1acc6012e7dacc55c4282942c31c45b8d9">elementCount</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements/cells in the layout.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a7d5b968b4cf57393e9e387976d91f8f7" kindref="member">elements</ref>, <ref refid="class_q_c_p_layout_grid_1a4288f174082555f6bd92021bdedb75dc" kindref="member">elementAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1398" column="15" bodyfile="qcustomplot.h" bodystart="1398" bodyend="1398"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a4288f174082555f6bd92021bdedb75dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
        <definition>QCPLayoutElement * QCPLayoutGrid::elementAt</definition>
        <argsstring>(int index) const Q_DECL_OVERRIDE</argsstring>
        <name>elementAt</name>
        <qualifiedname>QCPLayoutGrid::elementAt</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1ab22bd9153d855a35ab4010267ae36a69">elementAt</reimplements>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\seebaseclassmethod</para>
<para>Note that the association of the linear <emphasis>index</emphasis> to the row/column based cells depends on the current setting of <ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a682ba76f130810ffd294032a1bfbcfcb" kindref="member">rowColToIndex</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1399" column="28" bodyfile="qcustomplot.cpp" bodystart="4625" bodyend="4634"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a17dd220234d1bbf8835abcc666384d45" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
        <definition>QCPLayoutElement * QCPLayoutGrid::takeAt</definition>
        <argsstring>(int index) Q_DECL_OVERRIDE</argsstring>
        <name>takeAt</name>
        <qualifiedname>QCPLayoutGrid::takeAt</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1aae3fc1bd5656aa737f18f0779789fd79">takeAt</reimplements>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\seebaseclassmethod</para>
<para>Note that the association of the linear <emphasis>index</emphasis> to the row/column based cells depends on the current setting of <ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a682ba76f130810ffd294032a1bfbcfcb" kindref="member">rowColToIndex</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1400" column="28" bodyfile="qcustomplot.cpp" bodystart="4644" bodyend="4658"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1aee961c2eb6cf8a85dcbc5a7d7b6c1a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QCPLayoutGrid::take</definition>
        <argsstring>(QCPLayoutElement *element) Q_DECL_OVERRIDE</argsstring>
        <name>take</name>
        <qualifiedname>QCPLayoutGrid::take</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1ad110be0de976cd8a817513a4a53d53db">take</reimplements>
        <param>
          <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the specified <emphasis>element</emphasis> from the layout and returns true on success.</para>
<para>If the <emphasis>element</emphasis> isn&apos;t in this layout, returns false.</para>
<para>Note that some layouts don&apos;t remove the respective cell right away but leave an empty cell after successful removal of the layout element. To collapse empty cells, use <ref refid="class_q_c_p_layout_grid_1a38621ca7aa633b6a9a88617df7f08672" kindref="member">simplify</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a17dd220234d1bbf8835abcc666384d45" kindref="member">takeAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1401" column="16" bodyfile="qcustomplot.cpp" bodystart="4661" bodyend="4677"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a7d5b968b4cf57393e9e387976d91f8f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QList&lt; <ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> * &gt;</type>
        <definition>QList&lt; QCPLayoutElement * &gt; QCPLayoutGrid::elements</definition>
        <argsstring>(bool recursive) const Q_DECL_OVERRIDE</argsstring>
        <name>elements</name>
        <qualifiedname>QCPLayoutGrid::elements</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1aca129722c019f91d3367046f80abfa77">elements</reimplements>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of all child elements in this layout element. If <emphasis>recursive</emphasis> is true, all sub-child elements are included in the list, too.</para>
<para><simplesect kind="warning"><para>There may be <computeroutput>nullptr</computeroutput> entries in the returned list. For example, <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref> may have empty cells which yield <computeroutput>nullptr</computeroutput> at the respective index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1402" column="17" bodyfile="qcustomplot.cpp" bodystart="4680" bodyend="4698"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a38621ca7aa633b6a9a88617df7f08672" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::simplify</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>simplify</name>
        <qualifiedname>QCPLayoutGrid::simplify</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1a41e6ac049143866e8f8b4964efab01b2">simplify</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Simplifies the layout by collapsing rows and columns which only contain empty cells. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1403" column="16" bodyfile="qcustomplot.cpp" bodystart="4703" bodyend="4745"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a0438bc58b4d3894d01db95b08d4268df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSize</type>
        <definition>QSize QCPLayoutGrid::minimumOuterSizeHint</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>minimumOuterSizeHint</name>
        <qualifiedname>QCPLayoutGrid::minimumOuterSizeHint</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1a46789036c4fcb190fa374f91321d7c09">minimumOuterSizeHint</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the suggested minimum size this layout element (the <ref refid="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c" kindref="member">outerRect</ref>) may be compressed to, if no manual minimum size is set.</para>
<para>if a minimum size (<ref refid="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b" kindref="member">setMinimumSize</ref>) was not set manually, parent layouts use the returned size (usually indirectly through QCPLayout::getFinalMinimumOuterSize) to determine the minimum allowed size of this layout element.</para>
<para>A manual minimum size is considered set if it is non-zero.</para>
<para>The default implementation simply returns the sum of the horizontal margins for the width and the sum of the vertical margins for the height. Reimplementations may use their detailed knowledge about the layout element&apos;s content to provide size hints. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1404" column="17" bodyfile="qcustomplot.cpp" bodystart="4748" bodyend="4762"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a41ce0014c220d77b909e2ca937f0e599" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QSize</type>
        <definition>QSize QCPLayoutGrid::maximumOuterSizeHint</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>maximumOuterSizeHint</name>
        <qualifiedname>QCPLayoutGrid::maximumOuterSizeHint</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1ad96efb977a26e360e8a64a4c1e56456d">maximumOuterSizeHint</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the suggested maximum size this layout element (the <ref refid="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c" kindref="member">outerRect</ref>) may be expanded to, if no manual maximum size is set.</para>
<para>if a maximum size (<ref refid="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95" kindref="member">setMaximumSize</ref>) was not set manually, parent layouts use the returned size (usually indirectly through QCPLayout::getFinalMaximumOuterSize) to determine the maximum allowed size of this layout element.</para>
<para>A manual maximum size is considered set if it is smaller than Qt&apos;s <computeroutput>QWIDGETSIZE_MAX</computeroutput>.</para>
<para>The default implementation simply returns <computeroutput>QWIDGETSIZE_MAX</computeroutput> for both width and height, implying no suggested maximum size. Reimplementations may use their detailed knowledge about the layout element&apos;s content to provide size hints. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1405" column="17" bodyfile="qcustomplot.cpp" bodystart="4765" bodyend="4784"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a602b426609b4411cf6a93c3ddf3a381a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
        <definition>QCPLayoutElement * QCPLayoutGrid::element</definition>
        <argsstring>(int row, int column) const</argsstring>
        <name>element</name>
        <qualifiedname>QCPLayoutGrid::element</qualifiedname>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the element in the cell in <emphasis>row</emphasis> and <emphasis>column</emphasis>.</para>
<para>Returns <computeroutput>nullptr</computeroutput> if either the row/column is invalid or if the cell is empty. In those cases, a qDebug message is printed. To check whether a cell exists and isn&apos;t empty, use <ref refid="class_q_c_p_layout_grid_1ab0cf4f7edc9414a3bfaddac0f46dc0a0" kindref="member">hasElement</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1adff1a2ca691ed83d2d24a4cd1fe17012" kindref="member">addElement</ref>, <ref refid="class_q_c_p_layout_grid_1ab0cf4f7edc9414a3bfaddac0f46dc0a0" kindref="member">hasElement</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1408" column="20" bodyfile="qcustomplot.cpp" bodystart="4127" bodyend="4142"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1adff1a2ca691ed83d2d24a4cd1fe17012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPLayoutGrid::addElement</definition>
        <argsstring>(int row, int column, QCPLayoutElement *element)</argsstring>
        <name>addElement</name>
        <qualifiedname>QCPLayoutGrid::addElement</qualifiedname>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds the <emphasis>element</emphasis> to cell with <emphasis>row</emphasis> and <emphasis>column</emphasis>. If <emphasis>element</emphasis> is already in a layout, it is first removed from there. If <emphasis>row</emphasis> or <emphasis>column</emphasis> don&apos;t exist yet, the layout is expanded accordingly.</para>
<para>Returns true if the element was added successfully, i.e. if the cell at <emphasis>row</emphasis> and <emphasis>column</emphasis> didn&apos;t already have an element.</para>
<para>Use the overload of this method without explicit row/column index to place the element according to the configured fill order and wrapping settings.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a602b426609b4411cf6a93c3ddf3a381a" kindref="member">element</ref>, <ref refid="class_q_c_p_layout_grid_1ab0cf4f7edc9414a3bfaddac0f46dc0a0" kindref="member">hasElement</ref>, <ref refid="class_q_c_p_layout_grid_1aee961c2eb6cf8a85dcbc5a7d7b6c1a00" kindref="member">take</ref>, <ref refid="class_q_c_p_layout_1a6c58f537d8086f352576ab7c5b15d0bc" kindref="member">remove</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1409" column="8" bodyfile="qcustomplot.cpp" bodystart="4159" bodyend="4173"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a4c44025dd25acd27e053cadfd448ad7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPLayoutGrid::addElement</definition>
        <argsstring>(QCPLayoutElement *element)</argsstring>
        <name>addElement</name>
        <qualifiedname>QCPLayoutGrid::addElement</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds the <emphasis>element</emphasis> to the next empty cell according to the current fill order (<ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref>) and wrapping (<ref refid="class_q_c_p_layout_grid_1ab36af18d77e4428386d02970382ee598" kindref="member">setWrap</ref>). If <emphasis>element</emphasis> is already in a layout, it is first removed from there. If necessary, the layout is expanded to hold the new element.</para>
<para>Returns true if the element was added successfully.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref>, <ref refid="class_q_c_p_layout_grid_1ab36af18d77e4428386d02970382ee598" kindref="member">setWrap</ref>, <ref refid="class_q_c_p_layout_grid_1a602b426609b4411cf6a93c3ddf3a381a" kindref="member">element</ref>, <ref refid="class_q_c_p_layout_grid_1ab0cf4f7edc9414a3bfaddac0f46dc0a0" kindref="member">hasElement</ref>, <ref refid="class_q_c_p_layout_grid_1aee961c2eb6cf8a85dcbc5a7d7b6c1a00" kindref="member">take</ref>, <ref refid="class_q_c_p_layout_1a6c58f537d8086f352576ab7c5b15d0bc" kindref="member">remove</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1410" column="8" bodyfile="qcustomplot.cpp" bodystart="4185" bodyend="4213"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1ab0cf4f7edc9414a3bfaddac0f46dc0a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPLayoutGrid::hasElement</definition>
        <argsstring>(int row, int column)</argsstring>
        <name>hasElement</name>
        <qualifiedname>QCPLayoutGrid::hasElement</qualifiedname>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the cell at <emphasis>row</emphasis> and <emphasis>column</emphasis> exists and contains a valid element, i.e. isn&apos;t empty.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a602b426609b4411cf6a93c3ddf3a381a" kindref="member">element</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1411" column="8" bodyfile="qcustomplot.cpp" bodystart="4221" bodyend="4227"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a886c0dcbabd51a45da399e044552b685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::expandTo</definition>
        <argsstring>(int newRowCount, int newColumnCount)</argsstring>
        <name>expandTo</name>
        <qualifiedname>QCPLayoutGrid::expandTo</qualifiedname>
        <param>
          <type>int</type>
          <declname>newRowCount</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newColumnCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expands the layout to have <emphasis>newRowCount</emphasis> rows and <emphasis>newColumnCount</emphasis> columns. So the last valid row index will be <emphasis>newRowCount-1</emphasis>, the last valid column index will be <emphasis>newColumnCount-1</emphasis>.</para>
<para>If the current column/row count is already larger or equal to <emphasis>newColumnCount/<emphasis>newRowCount</emphasis>,</emphasis> this function does nothing in that dimension.</para>
<para>Newly created cells are empty, new rows and columns have the stretch factor 1.</para>
<para>Note that upon a call to <ref refid="class_q_c_p_layout_grid_1adff1a2ca691ed83d2d24a4cd1fe17012" kindref="member">addElement</ref>, the layout is expanded automatically to contain the specified row and column, using this function.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a38621ca7aa633b6a9a88617df7f08672" kindref="member">simplify</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1412" column="8" bodyfile="qcustomplot.cpp" bodystart="4441" bodyend="4458"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a48af3dd7c3a653d9c3d7dd99bd02e838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::insertRow</definition>
        <argsstring>(int newIndex)</argsstring>
        <name>insertRow</name>
        <qualifiedname>QCPLayoutGrid::insertRow</qualifiedname>
        <param>
          <type>int</type>
          <declname>newIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts a new row with empty cells at the row index <emphasis>newIndex</emphasis>. Valid values for <emphasis>newIndex</emphasis> range from 0 (inserts a row at the top) to <emphasis>rowCount</emphasis> (appends a row at the bottom).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a1e880a321dbe8b43b471ccd764433dc4" kindref="member">insertColumn</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1413" column="8" bodyfile="qcustomplot.cpp" bodystart="4466" bodyend="4484"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a1e880a321dbe8b43b471ccd764433dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::insertColumn</definition>
        <argsstring>(int newIndex)</argsstring>
        <name>insertColumn</name>
        <qualifiedname>QCPLayoutGrid::insertColumn</qualifiedname>
        <param>
          <type>int</type>
          <declname>newIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts a new column with empty cells at the column index <emphasis>newIndex</emphasis>. Valid values for <emphasis>newIndex</emphasis> range from 0 (inserts a column at the left) to <emphasis>columnCount</emphasis> (appends a column at the right).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a48af3dd7c3a653d9c3d7dd99bd02e838" kindref="member">insertRow</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1414" column="8" bodyfile="qcustomplot.cpp" bodystart="4493" bodyend="4509"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a682ba76f130810ffd294032a1bfbcfcb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCPLayoutGrid::rowColToIndex</definition>
        <argsstring>(int row, int column) const</argsstring>
        <name>rowColToIndex</name>
        <qualifiedname>QCPLayoutGrid::rowColToIndex</qualifiedname>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts the given <emphasis>row</emphasis> and <emphasis>column</emphasis> to the linear index used by some methods of <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref> and <ref refid="class_q_c_p_layout" kindref="compound">QCPLayout</ref>.</para>
<para>The way the cells are indexed depends on <ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref>. If it is <ref refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353ccaa0202730954e26c474cc820164aedce3e" kindref="member">foRowsFirst</ref>, the indices increase left to right and then top to bottom. If it is <ref refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353ccaac4cb4b796ec4822d5894b47b51627fb3" kindref="member">foColumnsFirst</ref>, the indices increase top to bottom and then left to right.</para>
<para>For the returned index to be valid, <emphasis>row</emphasis> and <emphasis>column</emphasis> must be valid indices themselves, i.e. greater or equal to zero and smaller than the current rowCount/ columnCount.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a577223db920e2acb34bc1091080c76d1" kindref="member">indexToRowCol</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1415" column="7" bodyfile="qcustomplot.cpp" bodystart="4524" bodyend="4540"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a577223db920e2acb34bc1091080c76d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::indexToRowCol</definition>
        <argsstring>(int index, int &amp;row, int &amp;column) const</argsstring>
        <name>indexToRowCol</name>
        <qualifiedname>QCPLayoutGrid::indexToRowCol</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>column</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts the linear index to row and column indices and writes the result to <emphasis>row</emphasis> and <emphasis>column</emphasis>.</para>
<para>The way the cells are indexed depends on <ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref>. If it is <ref refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353ccaa0202730954e26c474cc820164aedce3e" kindref="member">foRowsFirst</ref>, the indices increase left to right and then top to bottom. If it is <ref refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353ccaac4cb4b796ec4822d5894b47b51627fb3" kindref="member">foColumnsFirst</ref>, the indices increase top to bottom and then left to right.</para>
<para>If there are no cells (i.e. column or row count is zero), sets <emphasis>row</emphasis> and <emphasis>column</emphasis> to -1.</para>
<para>For the retrieved <emphasis>row</emphasis> and <emphasis>column</emphasis> to be valid, the passed <emphasis>index</emphasis> must be valid itself, i.e. greater or equal to zero and smaller than the current <ref refid="class_q_c_p_layout_grid_1a9a8942aface780a02445ebcf14c48513" kindref="member">elementCount</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_grid_1a682ba76f130810ffd294032a1bfbcfcb" kindref="member">rowColToIndex</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1416" column="8" bodyfile="qcustomplot.cpp" bodystart="4557" bodyend="4586"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a4b9a251919936f127a63fc1b9911cd4e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::getMinimumRowColSizes</definition>
        <argsstring>(QVector&lt; int &gt; *minColWidths, QVector&lt; int &gt; *minRowHeights) const</argsstring>
        <name>getMinimumRowColSizes</name>
        <qualifiedname>QCPLayoutGrid::getMinimumRowColSizes</qualifiedname>
        <param>
          <type>QVector&lt; int &gt; *</type>
          <declname>minColWidths</declname>
        </param>
        <param>
          <type>QVector&lt; int &gt; *</type>
          <declname>minRowHeights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1428" column="8" bodyfile="qcustomplot.cpp" bodystart="4799" bodyend="4817"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_grid_1a9be77011ec5b5dfbe7fbda126659e1eb" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutGrid::getMaximumRowColSizes</definition>
        <argsstring>(QVector&lt; int &gt; *maxColWidths, QVector&lt; int &gt; *maxRowHeights) const</argsstring>
        <name>getMaximumRowColSizes</name>
        <qualifiedname>QCPLayoutGrid::getMaximumRowColSizes</qualifiedname>
        <param>
          <type>QVector&lt; int &gt; *</type>
          <declname>maxColWidths</declname>
        </param>
        <param>
          <type>QVector&lt; int &gt; *</type>
          <declname>maxRowHeights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1429" column="8" bodyfile="qcustomplot.cpp" bodystart="4832" bodyend="4850"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A layout that arranges child elements in a grid. </para>
    </briefdescription>
    <detaileddescription>
<para>Elements are laid out in a grid with configurable stretch factors (<ref refid="class_q_c_p_layout_grid_1ae38f31a71687b9d7ee3104852528fb50" kindref="member">setColumnStretchFactor</ref>, <ref refid="class_q_c_p_layout_grid_1a7b0273de5369bd93d942edbaf5b166ec" kindref="member">setRowStretchFactor</ref>) and spacing (<ref refid="class_q_c_p_layout_grid_1a3a49272aba32bb0fddc3bb2a45a3dba0" kindref="member">setColumnSpacing</ref>, <ref refid="class_q_c_p_layout_grid_1aaef2cd2d456197ee06a208793678e436" kindref="member">setRowSpacing</ref>).</para>
<para>Elements can be added to cells via <ref refid="class_q_c_p_layout_grid_1adff1a2ca691ed83d2d24a4cd1fe17012" kindref="member">addElement</ref>. The grid is expanded if the specified row or column doesn&apos;t exist yet. Whether a cell contains a valid layout element can be checked with <ref refid="class_q_c_p_layout_grid_1ab0cf4f7edc9414a3bfaddac0f46dc0a0" kindref="member">hasElement</ref>, that element can be retrieved with <ref refid="class_q_c_p_layout_grid_1a602b426609b4411cf6a93c3ddf3a381a" kindref="member">element</ref>. If rows and columns that only have empty cells shall be removed, call <ref refid="class_q_c_p_layout_grid_1a38621ca7aa633b6a9a88617df7f08672" kindref="member">simplify</ref>. Removal of elements is either done by just adding the element to a different layout or by using the <ref refid="class_q_c_p_layout" kindref="compound">QCPLayout</ref> interface <ref refid="class_q_c_p_layout_grid_1aee961c2eb6cf8a85dcbc5a7d7b6c1a00" kindref="member">take</ref> or <ref refid="class_q_c_p_layout_1a6c58f537d8086f352576ab7c5b15d0bc" kindref="member">remove</ref>.</para>
<para>If you use <ref refid="class_q_c_p_layout_grid_1a4c44025dd25acd27e053cadfd448ad7b" kindref="member">addElement(QCPLayoutElement*)</ref> without explicit parameters for <emphasis>row</emphasis> and <emphasis>column</emphasis>, the grid layout will choose the position according to the current <ref refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" kindref="member">setFillOrder</ref> and the wrapping (<ref refid="class_q_c_p_layout_grid_1ab36af18d77e4428386d02970382ee598" kindref="member">setWrap</ref>).</para>
<para>Row and column insertion can be performed with <ref refid="class_q_c_p_layout_grid_1a48af3dd7c3a653d9c3d7dd99bd02e838" kindref="member">insertRow</ref> and <ref refid="class_q_c_p_layout_grid_1a1e880a321dbe8b43b471ccd764433dc4" kindref="member">insertColumn</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="14" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="11">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="17">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QObject</label>
      </node>
      <node id="7">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="1346" column="1" bodyfile="qcustomplot.h" bodystart="1347" bodyend="1433"/>
    <listofallmembers>
      <member refid="class_q_c_p_layout_grid_1adff1a2ca691ed83d2d24a4cd1fe17012" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>addElement</name></member>
      <member refid="class_q_c_p_layout_grid_1a4c44025dd25acd27e053cadfd448ad7b" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>addElement</name></member>
      <member refid="class_q_c_p_layout_1af6dbbc24156a808da29cd1ec031729a3" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>adoptElement</name></member>
      <member refid="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>antialiased</name></member>
      <member refid="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>applyAntialiasingHint</name></member>
      <member refid="class_q_c_p_layout_element_1a0a8f18141bcf46cf40ad4c13324ff346" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>applyDefaultAntialiasingHint</name></member>
      <member refid="class_q_c_p_layout_element_1a2585bc8c5cc70ee712909751a2fc8909" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>autoMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a005c9f0fe84bc1591a2cf2c46fd477b4" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>calculateAutoMargin</name></member>
      <member refid="class_q_c_p_layout_1a02883bdf2769b5b227f0232dba1ac4ee" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>clear</name></member>
      <member refid="class_q_c_p_layerable_1acbcfc9ecc75433747b1978a77b1864b3" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>clipRect</name></member>
      <member refid="class_q_c_p_layout_grid_1a1a2962cbf45011405b64b913afa8e7a2" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>columnCount</name></member>
      <member refid="class_q_c_p_layout_grid_1adcf4c387d5996bf6e4ae0ed26138247e" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>columnSpacing</name></member>
      <member refid="class_q_c_p_layout_grid_1a7c0c87dcd496860d39cb3e193d108113" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>columnStretchFactors</name></member>
      <member refid="class_q_c_p_layerable_1ae546370644a5551c76af739afc008bee" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>deselectEvent</name></member>
      <member refid="class_q_c_p_layout_element_1ad1c597b1d608cfdd86e7b76819a94cfb" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>draw</name></member>
      <member refid="class_q_c_p_layout_grid_1a602b426609b4411cf6a93c3ddf3a381a" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>element</name></member>
      <member refid="class_q_c_p_layout_grid_1a4288f174082555f6bd92021bdedb75dc" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>elementAt</name></member>
      <member refid="class_q_c_p_layout_grid_1a9a8942aface780a02445ebcf14c48513" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>elementCount</name></member>
      <member refid="class_q_c_p_layout_grid_1a7d5b968b4cf57393e9e387976d91f8f7" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>elements</name></member>
      <member refid="class_q_c_p_layout_grid_1a886c0dcbabd51a45da399e044552b685" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>expandTo</name></member>
      <member refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353cca" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>FillOrder</name></member>
      <member refid="class_q_c_p_layout_grid_1a6cb6563a13759222ad92ae397bd6c27e" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>fillOrder</name></member>
      <member refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353ccaac4cb4b796ec4822d5894b47b51627fb3" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>foColumnsFirst</name></member>
      <member refid="class_q_c_p_layout_grid_1a7d49ee08773de6b2fd246edfed353ccaa0202730954e26c474cc820164aedce3e" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>foRowsFirst</name></member>
      <member refid="class_q_c_p_layout_1add49fd6843821a6126914b837ed52e22" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>getFinalMaximumOuterSize</name></member>
      <member refid="class_q_c_p_layout_1a864fddc84721f186663faf3683f1fa70" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>getFinalMinimumOuterSize</name></member>
      <member refid="class_q_c_p_layout_grid_1a9be77011ec5b5dfbe7fbda126659e1eb" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>getMaximumRowColSizes</name></member>
      <member refid="class_q_c_p_layout_grid_1a4b9a251919936f127a63fc1b9911cd4e" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>getMinimumRowColSizes</name></member>
      <member refid="class_q_c_p_layout_1a3e77be8006d39f2aafc1313d6e8fc3fd" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>getSectionSizes</name></member>
      <member refid="class_q_c_p_layout_grid_1ab0cf4f7edc9414a3bfaddac0f46dc0a0" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>hasElement</name></member>
      <member refid="class_q_c_p_layout_grid_1a577223db920e2acb34bc1091080c76d1" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>indexToRowCol</name></member>
      <member refid="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>initializeParentPlot</name></member>
      <member refid="class_q_c_p_layout_grid_1a1e880a321dbe8b43b471ccd764433dc4" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>insertColumn</name></member>
      <member refid="class_q_c_p_layout_grid_1a48af3dd7c3a653d9c3d7dd99bd02e838" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>insertRow</name></member>
      <member refid="class_q_c_p_layerable_1a9d4e121a7f1d2314f906fe698209cac9" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>layer</name></member>
      <member refid="class_q_c_p_layerable_1abbf8657cedea73ac1c3499b521c90eba" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>layerChanged</name></member>
      <member refid="class_q_c_p_layout_element_1a4efdcbde9d28f410e5ef166c9d691deb" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>layout</name></member>
      <member refid="class_q_c_p_layout_element_1a765f041a73af0c2de41b41a5a03e31a4" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>layoutChanged</name></member>
      <member refid="class_q_c_p_layerable_1a3ab45a4c76a3333ce42eb217a81733ec" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mAntialiased</name></member>
      <member refid="class_q_c_p_layout_element_1aa5513622910f31d9309f87886bee597a" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>marginGroup</name></member>
      <member refid="class_q_c_p_layout_element_1acdd2c6b2ffb1c712e3bb3014fdec2e1b" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>marginGroups</name></member>
      <member refid="class_q_c_p_layout_element_1af4ac9450aa2d60863bf3a8ea0c940c9d" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>margins</name></member>
      <member refid="class_q_c_p_layout_element_1af61c70354d1275778d68206b2a1b2d36" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mAutoMargins</name></member>
      <member refid="class_q_c_p_layout_grid_1a41ce0014c220d77b909e2ca937f0e599" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>maximumOuterSizeHint</name></member>
      <member refid="class_q_c_p_layout_element_1afb9503858d4aa0f3b9f1794b084fb40a" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>maximumSize</name></member>
      <member refid="class_q_c_p_layout_grid_1ae9ac48f0791be07ead0a96dbd5622770" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mColumnSpacing</name></member>
      <member refid="class_q_c_p_layout_grid_1ac6aabe62339f94f18b9f8adab94b1840" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mColumnStretchFactors</name></member>
      <member refid="class_q_c_p_layout_grid_1a3577d3855bf8ad20ef9079291a49f397" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mElements</name></member>
      <member refid="class_q_c_p_layout_grid_1a35a20072cbca5659dd75ca74eae87beb" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mFillOrder</name></member>
      <member refid="class_q_c_p_layout_element_1a5eae30e28f28d73fd1c56409c011393e" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>minimumMargins</name></member>
      <member refid="class_q_c_p_layout_grid_1a0438bc58b4d3894d01db95b08d4268df" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>minimumOuterSizeHint</name></member>
      <member refid="class_q_c_p_layout_element_1a60d4295468a2b57fe91f6f68e20c3993" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>minimumSize</name></member>
      <member refid="class_q_c_p_layerable_1aa38ec5891aff0f50b36fd63e9372a0cd" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mLayer</name></member>
      <member refid="class_q_c_p_layout_element_1aeafbbc1130e02eee663c5326761fc963" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mMarginGroups</name></member>
      <member refid="class_q_c_p_layout_element_1ac2a32b99ee527ca5dfff9da03628fe94" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a64a387973fd4addac842028c89088998" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a5ba71f25d1af4bb092b28df618538e63" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mMinimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1affef747c81632de33f08483b7fd10d01" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mMinimumSize</name></member>
      <member refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>mouseDoubleClickEvent</name></member>
      <member refid="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>mouseMoveEvent</name></member>
      <member refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>mousePressEvent</name></member>
      <member refid="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>mouseReleaseEvent</name></member>
      <member refid="class_q_c_p_layout_element_1a07bb4973379e75cb0fa5b032c1d24afd" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>moveToLayer</name></member>
      <member refid="class_q_c_p_layerable_1a3291445a980053e2d17a21d15957624e" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mParentLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1ae7c75c25549608bd688bdb65d4c38066" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mParentLayout</name></member>
      <member refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_layout_element_1ad8896f05550389f7b9e92c9e6cdf6e01" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mRect</name></member>
      <member refid="class_q_c_p_layout_grid_1a8b67f183f4645739cc4c794d75843b40" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mRowSpacing</name></member>
      <member refid="class_q_c_p_layout_grid_1a36c85a7eaf342680fb9b8a4977486f16" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mRowStretchFactors</name></member>
      <member refid="class_q_c_p_layout_element_1acc012635b1ae178ff3c4da8a3af303a2" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mSizeConstraintRect</name></member>
      <member refid="class_q_c_p_layerable_1a62e3aed8427d6ce3ccf716f285106cb3" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_layout_grid_1a17d90c289139847f68cca9e75d64b0fd" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>mWrap</name></member>
      <member refid="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>outerRect</name></member>
      <member refid="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>parentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1a36ed5b292b90934b524a4e5866a3526c" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layout_element_1ab4bb5c5a958451f5f153fdce350f13cf" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>parentPlotInitialized</name></member>
      <member refid="class_q_c_p_layerable_1a4f87f420cb2597e2b393aab934d2f099" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_layout_1a04222e6e1361fd802d48f1a25b7020d4" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>QCPLayout</name></member>
      <member refid="class_q_c_p_layout_element_1a2c25c7bf27eaa1fad66807af855d8d81" prot="public" virt="non-virtual" ambiguityscope="QCPLayout::QCPLayoutElement::"><scope>QCPLayoutGrid</scope><name>QCPLayoutElement</name></member>
      <member refid="class_q_c_p_layout_grid_1ab2a4c1587dc8aed4c41c509c8d8d2a64" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>QCPLayoutGrid</name></member>
      <member refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>realVisibility</name></member>
      <member refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>rect</name></member>
      <member refid="class_q_c_p_layout_1a4afbb4bef0071f72f91afdac4433a18e" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>releaseElement</name></member>
      <member refid="class_q_c_p_layout_1a6c58f537d8086f352576ab7c5b15d0bc" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>remove</name></member>
      <member refid="class_q_c_p_layout_1a2403f684fee3ce47132faaeed00bb066" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>removeAt</name></member>
      <member refid="class_q_c_p_layout_grid_1a682ba76f130810ffd294032a1bfbcfcb" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>rowColToIndex</name></member>
      <member refid="class_q_c_p_layout_grid_1a19c66fd76cbce58a8e94f33797e0c0aa" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>rowCount</name></member>
      <member refid="class_q_c_p_layout_grid_1a4cb6c680505cd0ce6f85b9e217fd2cd0" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>rowSpacing</name></member>
      <member refid="class_q_c_p_layout_grid_1a39189b27f4b1ae4afbcd70d7d934431c" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>rowStretchFactors</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aa7fa7e25cd23758b9915c64ed9f1be26c" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>scrInnerRect</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aabe2745b41a6131ed194e13591b08e04d" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>scrOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1a7498c2d0d081cf7cad0fb3bb93aa0e91" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>selectEvent</name></member>
      <member refid="class_q_c_p_layerable_1a908c9edda761886f33893be326dab77d" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>selectionCategory</name></member>
      <member refid="class_q_c_p_layout_element_1a62d60f1b0ee9bb23e38811d71586d79c" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>selectTest</name></member>
      <member refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setAntialiased</name></member>
      <member refid="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setAutoMargins</name></member>
      <member refid="class_q_c_p_layout_grid_1a3a49272aba32bb0fddc3bb2a45a3dba0" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setColumnSpacing</name></member>
      <member refid="class_q_c_p_layout_grid_1ae38f31a71687b9d7ee3104852528fb50" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setColumnStretchFactor</name></member>
      <member refid="class_q_c_p_layout_grid_1a6c2591d1a7e2534ce036989543b49e57" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setColumnStretchFactors</name></member>
      <member refid="class_q_c_p_layout_grid_1affc2f3cfd22f28698c5b29b960d2a391" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setFillOrder</name></member>
      <member refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layout_element_1a516e56f76b6bc100e8e71d329866847d" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setMarginGroup</name></member>
      <member refid="class_q_c_p_layout_element_1a8f450b1f3f992ad576fce2c63d8b79cf" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a03e0e9c48f230217c529b0819f832d84" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a0a8a17abc16b7923159fcc7608f94673" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setMinimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setMinimumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a8e0447614a0bf92de9a7304588c6b96e" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setMinimumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a38975ea13e36de8e53391ce41d94bc0f" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setParentLayerable</name></member>
      <member refid="class_q_c_p_layout_grid_1aaef2cd2d456197ee06a208793678e436" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setRowSpacing</name></member>
      <member refid="class_q_c_p_layout_grid_1a7b0273de5369bd93d942edbaf5b166ec" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setRowStretchFactor</name></member>
      <member refid="class_q_c_p_layout_grid_1a200b45f9c908f96ebadaa3c8d87a2782" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setRowStretchFactors</name></member>
      <member refid="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setSizeConstraintRect</name></member>
      <member refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_layout_grid_1ab36af18d77e4428386d02970382ee598" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>setWrap</name></member>
      <member refid="class_q_c_p_layout_grid_1a38621ca7aa633b6a9a88617df7f08672" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>simplify</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2a" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>SizeConstraintRect</name></member>
      <member refid="class_q_c_p_layout_element_1a66136f121ee3e1c933b748761203cab4" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>sizeConstraintRect</name></member>
      <member refid="class_q_c_p_layout_1aeac66a292f65cf7f8adf94eb92345b3e" prot="protected" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>sizeConstraintsChanged</name></member>
      <member refid="class_q_c_p_layout_grid_1aee961c2eb6cf8a85dcbc5a7d7b6c1a00" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>take</name></member>
      <member refid="class_q_c_p_layout_grid_1a17dd220234d1bbf8835abcc666384d45" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>takeAt</name></member>
      <member refid="class_q_c_p_layout_1a48ecc9c98ea90b547c3e27a931a8f7bd" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>update</name></member>
      <member refid="class_q_c_p_layout_grid_1a6cf43f14d3fa335fd8758561ccf1f78c" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>updateLayout</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>UpdatePhase</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da5d1ccf5d79967c232c3c511796860045" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>upLayout</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da288cb59a92280e47261a341f2813e676" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>upMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374dad6119882eba136357c2f627992e527d3" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>upPreparation</name></member>
      <member refid="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>visible</name></member>
      <member refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022" prot="protected" virt="virtual"><scope>QCPLayoutGrid</scope><name>wheelEvent</name></member>
      <member refid="class_q_c_p_layout_grid_1a8bb71b52b2796c9f05fae6a32d2d0efd" prot="public" virt="non-virtual"><scope>QCPLayoutGrid</scope><name>wrap</name></member>
      <member refid="class_q_c_p_layerable_1a4231cf5b3601d6d3a5781283e7a9735b" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>~QCPLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1a2fa26d3d22a2854c4da1d80f188db961" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>~QCPLayoutElement</name></member>
      <member refid="class_q_c_p_layout_grid_1ab4a55415452c4a58a408c4860a303bc5" prot="public" virt="virtual"><scope>QCPLayoutGrid</scope><name>~QCPLayoutGrid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
