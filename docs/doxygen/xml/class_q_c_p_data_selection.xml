<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_data_selection" kind="class" language="C++" prot="public">
    <compoundname>QCPDataSelection</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_q_c_p_data_selection_1aa1070e7c700f15d9018fad78b4732004" prot="private" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &gt;</type>
        <definition>QList&lt;QCPDataRange&gt; QCPDataSelection::mDataRanges</definition>
        <argsstring></argsstring>
        <name>mDataRanges</name>
        <qualifiedname>QCPDataSelection::mDataRanges</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="992" column="9" bodyfile="qcustomplot.h" bodystart="992" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_data_selection_1a0e0b7faaec7df1a7c77dd6f4883cdf0d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPDataSelection::QCPDataSelection</definition>
        <argsstring>()</argsstring>
        <name>QCPDataSelection</name>
        <qualifiedname>QCPDataSelection::QCPDataSelection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an empty <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="954" column="12" bodyfile="qcustomplot.cpp" bodystart="2415" bodyend="2417"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a738dfb4f5718c5df5ed35ea33ac37818" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPDataSelection::QCPDataSelection</definition>
        <argsstring>(const QCPDataRange &amp;range)</argsstring>
        <name>QCPDataSelection</name>
        <qualifiedname>QCPDataSelection::QCPDataSelection</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> containing the provided <emphasis>range</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="955" column="12" bodyfile="qcustomplot.cpp" bodystart="2422" bodyend="2425"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a664fa566569b17148abafd6b1dbbf347" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPDataSelection::operator==</definition>
        <argsstring>(const QCPDataSelection &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>QCPDataSelection::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this selection is identical (contains the same data ranges with the same begin and end indices) to <emphasis>other</emphasis>.</para>
<para>Note that both data selections must be in simplified state (the usual state of the selection, see <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">simplify</ref>) for this operator to return correct results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="957" column="8" bodyfile="qcustomplot.cpp" bodystart="2434" bodyend="2444"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a8324733cc88660ee4792ee60d6a4520c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPDataSelection::operator!=</definition>
        <argsstring>(const QCPDataSelection &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>QCPDataSelection::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="958" column="8" bodyfile="qcustomplot.h" bodystart="958" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a4584d4b0ea5c4f095bd7b70f88eb5d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
        <definition>QCPDataSelection &amp; QCPDataSelection::operator+=</definition>
        <argsstring>(const QCPDataSelection &amp;other)</argsstring>
        <name>operator+=</name>
        <qualifiedname>QCPDataSelection::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the data selection of <emphasis>other</emphasis> to this data selection, and then simplifies this data selection (see <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">simplify</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="959" column="20" bodyfile="qcustomplot.cpp" bodystart="2450" bodyend="2455"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a17058640d4e6f49984a0e7e42043df1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
        <definition>QCPDataSelection &amp; QCPDataSelection::operator+=</definition>
        <argsstring>(const QCPDataRange &amp;other)</argsstring>
        <name>operator+=</name>
        <qualifiedname>QCPDataSelection::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the data range <emphasis>other</emphasis> to this data selection, and then simplifies this data selection (see <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">simplify</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="960" column="20" bodyfile="qcustomplot.cpp" bodystart="2461" bodyend="2465"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a66f9fab70b026baa64bf8e52fe5de07e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
        <definition>QCPDataSelection &amp; QCPDataSelection::operator-=</definition>
        <argsstring>(const QCPDataSelection &amp;other)</argsstring>
        <name>operator-=</name>
        <qualifiedname>QCPDataSelection::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all data point indices that are described by <emphasis>other</emphasis> from this data selection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="961" column="20" bodyfile="qcustomplot.cpp" bodystart="2470" bodyend="2476"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a8d18b20d20dde737eefc10967e31cf73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
        <definition>QCPDataSelection &amp; QCPDataSelection::operator-=</definition>
        <argsstring>(const QCPDataRange &amp;other)</argsstring>
        <name>operator-=</name>
        <qualifiedname>QCPDataSelection::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all data point indices that are described by <emphasis>other</emphasis> from this data selection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="962" column="20" bodyfile="qcustomplot.cpp" bodystart="2481" bodyend="2522"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1abd8869ccb231ab991e8576de931f647d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPDataSelection::dataRangeCount</definition>
        <argsstring>() const</argsstring>
        <name>dataRangeCount</name>
        <qualifiedname>QCPDataSelection::dataRangeCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of ranges that make up the data selection. The ranges can be accessed by <ref refid="class_q_c_p_data_selection_1a6956acf6a9a49a353b4f9b58608978ad" kindref="member">dataRange</ref> via their index.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_data_selection_1a6956acf6a9a49a353b4f9b58608978ad" kindref="member">dataRange</ref>, <ref refid="class_q_c_p_data_selection_1ac9e74dd294778aa799216c3435c9c4f0" kindref="member">dataPointCount</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="973" column="7" bodyfile="qcustomplot.h" bodystart="973" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1ac9e74dd294778aa799216c3435c9c4f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCPDataSelection::dataPointCount</definition>
        <argsstring>() const</argsstring>
        <name>dataPointCount</name>
        <qualifiedname>QCPDataSelection::dataPointCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the total number of data points contained in all data ranges that make up this data selection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="974" column="7" bodyfile="qcustomplot.cpp" bodystart="2528" bodyend="2534"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a6956acf6a9a49a353b4f9b58608978ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref></type>
        <definition>QCPDataRange QCPDataSelection::dataRange</definition>
        <argsstring>(int index=0) const</argsstring>
        <name>dataRange</name>
        <qualifiedname>QCPDataSelection::dataRange</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the data range with the specified <emphasis>index</emphasis>.</para>
<para>If the data selection is simplified (the usual state of the selection, see <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">simplify</ref>), the ranges are sorted by ascending data point index.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_data_selection_1abd8869ccb231ab991e8576de931f647d" kindref="member">dataRangeCount</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="975" column="16" bodyfile="qcustomplot.cpp" bodystart="2544" bodyend="2554"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1ac3b1c5e7713d380cd9e447f4556b94da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &gt;</type>
        <definition>QList&lt; QCPDataRange &gt; QCPDataSelection::dataRanges</definition>
        <argsstring>() const</argsstring>
        <name>dataRanges</name>
        <qualifiedname>QCPDataSelection::dataRanges</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all data ranges that make up the data selection. If the data selection is simplified (the usual state of the selection, see <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">simplify</ref>), the ranges are sorted by ascending data point index.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_data_selection_1a6956acf6a9a49a353b4f9b58608978ad" kindref="member">dataRange</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="976" column="9" bodyfile="qcustomplot.h" bodystart="976" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a890f9291e0b7f065747040de5d68ff7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref></type>
        <definition>QCPDataRange QCPDataSelection::span</definition>
        <argsstring>() const</argsstring>
        <name>span</name>
        <qualifiedname>QCPDataSelection::span</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> which spans the entire data selection, including possible intermediate segments which are not part of the original data selection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="977" column="16" bodyfile="qcustomplot.cpp" bodystart="2560" bodyend="2566"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a46740c5aa7b80ae9b2abf6985d61b74f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPDataSelection::addDataRange</definition>
        <argsstring>(const QCPDataRange &amp;dataRange, bool simplify=true)</argsstring>
        <name>addDataRange</name>
        <qualifiedname>QCPDataSelection::addDataRange</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>dataRange</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>simplify</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the given <emphasis>dataRange</emphasis> to this data selection. This is equivalent to the += operator but allows disabling immediate simplification by setting <emphasis>simplify</emphasis> to false. This can improve performance if adding a very large amount of data ranges successively. In this case, make sure to call <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">simplify</ref> manually, after the operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="980" column="8" bodyfile="qcustomplot.cpp" bodystart="2574" bodyend="2579"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a385dd665e6690d39afb8bbd727b1e00b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPDataSelection::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>QCPDataSelection::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all data ranges. The data selection then contains no data points.</para>
<para><ref refid="class_q_c_p_data_selection_1a7f7526b475998dc0c3d6c376b24736c9" kindref="member">isEmpty</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="981" column="8" bodyfile="qcustomplot.cpp" bodystart="2586" bodyend="2589"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a7f7526b475998dc0c3d6c376b24736c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPDataSelection::isEmpty</definition>
        <argsstring>() const</argsstring>
        <name>isEmpty</name>
        <qualifiedname>QCPDataSelection::isEmpty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if there are no data ranges, and thus no data points, in this <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> instance.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_data_selection_1abd8869ccb231ab991e8576de931f647d" kindref="member">dataRangeCount</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="982" column="8" bodyfile="qcustomplot.h" bodystart="982" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPDataSelection::simplify</definition>
        <argsstring>()</argsstring>
        <name>simplify</name>
        <qualifiedname>QCPDataSelection::simplify</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts all data ranges by range begin index in ascending order, and then joins directly adjacent or overlapping ranges. This can reduce the number of individual data ranges in the selection, and prevents possible double-counting when iterating over the data points held by the data ranges.</para>
<para>This method is automatically called when using the addition/subtraction operators. The only case when <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">simplify</ref> is left to the user, is when calling <ref refid="class_q_c_p_data_selection_1a46740c5aa7b80ae9b2abf6985d61b74f" kindref="member">addDataRange</ref>, with the parameter <emphasis>simplify</emphasis> explicitly set to false. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="983" column="8" bodyfile="qcustomplot.cpp" bodystart="2600" bodyend="2625"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1a17b84d852911531d229f4a76aa239a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPDataSelection::enforceType</definition>
        <argsstring>(QCP::SelectionType type)</argsstring>
        <name>enforceType</name>
        <qualifiedname>QCPDataSelection::enforceType</qualifiedname>
        <param>
          <type><ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038" kindref="member">QCP::SelectionType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes sure this data selection conforms to the specified <emphasis>type</emphasis> selection type. Before the type is enforced, <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">simplify</ref> is called.</para>
<para>Depending on <emphasis>type</emphasis>, enforcing means adding new data points that were previously not part of the selection, or removing data points from the selection. If the current selection already conforms to <emphasis>type</emphasis>, the data selection is not changed.</para>
<para><simplesect kind="see"><para><ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038" kindref="member">QCP::SelectionType</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="984" column="8" bodyfile="qcustomplot.cpp" bodystart="2637" bodyend="2676"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1ab1ad3d5bbb55749c3f7ab1e45429c932" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPDataSelection::contains</definition>
        <argsstring>(const QCPDataSelection &amp;other) const</argsstring>
        <name>contains</name>
        <qualifiedname>QCPDataSelection::contains</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the data selection <emphasis>other</emphasis> is contained entirely in this data selection, i.e. all data point indices that are in <emphasis>other</emphasis> are also in this data selection.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_data_range_1a13ca398776374a3160aa85433718b812" kindref="member">QCPDataRange::contains</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="985" column="8" bodyfile="qcustomplot.cpp" bodystart="2684" bodyend="2698"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1af5267ced53687561367105ee77b874ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>QCPDataSelection QCPDataSelection::intersection</definition>
        <argsstring>(const QCPDataRange &amp;other) const</argsstring>
        <name>intersection</name>
        <qualifiedname>QCPDataSelection::intersection</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a data selection containing the points which are both in this data selection and in the data range <emphasis>other</emphasis>.</para>
<para>A common use case is to limit an unknown data selection to the valid range of a data container, using <ref refid="class_q_c_p_data_container_1aece90eeb2ba8d3c46d3d94023630fbc7" kindref="member">QCPDataContainer::dataRange</ref> as <emphasis>other</emphasis>. One can then safely iterate over the returned data selection without exceeding the data container&apos;s bounds. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="986" column="20" bodyfile="qcustomplot.cpp" bodystart="2708" bodyend="2715"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1af296ec5a948656c1d1ecb7b2970d2a24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>QCPDataSelection QCPDataSelection::intersection</definition>
        <argsstring>(const QCPDataSelection &amp;other) const</argsstring>
        <name>intersection</name>
        <qualifiedname>QCPDataSelection::intersection</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a data selection containing the points which are both in this data selection and in the data selection <emphasis>other</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="987" column="20" bodyfile="qcustomplot.cpp" bodystart="2721" bodyend="2728"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_data_selection_1ae8097f4e4ffee7b1b5df27c93eb365db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>QCPDataSelection QCPDataSelection::inverse</definition>
        <argsstring>(const QCPDataRange &amp;outerRange) const</argsstring>
        <name>inverse</name>
        <qualifiedname>QCPDataSelection::inverse</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>outerRange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a data selection which is the exact inverse of this data selection, with <emphasis>outerRange</emphasis> defining the base range on which to invert. If <emphasis>outerRange</emphasis> is smaller than the <ref refid="class_q_c_p_data_selection_1a890f9291e0b7f065747040de5d68ff7d" kindref="member">span</ref> of this data selection, it is expanded accordingly.</para>
<para>For example, this method can be used to retrieve all unselected segments by setting <emphasis>outerRange</emphasis> to the full data range of the plottable, and calling this method on a data selection holding the selected segments. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="988" column="20" bodyfile="qcustomplot.cpp" bodystart="2739" bodyend="2757"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_c_p_data_selection_1a49c0217af248959d59abfdd29401b678" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>const QCPDataSelection operator+</definition>
        <argsstring>(const QCPDataSelection &amp;a, const QCPDataSelection &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>QCPDataSelection::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> with the data points in <emphasis>a</emphasis> joined with the data points in <emphasis>b</emphasis>. The resulting data selection is already simplified (see <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">QCPDataSelection::simplify</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="963" column="40" bodyfile="qcustomplot.h" bodystart="1003" bodyend="1008"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_data_selection_1a5feed9419bd3df5cb4d4a761580545cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>const QCPDataSelection operator+</definition>
        <argsstring>(const QCPDataRange &amp;a, const QCPDataSelection &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>QCPDataSelection::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> with the data points in <emphasis>a</emphasis> joined with the data points in <emphasis>b</emphasis>. The resulting data selection is already simplified (see <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">QCPDataSelection::simplify</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="964" column="40" bodyfile="qcustomplot.h" bodystart="1014" bodyend="1019"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_data_selection_1aa574f51a74d6998e9be95e252e6be287" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>const QCPDataSelection operator+</definition>
        <argsstring>(const QCPDataSelection &amp;a, const QCPDataRange &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>QCPDataSelection::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> with the data points in <emphasis>a</emphasis> joined with the data points in <emphasis>b</emphasis>. The resulting data selection is already simplified (see <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">QCPDataSelection::simplify</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="965" column="40" bodyfile="qcustomplot.h" bodystart="1025" bodyend="1030"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_data_selection_1a0822e3133b80b5dedfc8050a19c1e0c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>const QCPDataSelection operator+</definition>
        <argsstring>(const QCPDataRange &amp;a, const QCPDataRange &amp;b)</argsstring>
        <name>operator+</name>
        <qualifiedname>QCPDataSelection::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> with the data points in <emphasis>a</emphasis> joined with the data points in <emphasis>b</emphasis>. The resulting data selection is already simplified (see <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">QCPDataSelection::simplify</ref>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="966" column="40" bodyfile="qcustomplot.h" bodystart="1036" bodyend="1041"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_data_selection_1a41147ef7d6303c746e398278b7b624d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>const QCPDataSelection operator-</definition>
        <argsstring>(const QCPDataSelection &amp;a, const QCPDataSelection &amp;b)</argsstring>
        <name>operator-</name>
        <qualifiedname>QCPDataSelection::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> with the data points which are in <emphasis>a</emphasis> but not in <emphasis>b</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="967" column="40" bodyfile="qcustomplot.h" bodystart="1046" bodyend="1051"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_data_selection_1a726652cb9ed840e3025435cc2c266468" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>const QCPDataSelection operator-</definition>
        <argsstring>(const QCPDataRange &amp;a, const QCPDataSelection &amp;b)</argsstring>
        <name>operator-</name>
        <qualifiedname>QCPDataSelection::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> with the data points which are in <emphasis>a</emphasis> but not in <emphasis>b</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="968" column="40" bodyfile="qcustomplot.h" bodystart="1056" bodyend="1061"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_data_selection_1a32c5784ac70946f09a09b2dd19816b78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>const QCPDataSelection operator-</definition>
        <argsstring>(const QCPDataSelection &amp;a, const QCPDataRange &amp;b)</argsstring>
        <name>operator-</name>
        <qualifiedname>QCPDataSelection::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> with the data points which are in <emphasis>a</emphasis> but not in <emphasis>b</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="969" column="40" bodyfile="qcustomplot.h" bodystart="1066" bodyend="1071"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_data_selection_1ad62dd67b505c1fa9c02d1aafabcb9acf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>const QCPDataSelection operator-</definition>
        <argsstring>(const QCPDataRange &amp;a, const QCPDataRange &amp;b)</argsstring>
        <name>operator-</name>
        <qualifiedname>QCPDataSelection::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> with the data points which are in <emphasis>a</emphasis> but not in <emphasis>b</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="970" column="40" bodyfile="qcustomplot.h" bodystart="1076" bodyend="1081"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_q_c_p_data_selection_1a6f171526f5441482568ff5e22e6af2c6" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool QCPDataSelection::lessThanDataRangeBegin</definition>
        <argsstring>(const QCPDataRange &amp;a, const QCPDataRange &amp;b)</argsstring>
        <name>lessThanDataRangeBegin</name>
        <qualifiedname>QCPDataSelection::lessThanDataRangeBegin</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="994" column="22" bodyfile="qcustomplot.h" bodystart="994" bodyend="994"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="related">
      <memberdef kind="function" id="class_q_c_p_data_selection_1aed65b8988afe6b03adeadf5edf663670" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QDebug</type>
        <definition>QDebug operator&lt;&lt;</definition>
        <argsstring>(QDebug d, const QCPDataSelection &amp;selection)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QCPDataSelection::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints <emphasis>selection</emphasis> in a human readable format to the qDebug output. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1097" column="8" bodyfile="qcustomplot.h" bodystart="1097" bodyend="1108"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Describes a data set by holding multiple <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> instances. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> manages multiple instances of <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> in order to represent any (possibly disjoint) set of data selection.</para>
<para>The data selection can be modified with addition and subtraction operators which take <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> and <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> instances, as well as methods such as <ref refid="class_q_c_p_data_selection_1a46740c5aa7b80ae9b2abf6985d61b74f" kindref="member">addDataRange</ref> and <ref refid="class_q_c_p_data_selection_1a385dd665e6690d39afb8bbd727b1e00b" kindref="member">clear</ref>. Read access is provided by <ref refid="class_q_c_p_data_selection_1a6956acf6a9a49a353b4f9b58608978ad" kindref="member">dataRange</ref>, <ref refid="class_q_c_p_data_selection_1ac3b1c5e7713d380cd9e447f4556b94da" kindref="member">dataRanges</ref>, <ref refid="class_q_c_p_data_selection_1abd8869ccb231ab991e8576de931f647d" kindref="member">dataRangeCount</ref>, etc.</para>
<para>The method <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">simplify</ref> is used to join directly adjacent or even overlapping <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> instances. <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> automatically simplifies when using the addition/subtraction operators. The only case when <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">simplify</ref> is left to the user, is when calling <ref refid="class_q_c_p_data_selection_1a46740c5aa7b80ae9b2abf6985d61b74f" kindref="member">addDataRange</ref>, with the parameter <emphasis>simplify</emphasis> explicitly set to false. This is useful if many data ranges will be added to the selection successively and the overhead for simplifying after each iteration shall be avoided. In this case, you should make sure to call <ref refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" kindref="member">simplify</ref> after completing the operation.</para>
<para>Use <ref refid="class_q_c_p_data_selection_1a17b84d852911531d229f4a76aa239a75" kindref="member">enforceType</ref> to bring the data selection into a state complying with the constraints for selections defined in <ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038" kindref="member">QCP::SelectionType</ref>.</para>
<para>QCustomPlot&apos;s data selection mechanism is based on <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> and <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref>.</para>
<sect1 id="class_q_c_p_data_selection_1qcpdataselection-iterating">
<title>Iterating over a data selection</title><para>As an example, the following code snippet calculates the average value of a graph&apos;s data <ref refid="class_q_c_p_abstract_plottable_1a040bf09f41d456284cfd39cc37aa068f" kindref="member">selection</ref>:</para>
<para><programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting> </para>
</sect1>
    </detaileddescription>
    <location file="qcustomplot.h" line="951" column="1" bodyfile="qcustomplot.h" bodystart="952" bodyend="995"/>
    <listofallmembers>
      <member refid="class_q_c_p_data_selection_1a46740c5aa7b80ae9b2abf6985d61b74f" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>addDataRange</name></member>
      <member refid="class_q_c_p_data_selection_1a385dd665e6690d39afb8bbd727b1e00b" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>clear</name></member>
      <member refid="class_q_c_p_data_selection_1ab1ad3d5bbb55749c3f7ab1e45429c932" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>contains</name></member>
      <member refid="class_q_c_p_data_selection_1ac9e74dd294778aa799216c3435c9c4f0" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>dataPointCount</name></member>
      <member refid="class_q_c_p_data_selection_1a6956acf6a9a49a353b4f9b58608978ad" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>dataRange</name></member>
      <member refid="class_q_c_p_data_selection_1abd8869ccb231ab991e8576de931f647d" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>dataRangeCount</name></member>
      <member refid="class_q_c_p_data_selection_1ac3b1c5e7713d380cd9e447f4556b94da" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>dataRanges</name></member>
      <member refid="class_q_c_p_data_selection_1a17b84d852911531d229f4a76aa239a75" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>enforceType</name></member>
      <member refid="class_q_c_p_data_selection_1af5267ced53687561367105ee77b874ab" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>intersection</name></member>
      <member refid="class_q_c_p_data_selection_1af296ec5a948656c1d1ecb7b2970d2a24" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>intersection</name></member>
      <member refid="class_q_c_p_data_selection_1ae8097f4e4ffee7b1b5df27c93eb365db" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>inverse</name></member>
      <member refid="class_q_c_p_data_selection_1a7f7526b475998dc0c3d6c376b24736c9" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>isEmpty</name></member>
      <member refid="class_q_c_p_data_selection_1a6f171526f5441482568ff5e22e6af2c6" prot="private" virt="non-virtual"><scope>QCPDataSelection</scope><name>lessThanDataRangeBegin</name></member>
      <member refid="class_q_c_p_data_selection_1aa1070e7c700f15d9018fad78b4732004" prot="private" virt="non-virtual"><scope>QCPDataSelection</scope><name>mDataRanges</name></member>
      <member refid="class_q_c_p_data_selection_1a8324733cc88660ee4792ee60d6a4520c" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator!=</name></member>
      <member refid="class_q_c_p_data_selection_1a49c0217af248959d59abfdd29401b678" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator+</name></member>
      <member refid="class_q_c_p_data_selection_1a5feed9419bd3df5cb4d4a761580545cc" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator+</name></member>
      <member refid="class_q_c_p_data_selection_1aa574f51a74d6998e9be95e252e6be287" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator+</name></member>
      <member refid="class_q_c_p_data_selection_1a0822e3133b80b5dedfc8050a19c1e0c5" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator+</name></member>
      <member refid="class_q_c_p_data_selection_1a4584d4b0ea5c4f095bd7b70f88eb5d9d" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator+=</name></member>
      <member refid="class_q_c_p_data_selection_1a17058640d4e6f49984a0e7e42043df1b" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator+=</name></member>
      <member refid="class_q_c_p_data_selection_1a41147ef7d6303c746e398278b7b624d1" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator-</name></member>
      <member refid="class_q_c_p_data_selection_1a726652cb9ed840e3025435cc2c266468" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator-</name></member>
      <member refid="class_q_c_p_data_selection_1a32c5784ac70946f09a09b2dd19816b78" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator-</name></member>
      <member refid="class_q_c_p_data_selection_1ad62dd67b505c1fa9c02d1aafabcb9acf" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator-</name></member>
      <member refid="class_q_c_p_data_selection_1a66f9fab70b026baa64bf8e52fe5de07e" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator-=</name></member>
      <member refid="class_q_c_p_data_selection_1a8d18b20d20dde737eefc10967e31cf73" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator-=</name></member>
      <member refid="class_q_c_p_data_selection_1aed65b8988afe6b03adeadf5edf663670" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_q_c_p_data_selection_1a664fa566569b17148abafd6b1dbbf347" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>operator==</name></member>
      <member refid="class_q_c_p_data_selection_1a0e0b7faaec7df1a7c77dd6f4883cdf0d" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>QCPDataSelection</name></member>
      <member refid="class_q_c_p_data_selection_1a738dfb4f5718c5df5ed35ea33ac37818" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>QCPDataSelection</name></member>
      <member refid="class_q_c_p_data_selection_1a4a2fbad1a6e4d1dd26fdfdf88956f2a4" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>simplify</name></member>
      <member refid="class_q_c_p_data_selection_1a890f9291e0b7f065747040de5d68ff7d" prot="public" virt="non-virtual"><scope>QCPDataSelection</scope><name>span</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
