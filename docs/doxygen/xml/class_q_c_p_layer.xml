<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_layer" kind="class" language="C++" prot="public">
    <compoundname>QCPLayer</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7c" prot="public" static="no" strong="no">
        <type></type>
        <name>LayerMode</name>
        <qualifiedname>QCPLayer::LayerMode</qualifiedname>
        <enumvalue id="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7ca02eb5e9a4cb7f1baf1e2b6b99e3b87ce" prot="public">
          <name>lmLogical</name>
          <briefdescription>
<para>Layer is used only for rendering order, and shares paint buffer with all other adjacent logical layers. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538" prot="public">
          <name>lmBuffered</name>
          <briefdescription>
<para>Layer has its own paint buffer and may be replotted individually (see <ref refid="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180" kindref="member">replot</ref>). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the different rendering modes of a layer. Depending on the mode, certain layers can be replotted individually, without the need to replot (possibly complex) layerables on other layers.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layer_1a938d57b04f4e4c23cedf1711f983919b" kindref="member">setMode</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="667" column="3" bodyfile="qcustomplot.h" bodystart="667" bodyend="669"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_layer_1a2f3374a7884bf403720cd1cf6f7ad1bb" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> *</type>
        <definition>QCustomPlot* QCPLayer::mParentPlot</definition>
        <argsstring></argsstring>
        <name>mParentPlot</name>
        <qualifiedname>QCPLayer::mParentPlot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="692" column="15" bodyfile="qcustomplot.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layer_1a91e6298183cb4b9dfd4efdfaf1ecc220" prot="protected" static="no" mutable="no">
        <type>QString</type>
        <definition>QString QCPLayer::mName</definition>
        <argsstring></argsstring>
        <name>mName</name>
        <qualifiedname>QCPLayer::mName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="693" column="11" bodyfile="qcustomplot.h" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layer_1a122088bcab6cec76a52b75ce8606605b" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int QCPLayer::mIndex</definition>
        <argsstring></argsstring>
        <name>mIndex</name>
        <qualifiedname>QCPLayer::mIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="694" column="7" bodyfile="qcustomplot.h" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layer_1a704aa71bba469383c3a3c598c1ec0d28" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref> * &gt;</type>
        <definition>QList&lt;QCPLayerable*&gt; QCPLayer::mChildren</definition>
        <argsstring></argsstring>
        <name>mChildren</name>
        <qualifiedname>QCPLayer::mChildren</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="695" column="9" bodyfile="qcustomplot.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layer_1a264950deb08e589460c126c895a1e2b5" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPLayer::mVisible</definition>
        <argsstring></argsstring>
        <name>mVisible</name>
        <qualifiedname>QCPLayer::mVisible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="696" column="8" bodyfile="qcustomplot.h" bodystart="696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layer_1a11bd0aa190d8fa21c8c7673d070737c8" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7c" kindref="member">LayerMode</ref></type>
        <definition>LayerMode QCPLayer::mMode</definition>
        <argsstring></argsstring>
        <name>mMode</name>
        <qualifiedname>QCPLayer::mMode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="697" column="13" bodyfile="qcustomplot.h" bodystart="697" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layer_1aa0bdbc75e4350a0669ff515b3476a3d3" prot="protected" static="no" mutable="no">
        <type>QWeakPointer&lt; <ref refid="class_q_c_p_abstract_paint_buffer" kindref="compound">QCPAbstractPaintBuffer</ref> &gt;</type>
        <definition>QWeakPointer&lt;QCPAbstractPaintBuffer&gt; QCPLayer::mPaintBuffer</definition>
        <argsstring></argsstring>
        <name>mPaintBuffer</name>
        <qualifiedname>QCPLayer::mPaintBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="700" column="16" bodyfile="qcustomplot.h" bodystart="700" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_c_p_layer_1a1cdf9df76adcfae45261690aa0ca2198" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCustomPlot</definition>
        <argsstring></argsstring>
        <name>QCustomPlot</name>
        <qualifiedname>QCPLayer::QCustomPlot</qualifiedname>
        <param>
          <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="711" column="16" bodyfile="qcustomplot.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_layer_1ad655f55cccf49ba14d5172ec517e07ae" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPLayerable</definition>
        <argsstring></argsstring>
        <name>QCPLayerable</name>
        <qualifiedname>QCPLayer::QCPLayerable</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="712" column="16" bodyfile="qcustomplot.h" bodystart="712" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_layer_1a5d0657fc86d624e5efbe930ef21af718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPLayer::QCPLayer</definition>
        <argsstring>(QCustomPlot *parentPlot, const QString &amp;layerName)</argsstring>
        <name>QCPLayer</name>
        <qualifiedname>QCPLayer::QCPLayer</qualifiedname>
        <param>
          <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> *</type>
          <declname>parentPlot</declname>
        </param>
        <param>
          <type>const QString &amp;</type>
          <declname>layerName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> instance.</para>
<para>Normally you shouldn&apos;t directly instantiate layers, use <ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">QCustomPlot::addLayer</ref> instead.</para>
<para><simplesect kind="warning"><para>It is not checked that <emphasis>layerName</emphasis> is actually a unique layer name in <emphasis>parentPlot</emphasis>. This check is only performed by <ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">QCustomPlot::addLayer</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="672" column="3" bodyfile="qcustomplot.cpp" bodystart="1067" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1afc1a8940f8e34c9f25ead9dfd4828cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPLayer::~QCPLayer</definition>
        <argsstring>()</argsstring>
        <name>~QCPLayer</name>
        <qualifiedname>QCPLayer::~QCPLayer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="673" column="11" bodyfile="qcustomplot.cpp" bodystart="1079" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1a923cb87bb467eeb17d649ba2b2fe4f5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> *</type>
        <definition>QCustomPlot * QCPLayer::parentPlot</definition>
        <argsstring>() const</argsstring>
        <name>parentPlot</name>
        <qualifiedname>QCPLayer::parentPlot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="676" column="15" bodyfile="qcustomplot.h" bodystart="676" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1a37806f662b50b588fb1029a14fc5ef50" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>QString QCPLayer::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>QCPLayer::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="677" column="11" bodyfile="qcustomplot.h" bodystart="677" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1ad322905c4700dcc7ceba63e011c730d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPLayer::index</definition>
        <argsstring>() const</argsstring>
        <name>index</name>
        <qualifiedname>QCPLayer::index</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index this layer has in the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>. The index is the integer number by which this layer can be accessed via <ref refid="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159" kindref="member">QCustomPlot::layer</ref>.</para>
<para>Layers with higher indices will be drawn above layers with lower indices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="678" column="7" bodyfile="qcustomplot.h" bodystart="678" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1a183b90941fc78f0b136edd77c5fb6966" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref> * &gt;</type>
        <definition>QList&lt; QCPLayerable * &gt; QCPLayer::children</definition>
        <argsstring>() const</argsstring>
        <name>children</name>
        <qualifiedname>QCPLayer::children</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of all layerables on this layer. The order corresponds to the rendering order: layerables with higher indices are drawn above layerables with lower indices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="679" column="9" bodyfile="qcustomplot.h" bodystart="679" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1ad1cc2d6b32d2abb33c7f449b964e068c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPLayer::visible</definition>
        <argsstring>() const</argsstring>
        <name>visible</name>
        <qualifiedname>QCPLayer::visible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="680" column="8" bodyfile="qcustomplot.h" bodystart="680" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1a44ae50b011b19f3dd46a38d8e2e2c1b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7c" kindref="member">LayerMode</ref></type>
        <definition>LayerMode QCPLayer::mode</definition>
        <argsstring>() const</argsstring>
        <name>mode</name>
        <qualifiedname>QCPLayer::mode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="681" column="13" bodyfile="qcustomplot.h" bodystart="681" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1ac07671f74edf6884b51a82afb2c19516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayer::setVisible</definition>
        <argsstring>(bool visible)</argsstring>
        <name>setVisible</name>
        <qualifiedname>QCPLayer::setVisible</qualifiedname>
        <param>
          <type>bool</type>
          <declname>visible</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether this layer is visible or not. If <emphasis>visible</emphasis> is set to false, all layerables on this layer will be invisible.</para>
<para>This function doesn&apos;t change the visibility property of the layerables (<ref refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" kindref="member">QCPLayerable::setVisible</ref>), but the <ref refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" kindref="member">QCPLayerable::realVisibility</ref> of each layerable takes the visibility of the parent layer into account. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="684" column="8" bodyfile="qcustomplot.cpp" bodystart="1101" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1a938d57b04f4e4c23cedf1711f983919b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayer::setMode</definition>
        <argsstring>(LayerMode mode)</argsstring>
        <name>setMode</name>
        <qualifiedname>QCPLayer::setMode</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7c" kindref="member">LayerMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the rendering mode of this layer.</para>
<para>If <emphasis>mode</emphasis> is set to <ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538" kindref="member">lmBuffered</ref> for a layer, it will be given a dedicated paint buffer by the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance. This means it may be replotted individually by calling <ref refid="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180" kindref="member">QCPLayer::replot</ref>, without needing to replot all other layers.</para>
<para>Layers which are set to <ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7ca02eb5e9a4cb7f1baf1e2b6b99e3b87ce" kindref="member">lmLogical</ref> (the default) are used only to define the rendering order and can&apos;t be replotted individually.</para>
<para>Note that each layer which is set to <ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538" kindref="member">lmBuffered</ref> requires additional paint buffers for the layers below, above and for the layer itself. This increases the memory consumption and (slightly) decreases the repainting speed because multiple paint buffers need to be joined. So you should carefully choose which layers benefit from having their own paint buffer. A typical example would be a layer which contains certain layerables (e.g. items) that need to be changed and thus replotted regularly, while all other layerables on other layers stay static. By default, only the topmost layer called &quot;overlay&quot; is in mode <ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538" kindref="member">lmBuffered</ref>, and contains the selection rect.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180" kindref="member">replot</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="685" column="8" bodyfile="qcustomplot.cpp" bodystart="1127" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayer::replot</definition>
        <argsstring>()</argsstring>
        <name>replot</name>
        <qualifiedname>QCPLayer::replot</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the layer mode (<ref refid="class_q_c_p_layer_1a938d57b04f4e4c23cedf1711f983919b" kindref="member">setMode</ref>) is set to <ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538" kindref="member">lmBuffered</ref>, this method allows replotting only the layerables on this specific layer, without the need to replot all other layers (as a call to <ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">QCustomPlot::replot</ref> would do).</para>
<para><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> also makes sure to replot all layers instead of only this one, if the layer ordering or any layerable-layer-association has changed since the last full replot and any other paint buffers were thus invalidated.</para>
<para>If the layer mode is <ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7ca02eb5e9a4cb7f1baf1e2b6b99e3b87ce" kindref="member">lmLogical</ref> however, this method simply calls <ref refid="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af" kindref="member">QCustomPlot::replot</ref> on the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance.</para>
<para><simplesect kind="see"><para>draw </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="688" column="8" bodyfile="qcustomplot.cpp" bodystart="1198" bodyend="1212"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_layer_1ab831a99c8d30b15ec4533ca341e8813b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayer::draw</definition>
        <argsstring>(QCPPainter *painter)</argsstring>
        <name>draw</name>
        <qualifiedname>QCPLayer::draw</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="703" column="8" bodyfile="qcustomplot.cpp" bodystart="1143" bodyend="1156"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1a4a8e0a86f31462299e7fc8e8158dd2c6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayer::drawToPaintBuffer</definition>
        <argsstring>()</argsstring>
        <name>drawToPaintBuffer</name>
        <qualifiedname>QCPLayer::drawToPaintBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="704" column="8" bodyfile="qcustomplot.cpp" bodystart="1166" bodyend="1182"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1a57ce5e49364aa9122276d5df3b4a0ddc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayer::addChild</definition>
        <argsstring>(QCPLayerable *layerable, bool prepend)</argsstring>
        <name>addChild</name>
        <qualifiedname>QCPLayer::addChild</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref> *</type>
          <declname>layerable</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>prepend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="705" column="8" bodyfile="qcustomplot.cpp" bodystart="1224" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layer_1ac2f64ac7761650582d968d86670ef362" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayer::removeChild</definition>
        <argsstring>(QCPLayerable *layerable)</argsstring>
        <name>removeChild</name>
        <qualifiedname>QCPLayer::removeChild</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref> *</type>
          <declname>layerable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="706" column="8" bodyfile="qcustomplot.cpp" bodystart="1247" bodyend="1255"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A layer that may contain objects, to control the rendering order. </para>
    </briefdescription>
    <detaileddescription>
<para>The Layering system of <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> is the mechanism to control the rendering order of the elements inside the plot.</para>
<para>It is based on the two classes <ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> and <ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref>. <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> holds an ordered list of one or more instances of <ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> (see <ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">QCustomPlot::addLayer</ref>, <ref refid="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159" kindref="member">QCustomPlot::layer</ref>, <ref refid="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" kindref="member">QCustomPlot::moveLayer</ref>, etc.). When replotting, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> goes through the list of layers bottom to top and successively draws the layerables of the layers into the paint buffer(s).</para>
<para>A <ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> contains an ordered list of <ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref> instances. <ref refid="class_q_c_p_layerable" kindref="compound">QCPLayerable</ref> is an abstract base class from which almost all visible objects derive, like axes, grids, graphs, items, etc.</para>
<sect1 id="class_q_c_p_layer_1qcplayer-defaultlayers">
<title>Default layers</title><para>Initially, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> has six layers: &quot;background&quot;, &quot;grid&quot;, &quot;main&quot;, &quot;axes&quot;, &quot;legend&quot; and &quot;overlay&quot; (in that order). On top is the &quot;overlay&quot; layer, which only contains the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>&apos;s selection rect (<ref refid="class_q_custom_plot_1ad7df2bcbba307e644db383b449e31efd" kindref="member">QCustomPlot::selectionRect</ref>). The next two layers &quot;axes&quot; and &quot;legend&quot; contain the default axes and legend, so they will be drawn above plottables. In the middle, there is the &quot;main&quot; layer. It is initially empty and set as the current layer (see <ref refid="class_q_custom_plot_1a73a6dc47c653bb6f8f030abca5a11852" kindref="member">QCustomPlot::setCurrentLayer</ref>). This means, all new plottables, items etc. are created on this layer by default. Then comes the &quot;grid&quot; layer which contains the <ref refid="class_q_c_p_grid" kindref="compound">QCPGrid</ref> instances (which belong tightly to <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref>, see <ref refid="class_q_c_p_axis_1a63f1dd2df663680d2a8d06c19592dd63" kindref="member">QCPAxis::grid</ref>). The Axis rect background shall be drawn behind everything else, thus the default <ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> instance is placed on the &quot;background&quot; layer. Of course, the layer affiliation of the individual objects can be changed as required (<ref refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" kindref="member">QCPLayerable::setLayer</ref>).</para>
</sect1>
<sect1 id="class_q_c_p_layer_1qcplayer-ordering">
<title>Controlling the rendering order via layers</title><para>Controlling the ordering of layerables in the plot is easy: Create a new layer in the position you want the layerable to be in, e.g. above &quot;main&quot;, with <ref refid="class_q_custom_plot_1a8f33108881c2e3c2fec50aa321e169af" kindref="member">QCustomPlot::addLayer</ref>. Then set the current layer with <ref refid="class_q_custom_plot_1a73a6dc47c653bb6f8f030abca5a11852" kindref="member">QCustomPlot::setCurrentLayer</ref> to that new layer and finally create the objects normally. They will be placed on the new layer automatically, due to the current layer setting. Alternatively you could have also ignored the current layer setting and just moved the objects with <ref refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" kindref="member">QCPLayerable::setLayer</ref> to the desired layer after creating them.</para>
<para>It is also possible to move whole layers. For example, If you want the grid to be shown in front of all plottables/items on the &quot;main&quot; layer, just move it above &quot;main&quot; with <ref refid="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104" kindref="member">QCustomPlot::moveLayer</ref>.</para>
<para>The rendering order within one layer is simply by order of creation or insertion. The item created last (or added last to the layer), is drawn on top of all other objects on that layer.</para>
<para>When a layer is deleted, the objects on it are not deleted with it, but fall on the layer below the deleted layer, see <ref refid="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94" kindref="member">QCustomPlot::removeLayer</ref>.</para>
</sect1>
<sect1 id="class_q_c_p_layer_1qcplayer-buffering">
<title>Replotting only a specific layer</title><para>If the layer mode (<ref refid="class_q_c_p_layer_1a938d57b04f4e4c23cedf1711f983919b" kindref="member">setMode</ref>) is set to <ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538" kindref="member">lmBuffered</ref>, you can replot only this specific layer by calling <ref refid="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180" kindref="member">replot</ref>. In certain situations this can provide better replot performance, compared with a full replot of all layers. Upon creation of a new layer, the layer mode is initialized to <ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7ca02eb5e9a4cb7f1baf1e2b6b99e3b87ce" kindref="member">lmLogical</ref>. The only layer that is set to <ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538" kindref="member">lmBuffered</ref> in a new <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance is the &quot;overlay&quot; layer, containing the selection rect. </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="14" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="11">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="17">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
      <node id="4">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="647" column="1" bodyfile="qcustomplot.h" bodystart="648" bodyend="713"/>
    <listofallmembers>
      <member refid="class_q_c_p_layer_1a57ce5e49364aa9122276d5df3b4a0ddc" prot="protected" virt="non-virtual"><scope>QCPLayer</scope><name>addChild</name></member>
      <member refid="class_q_c_p_layer_1a183b90941fc78f0b136edd77c5fb6966" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>children</name></member>
      <member refid="class_q_c_p_layer_1ab831a99c8d30b15ec4533ca341e8813b" prot="protected" virt="non-virtual"><scope>QCPLayer</scope><name>draw</name></member>
      <member refid="class_q_c_p_layer_1a4a8e0a86f31462299e7fc8e8158dd2c6" prot="protected" virt="non-virtual"><scope>QCPLayer</scope><name>drawToPaintBuffer</name></member>
      <member refid="class_q_c_p_layer_1ad322905c4700dcc7ceba63e011c730d2" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>index</name></member>
      <member refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7c" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>LayerMode</name></member>
      <member refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>lmBuffered</name></member>
      <member refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7ca02eb5e9a4cb7f1baf1e2b6b99e3b87ce" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>lmLogical</name></member>
      <member refid="class_q_c_p_layer_1a704aa71bba469383c3a3c598c1ec0d28" prot="protected" virt="non-virtual"><scope>QCPLayer</scope><name>mChildren</name></member>
      <member refid="class_q_c_p_layer_1a122088bcab6cec76a52b75ce8606605b" prot="protected" virt="non-virtual"><scope>QCPLayer</scope><name>mIndex</name></member>
      <member refid="class_q_c_p_layer_1a11bd0aa190d8fa21c8c7673d070737c8" prot="protected" virt="non-virtual"><scope>QCPLayer</scope><name>mMode</name></member>
      <member refid="class_q_c_p_layer_1a91e6298183cb4b9dfd4efdfaf1ecc220" prot="protected" virt="non-virtual"><scope>QCPLayer</scope><name>mName</name></member>
      <member refid="class_q_c_p_layer_1a44ae50b011b19f3dd46a38d8e2e2c1b6" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>mode</name></member>
      <member refid="class_q_c_p_layer_1aa0bdbc75e4350a0669ff515b3476a3d3" prot="protected" virt="non-virtual"><scope>QCPLayer</scope><name>mPaintBuffer</name></member>
      <member refid="class_q_c_p_layer_1a2f3374a7884bf403720cd1cf6f7ad1bb" prot="protected" virt="non-virtual"><scope>QCPLayer</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_layer_1a264950deb08e589460c126c895a1e2b5" prot="protected" virt="non-virtual"><scope>QCPLayer</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_layer_1a37806f662b50b588fb1029a14fc5ef50" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>name</name></member>
      <member refid="class_q_c_p_layer_1a923cb87bb467eeb17d649ba2b2fe4f5f" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layer_1a5d0657fc86d624e5efbe930ef21af718" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>QCPLayer</name></member>
      <member refid="class_q_c_p_layer_1ad655f55cccf49ba14d5172ec517e07ae" prot="private" virt="non-virtual"><scope>QCPLayer</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_layer_1a1cdf9df76adcfae45261690aa0ca2198" prot="private" virt="non-virtual"><scope>QCPLayer</scope><name>QCustomPlot</name></member>
      <member refid="class_q_c_p_layer_1ac2f64ac7761650582d968d86670ef362" prot="protected" virt="non-virtual"><scope>QCPLayer</scope><name>removeChild</name></member>
      <member refid="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>replot</name></member>
      <member refid="class_q_c_p_layer_1a938d57b04f4e4c23cedf1711f983919b" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>setMode</name></member>
      <member refid="class_q_c_p_layer_1ac07671f74edf6884b51a82afb2c19516" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_layer_1ad1cc2d6b32d2abb33c7f449b964e068c" prot="public" virt="non-virtual"><scope>QCPLayer</scope><name>visible</name></member>
      <member refid="class_q_c_p_layer_1afc1a8940f8e34c9f25ead9dfd4828cae" prot="public" virt="virtual"><scope>QCPLayer</scope><name>~QCPLayer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
