<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_color_scale" kind="class" language="C++" prot="public">
    <compoundname>QCPColorScale</compoundname>
    <basecompoundref refid="class_q_c_p_layout_element" prot="public" virt="non-virtual">QCPLayoutElement</basecompoundref>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_color_scale_1a7d47ed4ab76f38e50164e9d77fe33789" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a" kindref="member">QCPAxis::AxisType</ref></type>
        <definition>QCPAxis::AxisType QCPColorScale::mType</definition>
        <argsstring></argsstring>
        <name>mType</name>
        <qualifiedname>QCPColorScale::mType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5395" column="21" bodyfile="qcustomplot.h" bodystart="5395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_color_scale_1a5d4853feb32cd0077bb2b871687c844b" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>QCPRange QCPColorScale::mDataRange</definition>
        <argsstring></argsstring>
        <name>mDataRange</name>
        <qualifiedname>QCPColorScale::mDataRange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5396" column="12" bodyfile="qcustomplot.h" bodystart="5396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_color_scale_1a2754d6a78736f64a241e333fbd955372" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_axis_1a36d8e8658dbaa179bf2aeb973db2d6f0" kindref="member">QCPAxis::ScaleType</ref></type>
        <definition>QCPAxis::ScaleType QCPColorScale::mDataScaleType</definition>
        <argsstring></argsstring>
        <name>mDataScaleType</name>
        <qualifiedname>QCPColorScale::mDataScaleType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5397" column="22" bodyfile="qcustomplot.h" bodystart="5397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_color_scale_1ae195a385032066b5c46cc3301af58922" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_color_gradient" kindref="compound">QCPColorGradient</ref></type>
        <definition>QCPColorGradient QCPColorScale::mGradient</definition>
        <argsstring></argsstring>
        <name>mGradient</name>
        <qualifiedname>QCPColorScale::mGradient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5398" column="20" bodyfile="qcustomplot.h" bodystart="5398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_color_scale_1a409d2ab78dff1f92da5e6acfb062e811" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int QCPColorScale::mBarWidth</definition>
        <argsstring></argsstring>
        <name>mBarWidth</name>
        <qualifiedname>QCPColorScale::mBarWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5399" column="7" bodyfile="qcustomplot.h" bodystart="5399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_color_scale_1a6e37f7d49cd614dc50ef1caae60461b9" prot="protected" static="no" mutable="no">
        <type>QPointer&lt; <ref refid="class_q_c_p_color_scale_axis_rect_private" kindref="compound">QCPColorScaleAxisRectPrivate</ref> &gt;</type>
        <definition>QPointer&lt;QCPColorScaleAxisRectPrivate&gt; QCPColorScale::mAxisRect</definition>
        <argsstring></argsstring>
        <name>mAxisRect</name>
        <qualifiedname>QCPColorScale::mAxisRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5402" column="12" bodyfile="qcustomplot.h" bodystart="5402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_color_scale_1a2efbc90fd31898fe05d2b74a8422b1d5" prot="protected" static="no" mutable="no">
        <type>QPointer&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> &gt;</type>
        <definition>QPointer&lt;QCPAxis&gt; QCPColorScale::mColorAxis</definition>
        <argsstring></argsstring>
        <name>mColorAxis</name>
        <qualifiedname>QCPColorScale::mColorAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5403" column="12" bodyfile="qcustomplot.h" bodystart="5403" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_c_p_color_scale_1a1441d8c09d7227c0c29a8d0a96d55bfe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPColorScaleAxisRectPrivate</definition>
        <argsstring></argsstring>
        <name>QCPColorScaleAxisRectPrivate</name>
        <qualifiedname>QCPColorScale::QCPColorScaleAxisRectPrivate</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_color_scale_axis_rect_private" kindref="compound">QCPColorScaleAxisRectPrivate</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5416" column="16" bodyfile="qcustomplot.h" bodystart="5416" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_color_scale_1aa8debce1be38b54287c04d4f584394b4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPColorScale::QCPColorScale</definition>
        <argsstring>(QCustomPlot *parentPlot)</argsstring>
        <name>QCPColorScale</name>
        <qualifiedname>QCPColorScale::QCPColorScale</qualifiedname>
        <param>
          <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> *</type>
          <declname>parentPlot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a new <ref refid="class_q_c_p_color_scale" kindref="compound">QCPColorScale</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5357" column="12" bodyfile="qcustomplot.cpp" bodystart="20108" bodyend="20119"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a6ae0ccd791ecc7160f45f0d65402a3ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPColorScale::~QCPColorScale</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>~QCPColorScale</name>
        <qualifiedname>QCPColorScale::~QCPColorScale</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5358" column="11" bodyfile="qcustomplot.cpp" bodystart="20121" bodyend="20124"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a39bdbdb3b212602a5a57f9f3ea444190" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
        <definition>QCPAxis * QCPColorScale::axis</definition>
        <argsstring>() const</argsstring>
        <name>axis</name>
        <qualifiedname>QCPColorScale::axis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the internal <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> instance of this color scale. You can access it to alter the appearance and behaviour of the axis. <ref refid="class_q_c_p_color_scale" kindref="compound">QCPColorScale</ref> duplicates some properties in its interface for convenience. Those are <ref refid="class_q_c_p_color_scale_1abe88633003a26d1e756aa74984587fef" kindref="member">setDataRange</ref> (<ref refid="class_q_c_p_axis_1aebdfea5d44c3a0ad2b4700cd4d25b641" kindref="member">QCPAxis::setRange</ref>), <ref refid="class_q_c_p_color_scale_1aeb6107d67dd7325145b2498abae67fc3" kindref="member">setDataScaleType</ref> (<ref refid="class_q_c_p_axis_1adef29cae617af4f519f6c40d1a866ca6" kindref="member">QCPAxis::setScaleType</ref>), and the method <ref refid="class_q_c_p_color_scale_1aee124ae8396320cacf8276e9a0fbb8ce" kindref="member">setLabel</ref> (<ref refid="class_q_c_p_axis_1a33bcc382c111c9f31bb0687352a2dea4" kindref="member">QCPAxis::setLabel</ref>). As they each are connected, it does not matter whether you use the method on the <ref refid="class_q_c_p_color_scale" kindref="compound">QCPColorScale</ref> or on its <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref>.</para>
<para>If the type of the color scale is changed with <ref refid="class_q_c_p_color_scale_1a1bf9bdb291927c422dd66b404b206f1f" kindref="member">setType</ref>, the axis returned by this method will change, too, to either the left, right, bottom or top axis, depending on which type was set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5361" column="11" bodyfile="qcustomplot.h" bodystart="5361" bodyend="5361"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a85d7e286fbfc0c04c4b480aff3cb66fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a" kindref="member">QCPAxis::AxisType</ref></type>
        <definition>QCPAxis::AxisType QCPColorScale::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>QCPColorScale::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5362" column="21" bodyfile="qcustomplot.h" bodystart="5362" bodyend="5362"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a51f5756f99867bd91e570eddefeb1ef4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>QCPRange QCPColorScale::dataRange</definition>
        <argsstring>() const</argsstring>
        <name>dataRange</name>
        <qualifiedname>QCPColorScale::dataRange</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5363" column="12" bodyfile="qcustomplot.h" bodystart="5363" bodyend="5363"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1ad864329d93cbd7396af1b2024db7fcfe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis_1a36d8e8658dbaa179bf2aeb973db2d6f0" kindref="member">QCPAxis::ScaleType</ref></type>
        <definition>QCPAxis::ScaleType QCPColorScale::dataScaleType</definition>
        <argsstring>() const</argsstring>
        <name>dataScaleType</name>
        <qualifiedname>QCPColorScale::dataScaleType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5364" column="22" bodyfile="qcustomplot.h" bodystart="5364" bodyend="5364"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a31d4e3b49461bf6b265eabd028d0f7b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_color_gradient" kindref="compound">QCPColorGradient</ref></type>
        <definition>QCPColorGradient QCPColorScale::gradient</definition>
        <argsstring>() const</argsstring>
        <name>gradient</name>
        <qualifiedname>QCPColorScale::gradient</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5365" column="20" bodyfile="qcustomplot.h" bodystart="5365" bodyend="5365"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a3dbac1121a90172d62f01ab80b1ad641" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString QCPColorScale::label</definition>
        <argsstring>() const</argsstring>
        <name>label</name>
        <qualifiedname>QCPColorScale::label</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5366" column="11" bodyfile="qcustomplot.cpp" bodystart="20127" bodyend="20136"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1ae02ab8e4bfaa919577992e73242f491f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPColorScale::barWidth</definition>
        <argsstring>() const</argsstring>
        <name>barWidth</name>
        <qualifiedname>QCPColorScale::barWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5367" column="7" bodyfile="qcustomplot.h" bodystart="5367" bodyend="5367"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a2a0670492f2a780596ea455ea8496a78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPColorScale::rangeDrag</definition>
        <argsstring>() const</argsstring>
        <name>rangeDrag</name>
        <qualifiedname>QCPColorScale::rangeDrag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5368" column="8" bodyfile="qcustomplot.cpp" bodystart="20139" bodyend="20150"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1adb4c3ada2b1e5ebbdead3b097064ff0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPColorScale::rangeZoom</definition>
        <argsstring>() const</argsstring>
        <name>rangeZoom</name>
        <qualifiedname>QCPColorScale::rangeZoom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5369" column="8" bodyfile="qcustomplot.cpp" bodystart="20153" bodyend="20164"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a1bf9bdb291927c422dd66b404b206f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPColorScale::setType</definition>
        <argsstring>(QCPAxis::AxisType type)</argsstring>
        <name>setType</name>
        <qualifiedname>QCPColorScale::setType</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a" kindref="member">QCPAxis::AxisType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets at which side of the color scale the axis is placed, and thus also its orientation.</para>
<para>Note that after setting <emphasis>type</emphasis> to a different value, the axis returned by <ref refid="class_q_c_p_color_scale_1a39bdbdb3b212602a5a57f9f3ea444190" kindref="member">axis()</ref> will be a different one. The new axis will adopt the following properties from the previous axis: The range, scale type, label and ticker (the latter will be shared and not copied). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5372" column="8" bodyfile="qcustomplot.cpp" bodystart="20173" bodyend="20216"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1abe88633003a26d1e756aa74984587fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SLOT void</type>
        <definition>void QCPColorScale::setDataRange</definition>
        <argsstring>(const QCPRange &amp;dataRange)</argsstring>
        <name>setDataRange</name>
        <qualifiedname>QCPColorScale::setDataRange</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref> &amp;</type>
          <declname>dataRange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the range spanned by the color gradient and that is shown by the axis in the color scale.</para>
<para>It is equivalent to calling <ref refid="class_q_c_p_color_map_1a980b42837821159786a85b4b7dcb8774" kindref="member">QCPColorMap::setDataRange</ref> on any of the connected color maps. It is also equivalent to directly accessing the <ref refid="class_q_c_p_color_scale_1a39bdbdb3b212602a5a57f9f3ea444190" kindref="member">axis</ref> and setting its range with <ref refid="class_q_c_p_axis_1aebdfea5d44c3a0ad2b4700cd4d25b641" kindref="member">QCPAxis::setRange</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_color_scale_1aeb6107d67dd7325145b2498abae67fc3" kindref="member">setDataScaleType</ref>, <ref refid="class_q_c_p_color_scale_1a1f29583bb6f1e7f473b62fb712be3940" kindref="member">setGradient</ref>, <ref refid="class_q_c_p_color_scale_1a425983db4478543924ddbd04ea20a356" kindref="member">rescaleDataRange</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5373" column="15" bodyfile="qcustomplot.cpp" bodystart="20227" bodyend="20236"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1aeb6107d67dd7325145b2498abae67fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SLOT void</type>
        <definition>void QCPColorScale::setDataScaleType</definition>
        <argsstring>(QCPAxis::ScaleType scaleType)</argsstring>
        <name>setDataScaleType</name>
        <qualifiedname>QCPColorScale::setDataScaleType</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis_1a36d8e8658dbaa179bf2aeb973db2d6f0" kindref="member">QCPAxis::ScaleType</ref></type>
          <declname>scaleType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the scale type of the color scale, i.e. whether values are associated with colors linearly or logarithmically.</para>
<para>It is equivalent to calling <ref refid="class_q_c_p_color_map_1a9d20aa08e3c1f20f22908c45b9c06511" kindref="member">QCPColorMap::setDataScaleType</ref> on any of the connected color maps. It is also equivalent to directly accessing the <ref refid="class_q_c_p_color_scale_1a39bdbdb3b212602a5a57f9f3ea444190" kindref="member">axis</ref> and setting its scale type with <ref refid="class_q_c_p_axis_1adef29cae617af4f519f6c40d1a866ca6" kindref="member">QCPAxis::setScaleType</ref>.</para>
<para>Note that this method controls the coordinate transformation. For logarithmic scales, you will likely also want to use a logarithmic tick spacing and labeling, which can be achieved by setting the color scale&apos;s <ref refid="class_q_c_p_color_scale_1a39bdbdb3b212602a5a57f9f3ea444190" kindref="member">axis</ref> ticker to an instance of <ref refid="class_q_c_p_axis_ticker_log" kindref="compound">QCPAxisTickerLog</ref> :</para>
<para><programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting></para>
<para>See the documentation of <ref refid="class_q_c_p_axis_ticker_log" kindref="compound">QCPAxisTickerLog</ref> about the details of logarithmic axis tick creation.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_color_scale_1abe88633003a26d1e756aa74984587fef" kindref="member">setDataRange</ref>, <ref refid="class_q_c_p_color_scale_1a1f29583bb6f1e7f473b62fb712be3940" kindref="member">setGradient</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5374" column="15" bodyfile="qcustomplot.cpp" bodystart="20257" bodyend="20268"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a1f29583bb6f1e7f473b62fb712be3940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SLOT void</type>
        <definition>void QCPColorScale::setGradient</definition>
        <argsstring>(const QCPColorGradient &amp;gradient)</argsstring>
        <name>setGradient</name>
        <qualifiedname>QCPColorScale::setGradient</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_color_gradient" kindref="compound">QCPColorGradient</ref> &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the color gradient that will be used to represent data values.</para>
<para>It is equivalent to calling <ref refid="class_q_c_p_color_map_1a7313c78360471cead3576341a2c50377" kindref="member">QCPColorMap::setGradient</ref> on any of the connected color maps.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_color_scale_1abe88633003a26d1e756aa74984587fef" kindref="member">setDataRange</ref>, <ref refid="class_q_c_p_color_scale_1aeb6107d67dd7325145b2498abae67fc3" kindref="member">setDataScaleType</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5375" column="15" bodyfile="qcustomplot.cpp" bodystart="20277" bodyend="20286"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1aee124ae8396320cacf8276e9a0fbb8ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPColorScale::setLabel</definition>
        <argsstring>(const QString &amp;str)</argsstring>
        <name>setLabel</name>
        <qualifiedname>QCPColorScale::setLabel</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the axis label of the color scale. This is equivalent to calling <ref refid="class_q_c_p_axis_1a33bcc382c111c9f31bb0687352a2dea4" kindref="member">QCPAxis::setLabel</ref> on the internal <ref refid="class_q_c_p_color_scale_1a39bdbdb3b212602a5a57f9f3ea444190" kindref="member">axis</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5376" column="8" bodyfile="qcustomplot.cpp" bodystart="20292" bodyend="20301"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1ab9dcc0c1cd583477496209b1413bcb99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPColorScale::setBarWidth</definition>
        <argsstring>(int width)</argsstring>
        <name>setBarWidth</name>
        <qualifiedname>QCPColorScale::setBarWidth</qualifiedname>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the width (or height, for horizontal color scales) the bar where the gradient is displayed will have. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5377" column="8" bodyfile="qcustomplot.cpp" bodystart="20307" bodyend="20310"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a21c51a55e4fd581b6feadca9ee5b38d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPColorScale::setRangeDrag</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setRangeDrag</name>
        <qualifiedname>QCPColorScale::setRangeDrag</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the user can drag the data range (<ref refid="class_q_c_p_color_scale_1abe88633003a26d1e756aa74984587fef" kindref="member">setDataRange</ref>).</para>
<para>Note that <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a2c4432b9aceafb94000be8d1b589ef18" kindref="member">QCP::iRangeDrag</ref> must be in the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>&apos;s interactions (<ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref>) to allow range dragging. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5378" column="8" bodyfile="qcustomplot.cpp" bodystart="20318" bodyend="20337"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a96bd60fb6317ad6821841b539c93eeeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPColorScale::setRangeZoom</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setRangeZoom</name>
        <qualifiedname>QCPColorScale::setRangeZoom</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the user can zoom the data range (<ref refid="class_q_c_p_color_scale_1abe88633003a26d1e756aa74984587fef" kindref="member">setDataRange</ref>) by scrolling the mouse wheel.</para>
<para>Note that <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037abee1e94353525a636aeaf0ba32b72e14" kindref="member">QCP::iRangeZoom</ref> must be in the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>&apos;s interactions (<ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref>) to allow range dragging. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5379" column="8" bodyfile="qcustomplot.cpp" bodystart="20345" bodyend="20364"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a556adc6b0216ebc1cc4317c541956d06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_color_map" kindref="compound">QCPColorMap</ref> * &gt;</type>
        <definition>QList&lt; QCPColorMap * &gt; QCPColorScale::colorMaps</definition>
        <argsstring>() const</argsstring>
        <name>colorMaps</name>
        <qualifiedname>QCPColorScale::colorMaps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of all the color maps associated with this color scale. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5382" column="9" bodyfile="qcustomplot.cpp" bodystart="20369" bodyend="20379"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a425983db4478543924ddbd04ea20a356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPColorScale::rescaleDataRange</definition>
        <argsstring>(bool onlyVisibleMaps)</argsstring>
        <name>rescaleDataRange</name>
        <qualifiedname>QCPColorScale::rescaleDataRange</qualifiedname>
        <param>
          <type>bool</type>
          <declname>onlyVisibleMaps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the data range such that all color maps associated with this color scale are fully mapped to the gradient in the data dimension.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_color_scale_1abe88633003a26d1e756aa74984587fef" kindref="member">setDataRange</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5383" column="8" bodyfile="qcustomplot.cpp" bodystart="20387" bodyend="20444"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a259dcb6d3053a2cc3c197e9b1191ddbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPColorScale::update</definition>
        <argsstring>(UpdatePhase phase) Q_DECL_OVERRIDE</argsstring>
        <name>update</name>
        <qualifiedname>QCPColorScale::update</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1a929c2ec62e0e0e1d8418eaa802e2af9b">update</reimplements>
        <param>
          <type><ref refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d" kindref="member">UpdatePhase</ref></type>
          <declname>phase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates the layout element and sub-elements. This function is automatically called before every replot by the parent layout element. It is called multiple times, once for every <ref refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d" kindref="member">UpdatePhase</ref>. The phases are run through in the order of the enum values. For details about what happens at the different phases, see the documentation of <ref refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d" kindref="member">UpdatePhase</ref>.</para>
<para>Layout elements that have child elements should call the <ref refid="class_q_c_p_color_scale_1a259dcb6d3053a2cc3c197e9b1191ddbe" kindref="member">update</ref> method of their child elements, and pass the current <emphasis>phase</emphasis> unchanged.</para>
<para>The default implementation executes the automatic margin mechanism in the <ref refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da288cb59a92280e47261a341f2813e676" kindref="member">upMargins</ref> phase. Subclasses should make sure to call the base class implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5386" column="16" bodyfile="qcustomplot.cpp" bodystart="20447" bodyend="20480"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_q_c_p_color_scale_1a685717490a6aa83c5e711a4f34e837f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPColorScale::dataRangeChanged</definition>
        <argsstring>(const QCPRange &amp;newRange)</argsstring>
        <name>dataRangeChanged</name>
        <qualifiedname>QCPColorScale::dataRangeChanged</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref> &amp;</type>
          <declname>newRange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the data range changes.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_color_scale_1abe88633003a26d1e756aa74984587fef" kindref="member">setDataRange</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5389" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_c_p_color_scale_1a61558b962f7791ff2f15a565dcf60181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPColorScale::dataScaleTypeChanged</definition>
        <argsstring>(QCPAxis::ScaleType scaleType)</argsstring>
        <name>dataScaleTypeChanged</name>
        <qualifiedname>QCPColorScale::dataScaleTypeChanged</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis_1a36d8e8658dbaa179bf2aeb973db2d6f0" kindref="member">QCPAxis::ScaleType</ref></type>
          <declname>scaleType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the data scale type changes.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_color_scale_1aeb6107d67dd7325145b2498abae67fc3" kindref="member">setDataScaleType</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5390" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_c_p_color_scale_1a5e5f8c5626242c8f7308bfab74d3d989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPColorScale::gradientChanged</definition>
        <argsstring>(const QCPColorGradient &amp;newGradient)</argsstring>
        <name>gradientChanged</name>
        <qualifiedname>QCPColorScale::gradientChanged</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_color_gradient" kindref="compound">QCPColorGradient</ref> &amp;</type>
          <declname>newGradient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the gradient changes.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_color_scale_1a1f29583bb6f1e7f473b62fb712be3940" kindref="member">setGradient</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5391" column="8"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_color_scale_1af1b24d24a70f25b65d29f09e413390a8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPColorScale::applyDefaultAntialiasingHint</definition>
        <argsstring>(QCPPainter *painter) const Q_DECL_OVERRIDE</argsstring>
        <name>applyDefaultAntialiasingHint</name>
        <qualifiedname>QCPColorScale::applyDefaultAntialiasingHint</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1a0a8f18141bcf46cf40ad4c13324ff346">applyDefaultAntialiasingHint</reimplements>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5406" column="16" bodyfile="qcustomplot.cpp" bodystart="20483" bodyend="20486"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a91f633b97ffcd57fdf8cd814974c20e6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPColorScale::mousePressEvent</definition>
        <argsstring>(QMouseEvent *event, const QVariant &amp;details) Q_DECL_OVERRIDE</argsstring>
        <name>mousePressEvent</name>
        <qualifiedname>QCPColorScale::mousePressEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</reimplements>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const QVariant &amp;</type>
          <declname>details</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This event gets called when the user presses a mouse button while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <ref refid="class_q_c_p_layout_element_1a62d60f1b0ee9bb23e38811d71586d79c" kindref="member">selectTest</ref>.</para>
<para>The current pixel position of the cursor on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>details</emphasis> contains layerable-specific details about the hit, which were generated in the previous call to <ref refid="class_q_c_p_layout_element_1a62d60f1b0ee9bb23e38811d71586d79c" kindref="member">selectTest</ref>. For example, One-dimensional plottables like <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> or <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref> convey the clicked data point in the <emphasis>details</emphasis> parameter, as <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> packed as QVariant. Multi-part objects convey the specific <computeroutput>SelectablePart</computeroutput> that was hit (e.g. <ref refid="class_q_c_p_axis_1abee4c7a54c468b1385dfce2c898b115f" kindref="member">QCPAxis::SelectablePart</ref> in the case of axes).</para>
<para><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> uses an event propagation system that works the same as Qt&apos;s system. If your layerable doesn&apos;t reimplement the <ref refid="class_q_c_p_color_scale_1a91f633b97ffcd57fdf8cd814974c20e6" kindref="member">mousePressEvent</ref> or explicitly calls <computeroutput>event-&gt;ignore()</computeroutput> in its reimplementation, the event will be propagated to the next layerable in the stacking order.</para>
<para>Once a layerable has accepted the <ref refid="class_q_c_p_color_scale_1a91f633b97ffcd57fdf8cd814974c20e6" kindref="member">mousePressEvent</ref>, it is considered the mouse grabber and will receive all following calls to <ref refid="class_q_c_p_color_scale_1a3b2bd79725aefaf2630fc76e90939442" kindref="member">mouseMoveEvent</ref> or <ref refid="class_q_c_p_color_scale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0" kindref="member">mouseReleaseEvent</ref> for this mouse interaction (a &quot;mouse interaction&quot; in this context ends with the release).</para>
<para>The default implementation does nothing except explicitly ignoring the event with <computeroutput>event-&gt;ignore()</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_color_scale_1a3b2bd79725aefaf2630fc76e90939442" kindref="member">mouseMoveEvent</ref>, <ref refid="class_q_c_p_color_scale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0" kindref="member">mouseReleaseEvent</ref>, <ref refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" kindref="member">mouseDoubleClickEvent</ref>, <ref refid="class_q_c_p_color_scale_1a63cf19be184f6670c9495ad3a9a1baeb" kindref="member">wheelEvent</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5408" column="16" bodyfile="qcustomplot.cpp" bodystart="20489" bodyend="20497"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a3b2bd79725aefaf2630fc76e90939442" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPColorScale::mouseMoveEvent</definition>
        <argsstring>(QMouseEvent *event, const QPointF &amp;startPos) Q_DECL_OVERRIDE</argsstring>
        <name>mouseMoveEvent</name>
        <qualifiedname>QCPColorScale::mouseMoveEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</reimplements>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>startPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This event gets called when the user moves the mouse while holding a mouse button, after this layerable has become the mouse grabber by accepting the preceding <ref refid="class_q_c_p_color_scale_1a91f633b97ffcd57fdf8cd814974c20e6" kindref="member">mousePressEvent</ref>.</para>
<para>The current pixel position of the cursor on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>startPos</emphasis> indicates the position where the initial <ref refid="class_q_c_p_color_scale_1a91f633b97ffcd57fdf8cd814974c20e6" kindref="member">mousePressEvent</ref> occurred, that started the mouse interaction.</para>
<para>The default implementation does nothing.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_color_scale_1a91f633b97ffcd57fdf8cd814974c20e6" kindref="member">mousePressEvent</ref>, <ref refid="class_q_c_p_color_scale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0" kindref="member">mouseReleaseEvent</ref>, <ref refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" kindref="member">mouseDoubleClickEvent</ref>, <ref refid="class_q_c_p_color_scale_1a63cf19be184f6670c9495ad3a9a1baeb" kindref="member">wheelEvent</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5409" column="16" bodyfile="qcustomplot.cpp" bodystart="20500" bodyend="20508"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPColorScale::mouseReleaseEvent</definition>
        <argsstring>(QMouseEvent *event, const QPointF &amp;startPos) Q_DECL_OVERRIDE</argsstring>
        <name>mouseReleaseEvent</name>
        <qualifiedname>QCPColorScale::mouseReleaseEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</reimplements>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>startPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This event gets called when the user releases the mouse button, after this layerable has become the mouse grabber by accepting the preceding <ref refid="class_q_c_p_color_scale_1a91f633b97ffcd57fdf8cd814974c20e6" kindref="member">mousePressEvent</ref>.</para>
<para>The current pixel position of the cursor on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>startPos</emphasis> indicates the position where the initial <ref refid="class_q_c_p_color_scale_1a91f633b97ffcd57fdf8cd814974c20e6" kindref="member">mousePressEvent</ref> occurred, that started the mouse interaction.</para>
<para>The default implementation does nothing.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_color_scale_1a91f633b97ffcd57fdf8cd814974c20e6" kindref="member">mousePressEvent</ref>, <ref refid="class_q_c_p_color_scale_1a3b2bd79725aefaf2630fc76e90939442" kindref="member">mouseMoveEvent</ref>, <ref refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" kindref="member">mouseDoubleClickEvent</ref>, <ref refid="class_q_c_p_color_scale_1a63cf19be184f6670c9495ad3a9a1baeb" kindref="member">wheelEvent</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5410" column="16" bodyfile="qcustomplot.cpp" bodystart="20511" bodyend="20519"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_color_scale_1a63cf19be184f6670c9495ad3a9a1baeb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPColorScale::wheelEvent</definition>
        <argsstring>(QWheelEvent *event) Q_DECL_OVERRIDE</argsstring>
        <name>wheelEvent</name>
        <qualifiedname>QCPColorScale::wheelEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</reimplements>
        <param>
          <type>QWheelEvent *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This event gets called when the user turns the mouse scroll wheel while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <ref refid="class_q_c_p_layout_element_1a62d60f1b0ee9bb23e38811d71586d79c" kindref="member">selectTest</ref>.</para>
<para>The current pixel position of the cursor on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>.</para>
<para>The <computeroutput>event-&gt;angleDelta()</computeroutput> indicates how far the mouse wheel was turned, which is usually +/- 120 for single rotation steps. However, if the mouse wheel is turned rapidly, multiple steps may accumulate to one event, making the delta larger. On the other hand, if the wheel has very smooth steps or none at all, the delta may be smaller.</para>
<para>The default implementation does nothing.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_color_scale_1a91f633b97ffcd57fdf8cd814974c20e6" kindref="member">mousePressEvent</ref>, <ref refid="class_q_c_p_color_scale_1a3b2bd79725aefaf2630fc76e90939442" kindref="member">mouseMoveEvent</ref>, <ref refid="class_q_c_p_color_scale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0" kindref="member">mouseReleaseEvent</ref>, <ref refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" kindref="member">mouseDoubleClickEvent</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5411" column="16" bodyfile="qcustomplot.cpp" bodystart="20522" bodyend="20530"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A color scale for use with color coding data such as <ref refid="class_q_c_p_color_map" kindref="compound">QCPColorMap</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>This layout element can be placed on the plot to correlate a color gradient with data values. It is usually used in combination with one or multiple <ref refid="class_q_c_p_color_map" kindref="compound">QCPColorMaps</ref>.</para>
<para><image type="html" name="QCPColorScale.png"></image>
</para>
<para>The color scale can be either horizontal or vertical, as shown in the image above. The orientation and the side where the numbers appear is controlled with <ref refid="class_q_c_p_color_scale_1a1bf9bdb291927c422dd66b404b206f1f" kindref="member">setType</ref>.</para>
<para>Use <ref refid="class_q_c_p_color_map_1aa828921db364fe3c6af4619580ab85fd" kindref="member">QCPColorMap::setColorScale</ref> to connect a color map with a color scale. Once they are connected, they share their gradient, data range and data scale type (<ref refid="class_q_c_p_color_scale_1a1f29583bb6f1e7f473b62fb712be3940" kindref="member">setGradient</ref>, <ref refid="class_q_c_p_color_scale_1abe88633003a26d1e756aa74984587fef" kindref="member">setDataRange</ref>, <ref refid="class_q_c_p_color_scale_1aeb6107d67dd7325145b2498abae67fc3" kindref="member">setDataScaleType</ref>). Multiple color maps may be associated with a single color scale, to make them all synchronize these properties.</para>
<para>To have finer control over the number display and axis behaviour, you can directly access the <ref refid="class_q_c_p_color_scale_1a39bdbdb3b212602a5a57f9f3ea444190" kindref="member">axis</ref>. See the documentation of <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> for details about configuring axes. For example, if you want to change the number of automatically generated ticks, call <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting></para>
<para>Placing a color scale next to the main axis rect works like with any other layout element: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting> In this case we have placed it to the right of the default axis rect, so it wasn&apos;t necessary to call <ref refid="class_q_c_p_color_scale_1a1bf9bdb291927c422dd66b404b206f1f" kindref="member">setType</ref>, since <ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18aadf5509f7d29199ef2f263b1dd224b345" kindref="member">QCPAxis::atRight</ref> is already the default. The text next to the color scale can be set with <ref refid="class_q_c_p_color_scale_1aee124ae8396320cacf8276e9a0fbb8ce" kindref="member">setLabel</ref>.</para>
<para>For optimum appearance (like in the image above), it may be desirable to line up the axis rect and the borders of the color scale. Use a <ref refid="class_q_c_p_margin_group" kindref="compound">QCPMarginGroup</ref> to achieve this: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting></para>
<para>Color scales are initialized with a non-zero minimum top and bottom margin (<ref refid="class_q_c_p_layout_element_1a0a8a17abc16b7923159fcc7608f94673" kindref="member">setMinimumMargins</ref>), because vertical color scales are most common and the minimum top/bottom margin makes sure it keeps some distance to the top/bottom widget border. So if you change to a horizontal color scale by setting <ref refid="class_q_c_p_color_scale_1a1bf9bdb291927c422dd66b404b206f1f" kindref="member">setType</ref> to <ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18aa220d68888516b6c3b493d144f1ba438f" kindref="member">QCPAxis::atBottom</ref> or <ref refid="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18aac0ece2b680d3f545e701f75af1655977" kindref="member">QCPAxis::atTop</ref>, you might want to also change the minimum margins accordingly, e.g. <computeroutput>setMinimumMargins(QMargins(6, 0, 6, 0))</computeroutput>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QCPColorScale</label>
        <link refid="class_q_c_p_color_scale"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="14" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>QCPColorGradient</label>
        <link refid="class_q_c_p_color_gradient"/>
      </node>
      <node id="1">
        <label>QCPColorScale</label>
        <link refid="class_q_c_p_color_scale"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mDataRange</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>mGradient</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="11">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="18">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
      <node id="6">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="5343" column="1" bodyfile="qcustomplot.h" bodystart="5344" bodyend="5417"/>
    <listofallmembers>
      <member refid="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>antialiased</name></member>
      <member refid="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>applyAntialiasingHint</name></member>
      <member refid="class_q_c_p_color_scale_1af1b24d24a70f25b65d29f09e413390a8" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>applyDefaultAntialiasingHint</name></member>
      <member refid="class_q_c_p_layout_element_1a2585bc8c5cc70ee712909751a2fc8909" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>autoMargins</name></member>
      <member refid="class_q_c_p_color_scale_1a39bdbdb3b212602a5a57f9f3ea444190" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>axis</name></member>
      <member refid="class_q_c_p_color_scale_1ae02ab8e4bfaa919577992e73242f491f" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>barWidth</name></member>
      <member refid="class_q_c_p_layout_element_1a005c9f0fe84bc1591a2cf2c46fd477b4" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>calculateAutoMargin</name></member>
      <member refid="class_q_c_p_layerable_1acbcfc9ecc75433747b1978a77b1864b3" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>clipRect</name></member>
      <member refid="class_q_c_p_color_scale_1a556adc6b0216ebc1cc4317c541956d06" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>colorMaps</name></member>
      <member refid="class_q_c_p_color_scale_1a51f5756f99867bd91e570eddefeb1ef4" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>dataRange</name></member>
      <member refid="class_q_c_p_color_scale_1a685717490a6aa83c5e711a4f34e837f9" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>dataRangeChanged</name></member>
      <member refid="class_q_c_p_color_scale_1ad864329d93cbd7396af1b2024db7fcfe" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>dataScaleType</name></member>
      <member refid="class_q_c_p_color_scale_1a61558b962f7791ff2f15a565dcf60181" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>dataScaleTypeChanged</name></member>
      <member refid="class_q_c_p_layerable_1ae546370644a5551c76af739afc008bee" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>deselectEvent</name></member>
      <member refid="class_q_c_p_layout_element_1ad1c597b1d608cfdd86e7b76819a94cfb" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>draw</name></member>
      <member refid="class_q_c_p_layout_element_1a76dec8cb31e498994a944d7647a43309" prot="public" virt="virtual"><scope>QCPColorScale</scope><name>elements</name></member>
      <member refid="class_q_c_p_color_scale_1a31d4e3b49461bf6b265eabd028d0f7b2" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>gradient</name></member>
      <member refid="class_q_c_p_color_scale_1a5e5f8c5626242c8f7308bfab74d3d989" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>gradientChanged</name></member>
      <member refid="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>initializeParentPlot</name></member>
      <member refid="class_q_c_p_color_scale_1a3dbac1121a90172d62f01ab80b1ad641" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>label</name></member>
      <member refid="class_q_c_p_layerable_1a9d4e121a7f1d2314f906fe698209cac9" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>layer</name></member>
      <member refid="class_q_c_p_layerable_1abbf8657cedea73ac1c3499b521c90eba" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>layerChanged</name></member>
      <member refid="class_q_c_p_layout_element_1a4efdcbde9d28f410e5ef166c9d691deb" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>layout</name></member>
      <member refid="class_q_c_p_layout_element_1a765f041a73af0c2de41b41a5a03e31a4" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>layoutChanged</name></member>
      <member refid="class_q_c_p_layerable_1a3ab45a4c76a3333ce42eb217a81733ec" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mAntialiased</name></member>
      <member refid="class_q_c_p_layout_element_1aa5513622910f31d9309f87886bee597a" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>marginGroup</name></member>
      <member refid="class_q_c_p_layout_element_1acdd2c6b2ffb1c712e3bb3014fdec2e1b" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>marginGroups</name></member>
      <member refid="class_q_c_p_layout_element_1af4ac9450aa2d60863bf3a8ea0c940c9d" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>margins</name></member>
      <member refid="class_q_c_p_layout_element_1af61c70354d1275778d68206b2a1b2d36" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mAutoMargins</name></member>
      <member refid="class_q_c_p_layout_element_1ad96efb977a26e360e8a64a4c1e56456d" prot="public" virt="virtual"><scope>QCPColorScale</scope><name>maximumOuterSizeHint</name></member>
      <member refid="class_q_c_p_layout_element_1afb9503858d4aa0f3b9f1794b084fb40a" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>maximumSize</name></member>
      <member refid="class_q_c_p_color_scale_1a6e37f7d49cd614dc50ef1caae60461b9" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mAxisRect</name></member>
      <member refid="class_q_c_p_color_scale_1a409d2ab78dff1f92da5e6acfb062e811" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mBarWidth</name></member>
      <member refid="class_q_c_p_color_scale_1a2efbc90fd31898fe05d2b74a8422b1d5" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mColorAxis</name></member>
      <member refid="class_q_c_p_color_scale_1a5d4853feb32cd0077bb2b871687c844b" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mDataRange</name></member>
      <member refid="class_q_c_p_color_scale_1a2754d6a78736f64a241e333fbd955372" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mDataScaleType</name></member>
      <member refid="class_q_c_p_color_scale_1ae195a385032066b5c46cc3301af58922" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mGradient</name></member>
      <member refid="class_q_c_p_layout_element_1a5eae30e28f28d73fd1c56409c011393e" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>minimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a46789036c4fcb190fa374f91321d7c09" prot="public" virt="virtual"><scope>QCPColorScale</scope><name>minimumOuterSizeHint</name></member>
      <member refid="class_q_c_p_layout_element_1a60d4295468a2b57fe91f6f68e20c3993" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>minimumSize</name></member>
      <member refid="class_q_c_p_layerable_1aa38ec5891aff0f50b36fd63e9372a0cd" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mLayer</name></member>
      <member refid="class_q_c_p_layout_element_1aeafbbc1130e02eee663c5326761fc963" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mMarginGroups</name></member>
      <member refid="class_q_c_p_layout_element_1ac2a32b99ee527ca5dfff9da03628fe94" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a64a387973fd4addac842028c89088998" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a5ba71f25d1af4bb092b28df618538e63" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mMinimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1affef747c81632de33f08483b7fd10d01" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mMinimumSize</name></member>
      <member refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>mouseDoubleClickEvent</name></member>
      <member refid="class_q_c_p_color_scale_1a3b2bd79725aefaf2630fc76e90939442" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>mouseMoveEvent</name></member>
      <member refid="class_q_c_p_color_scale_1a91f633b97ffcd57fdf8cd814974c20e6" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>mousePressEvent</name></member>
      <member refid="class_q_c_p_color_scale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>mouseReleaseEvent</name></member>
      <member refid="class_q_c_p_layout_element_1a07bb4973379e75cb0fa5b032c1d24afd" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>moveToLayer</name></member>
      <member refid="class_q_c_p_layerable_1a3291445a980053e2d17a21d15957624e" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mParentLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1ae7c75c25549608bd688bdb65d4c38066" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mParentLayout</name></member>
      <member refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_layout_element_1ad8896f05550389f7b9e92c9e6cdf6e01" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mRect</name></member>
      <member refid="class_q_c_p_layout_element_1acc012635b1ae178ff3c4da8a3af303a2" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mSizeConstraintRect</name></member>
      <member refid="class_q_c_p_color_scale_1a7d47ed4ab76f38e50164e9d77fe33789" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mType</name></member>
      <member refid="class_q_c_p_layerable_1a62e3aed8427d6ce3ccf716f285106cb3" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>outerRect</name></member>
      <member refid="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>parentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1a36ed5b292b90934b524a4e5866a3526c" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layout_element_1ab4bb5c5a958451f5f153fdce350f13cf" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>parentPlotInitialized</name></member>
      <member refid="class_q_c_p_color_scale_1aa8debce1be38b54287c04d4f584394b4" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>QCPColorScale</name></member>
      <member refid="class_q_c_p_color_scale_1a1441d8c09d7227c0c29a8d0a96d55bfe" prot="private" virt="non-virtual"><scope>QCPColorScale</scope><name>QCPColorScaleAxisRectPrivate</name></member>
      <member refid="class_q_c_p_layerable_1a4f87f420cb2597e2b393aab934d2f099" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1a2c25c7bf27eaa1fad66807af855d8d81" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>QCPLayoutElement</name></member>
      <member refid="class_q_c_p_color_scale_1a2a0670492f2a780596ea455ea8496a78" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>rangeDrag</name></member>
      <member refid="class_q_c_p_color_scale_1adb4c3ada2b1e5ebbdead3b097064ff0b" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>rangeZoom</name></member>
      <member refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>realVisibility</name></member>
      <member refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>rect</name></member>
      <member refid="class_q_c_p_color_scale_1a425983db4478543924ddbd04ea20a356" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>rescaleDataRange</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aa7fa7e25cd23758b9915c64ed9f1be26c" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>scrInnerRect</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aabe2745b41a6131ed194e13591b08e04d" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>scrOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1a7498c2d0d081cf7cad0fb3bb93aa0e91" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>selectEvent</name></member>
      <member refid="class_q_c_p_layerable_1a908c9edda761886f33893be326dab77d" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>selectionCategory</name></member>
      <member refid="class_q_c_p_layout_element_1a62d60f1b0ee9bb23e38811d71586d79c" prot="public" virt="virtual"><scope>QCPColorScale</scope><name>selectTest</name></member>
      <member refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setAntialiased</name></member>
      <member refid="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setAutoMargins</name></member>
      <member refid="class_q_c_p_color_scale_1ab9dcc0c1cd583477496209b1413bcb99" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setBarWidth</name></member>
      <member refid="class_q_c_p_color_scale_1abe88633003a26d1e756aa74984587fef" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setDataRange</name></member>
      <member refid="class_q_c_p_color_scale_1aeb6107d67dd7325145b2498abae67fc3" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setDataScaleType</name></member>
      <member refid="class_q_c_p_color_scale_1a1f29583bb6f1e7f473b62fb712be3940" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setGradient</name></member>
      <member refid="class_q_c_p_color_scale_1aee124ae8396320cacf8276e9a0fbb8ce" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setLabel</name></member>
      <member refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layout_element_1a516e56f76b6bc100e8e71d329866847d" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setMarginGroup</name></member>
      <member refid="class_q_c_p_layout_element_1a8f450b1f3f992ad576fce2c63d8b79cf" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a03e0e9c48f230217c529b0819f832d84" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a0a8a17abc16b7923159fcc7608f94673" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setMinimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setMinimumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a8e0447614a0bf92de9a7304588c6b96e" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setMinimumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a38975ea13e36de8e53391ce41d94bc0f" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a" prot="protected" virt="non-virtual"><scope>QCPColorScale</scope><name>setParentLayerable</name></member>
      <member refid="class_q_c_p_color_scale_1a21c51a55e4fd581b6feadca9ee5b38d5" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setRangeDrag</name></member>
      <member refid="class_q_c_p_color_scale_1a96bd60fb6317ad6821841b539c93eeeb" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setRangeZoom</name></member>
      <member refid="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setSizeConstraintRect</name></member>
      <member refid="class_q_c_p_color_scale_1a1bf9bdb291927c422dd66b404b206f1f" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setType</name></member>
      <member refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2a" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>SizeConstraintRect</name></member>
      <member refid="class_q_c_p_layout_element_1a66136f121ee3e1c933b748761203cab4" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>sizeConstraintRect</name></member>
      <member refid="class_q_c_p_color_scale_1a85d7e286fbfc0c04c4b480aff3cb66fb" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>type</name></member>
      <member refid="class_q_c_p_color_scale_1a259dcb6d3053a2cc3c197e9b1191ddbe" prot="public" virt="virtual"><scope>QCPColorScale</scope><name>update</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>UpdatePhase</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da5d1ccf5d79967c232c3c511796860045" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>upLayout</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da288cb59a92280e47261a341f2813e676" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>upMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374dad6119882eba136357c2f627992e527d3" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>upPreparation</name></member>
      <member refid="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70" prot="public" virt="non-virtual"><scope>QCPColorScale</scope><name>visible</name></member>
      <member refid="class_q_c_p_color_scale_1a63cf19be184f6670c9495ad3a9a1baeb" prot="protected" virt="virtual"><scope>QCPColorScale</scope><name>wheelEvent</name></member>
      <member refid="class_q_c_p_color_scale_1a6ae0ccd791ecc7160f45f0d65402a3ce" prot="public" virt="virtual"><scope>QCPColorScale</scope><name>~QCPColorScale</name></member>
      <member refid="class_q_c_p_layerable_1a4231cf5b3601d6d3a5781283e7a9735b" prot="public" virt="virtual"><scope>QCPColorScale</scope><name>~QCPLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1a2fa26d3d22a2854c4da1d80f188db961" prot="public" virt="virtual"><scope>QCPColorScale</scope><name>~QCPLayoutElement</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
