<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="namespacercsc" kind="namespace" language="C++">
    <compoundname>rcsc</compoundname>
    <innerclass refid="classrcsc_1_1_angle_deg" prot="public">rcsc::AngleDeg</innerclass>
    <innerclass refid="classrcsc_1_1_angle_is_within" prot="public">rcsc::AngleIsWithin</innerclass>
    <innerclass refid="classrcsc_1_1_circle2_d" prot="public">rcsc::Circle2D</innerclass>
    <innerclass refid="classrcsc_1_1_convex_hull" prot="public">rcsc::ConvexHull</innerclass>
    <innerclass refid="classrcsc_1_1_delaunay_triangulation" prot="public">rcsc::DelaunayTriangulation</innerclass>
    <innerclass refid="classrcsc_1_1_intersected_region2_d" prot="public">rcsc::IntersectedRegion2D</innerclass>
    <innerclass refid="classrcsc_1_1_line2_d" prot="public">rcsc::Line2D</innerclass>
    <innerclass refid="classrcsc_1_1_matrix2_d" prot="public">rcsc::Matrix2D</innerclass>
    <innerclass refid="classrcsc_1_1_polygon2_d" prot="public">rcsc::Polygon2D</innerclass>
    <innerclass refid="classrcsc_1_1_ray2_d" prot="public">rcsc::Ray2D</innerclass>
    <innerclass refid="classrcsc_1_1_rect2_d" prot="public">rcsc::Rect2D</innerclass>
    <innerclass refid="classrcsc_1_1_region2_d" prot="public">rcsc::Region2D</innerclass>
    <innerclass refid="classrcsc_1_1_sector2_d" prot="public">rcsc::Sector2D</innerclass>
    <innerclass refid="classrcsc_1_1_segment2_d" prot="public">rcsc::Segment2D</innerclass>
    <innerclass refid="classrcsc_1_1_size2_d" prot="public">rcsc::Size2D</innerclass>
    <innerclass refid="classrcsc_1_1_triangle2_d" prot="public">rcsc::Triangle2D</innerclass>
    <innerclass refid="classrcsc_1_1_triangulation" prot="public">rcsc::Triangulation</innerclass>
    <innerclass refid="classrcsc_1_1_united_region2_d" prot="public">rcsc::UnitedRegion2D</innerclass>
    <innerclass refid="classrcsc_1_1_vector2_d" prot="public">rcsc::Vector2D</innerclass>
    <innerclass refid="classrcsc_1_1_x_less_equal" prot="public">rcsc::XLessEqual</innerclass>
    <innerclass refid="classrcsc_1_1_x_more_equal" prot="public">rcsc::XMoreEqual</innerclass>
    <innerclass refid="classrcsc_1_1_y_less_equal" prot="public">rcsc::YLessEqual</innerclass>
    <innerclass refid="classrcsc_1_1_y_more_equal" prot="public">rcsc::YMoreEqual</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="polygon__2d_8cpp_1abe1e10fe6c0bfaf2456d5373ab79cac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Predicate</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rcsc::scissorWithLine</definition>
        <argsstring>(const Predicate &amp;in_region, const std::vector&lt; Vector2D &gt; &amp;points, std::vector&lt; Vector2D &gt; *new_points, const Line2D &amp;line)</argsstring>
        <name>scissorWithLine</name>
        <qualifiedname>rcsc::scissorWithLine</qualifiedname>
        <param>
          <type>const Predicate &amp;</type>
          <declname>in_region</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &gt; *</type>
          <declname>new_points</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_line2_d" kindref="compound">Line2D</ref> &amp;</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>scissorring implementation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/polygon_2d.cpp" line="379" column="1" bodyfile="ui/geom/polygon_2d.cpp" bodystart="379" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="rect__2d_8h_1a7edd5a14b929f32f92bf332befa3bf3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_rect2_d" kindref="compound">rcsc::Rect2D</ref></type>
        <definition>const rcsc::Rect2D rcsc::operator&amp;</definition>
        <argsstring>(const rcsc::Rect2D &amp;lhs, const rcsc::Rect2D &amp;rhs)</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>rcsc::operator&amp;</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_rect2_d" kindref="compound">rcsc::Rect2D</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_rect2_d" kindref="compound">rcsc::Rect2D</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>get the intersected rectangle of this rectangle and the other rectangle. If no intersection between rectangles, empty rectangle is returned. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>other rectangle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new rectangle instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/rect_2d.h" line="876" column="1" bodyfile="ui/geom/rect_2d.h" bodystart="876" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="rect__2d_8h_1ad80ac643bf962504472e0aaf581046f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_rect2_d" kindref="compound">rcsc::Rect2D</ref></type>
        <definition>const rcsc::Rect2D rcsc::operator|</definition>
        <argsstring>(const rcsc::Rect2D &amp;lhs, const rcsc::Rect2D &amp;rhs)</argsstring>
        <name>operator|</name>
        <qualifiedname>rcsc::operator|</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_rect2_d" kindref="compound">rcsc::Rect2D</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_rect2_d" kindref="compound">rcsc::Rect2D</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>get the united rectangle of this rectangle and the other rectangle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>other rectangle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new rectangle instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/rect_2d.h" line="890" column="1" bodyfile="ui/geom/rect_2d.h" bodystart="890" bodyend="894"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ui/geom/angle_deg.cpp" line="46" column="1"/>
  </compounddef>
</doxygen>
