<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_painter" kind="class" language="C++" prot="public">
    <compoundname>QCPPainter</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QPainter</basecompoundref>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156d" prot="public" static="no" strong="no">
        <type></type>
        <name>PainterMode</name>
        <qualifiedname>QCPPainter::PainterMode</qualifiedname>
        <enumvalue id="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156da3bac5e87e3d58553b297befb4eee2a45" prot="public">
          <name>pmDefault</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
<para><computeroutput>0x00</computeroutput> Default mode for painting on screen devices </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156daeda679cd55dcd468341d07d48a30b6ab" prot="public">
          <name>pmVectorized</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
<para><computeroutput>0x01</computeroutput> Mode for vectorized painting (e.g. PDF export). For example, this prevents some antialiasing fixes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156dae78f9a4eb277a5f9207f50850a51a0b0" prot="public">
          <name>pmNoCaching</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
<para><computeroutput>0x02</computeroutput> Mode for all sorts of exports (e.g. PNG, PDF,...). For example, this prevents using cached pixmap labels </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156dac1e481bfaf408f2bd2eaad3ec341f36b" prot="public">
          <name>pmNonCosmetic</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
<para><computeroutput>0x04</computeroutput> Turns pen widths 0 to 1, i.e. disables cosmetic pens. (A cosmetic pen is always drawn with width 1 pixel in the vector image/pdf viewer, independent of zoom.) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines special modes the painter can operate in. They disable or enable certain subsets of features/fixes/workarounds, depending on whether they are wanted on the respective output device. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="488" column="3" bodyfile="qcustomplot.h" bodystart="488" bodyend="492"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_painter_1af5d1d6e5df0adbc7de5633250fb3396c" prot="protected" static="no" mutable="no">
        <type>PainterModes</type>
        <definition>PainterModes QCPPainter::mModes</definition>
        <argsstring></argsstring>
        <name>mModes</name>
        <qualifiedname>QCPPainter::mModes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="524" column="16" bodyfile="qcustomplot.h" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_painter_1a7055085da176aee0f6b23298f1003d08" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPPainter::mIsAntialiasing</definition>
        <argsstring></argsstring>
        <name>mIsAntialiasing</name>
        <qualifiedname>QCPPainter::mIsAntialiasing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="525" column="8" bodyfile="qcustomplot.h" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_painter_1a0189e641bbf7dc31ac15aef7b36501fa" prot="protected" static="no" mutable="no">
        <type>QStack&lt; bool &gt;</type>
        <definition>QStack&lt;bool&gt; QCPPainter::mAntialiasingStack</definition>
        <argsstring></argsstring>
        <name>mAntialiasingStack</name>
        <qualifiedname>QCPPainter::mAntialiasingStack</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="528" column="10" bodyfile="qcustomplot.h" bodystart="528" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_painter_1a3c52cb0f43f34573d29bea487da28fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPPainter::QCPPainter</definition>
        <argsstring>()</argsstring>
        <name>QCPPainter</name>
        <qualifiedname>QCPPainter::QCPPainter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> instance and sets default values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="497" column="3" bodyfile="qcustomplot.cpp" bodystart="297" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1ae58dbb1795ddc4351ab324dc9898aa22" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPPainter::QCPPainter</definition>
        <argsstring>(QPaintDevice *device)</argsstring>
        <name>QCPPainter</name>
        <qualifiedname>QCPPainter::QCPPainter</qualifiedname>
        <param>
          <type>QPaintDevice *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> instance on the specified paint <emphasis>device</emphasis> and sets default values. Just like the analogous QPainter constructor, begins painting on <emphasis>device</emphasis> immediately.</para>
<para>Like <ref refid="class_q_c_p_painter_1a0a41146ccd619dceab6e25ec7b46b044" kindref="member">begin</ref>, this method sets QPainter::NonCosmeticDefaultPen in Qt versions before Qt5. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="498" column="12" bodyfile="qcustomplot.cpp" bodystart="311" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1a5aff96296e995f6f35b2596a482aae37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPPainter::antialiasing</definition>
        <argsstring>() const</argsstring>
        <name>antialiasing</name>
        <qualifiedname>QCPPainter::antialiasing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="501" column="8" bodyfile="qcustomplot.h" bodystart="501" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1aef102658219b24165f7ee2aad1b9e48f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>PainterModes</type>
        <definition>PainterModes QCPPainter::modes</definition>
        <argsstring>() const</argsstring>
        <name>modes</name>
        <qualifiedname>QCPPainter::modes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="502" column="16" bodyfile="qcustomplot.h" bodystart="502" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1aaba1deb9188244d9ea65b035112b4d05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPPainter::setAntialiasing</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setAntialiasing</name>
        <qualifiedname>QCPPainter::setAntialiasing</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether painting uses antialiasing or not. Use this method instead of using setRenderHint with QPainter::Antialiasing directly, as it allows <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> to regain pixel exactness between antialiased and non-antialiased painting (Since Qt &lt; 5.0 uses slightly different coordinate systems for AA/Non-AA painting). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="505" column="8" bodyfile="qcustomplot.cpp" bodystart="385" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1af6b1f7d2bbc548b10aa55d8b6ad49577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPPainter::setMode</definition>
        <argsstring>(PainterMode mode, bool enabled=true)</argsstring>
        <name>setMode</name>
        <qualifiedname>QCPPainter::setMode</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156d" kindref="member">PainterMode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Sets the mode of the painter. This controls whether the painter shall adjust its fixes/workarounds optimized for certain output devices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="506" column="8" bodyfile="qcustomplot.cpp" bodystart="436" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1a5fac93adc29c7c4dea9f3e171e9e635e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPPainter::setModes</definition>
        <argsstring>(PainterModes modes)</argsstring>
        <name>setModes</name>
        <qualifiedname>QCPPainter::setModes</qualifiedname>
        <param>
          <type>PainterModes</type>
          <declname>modes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the mode of the painter. This controls whether the painter shall adjust its fixes/workarounds optimized for certain output devices. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="507" column="8" bodyfile="qcustomplot.cpp" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1a0a41146ccd619dceab6e25ec7b46b044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPPainter::begin</definition>
        <argsstring>(QPaintDevice *device)</argsstring>
        <name>begin</name>
        <qualifiedname>QCPPainter::begin</qualifiedname>
        <param>
          <type>QPaintDevice *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the QPainter::NonCosmeticDefaultPen in Qt versions before Qt5 after beginning painting on <emphasis>device</emphasis>. This is necessary to get cosmetic pen consistency across Qt versions, because since Qt5, all pens are non-cosmetic by default, and in Qt4 this render hint must be set to get that behaviour.</para>
<para>The Constructor <ref refid="class_q_c_p_painter_1ae58dbb1795ddc4351ab324dc9898aa22" kindref="member">QCPPainter(QPaintDevice *device)</ref> which directly starts painting also sets the render hint as appropriate.</para>
<para><simplesect kind="note"><para>this function hides the non-virtual base class implementation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="510" column="8" bodyfile="qcustomplot.cpp" bodystart="421" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1af9c7a4cd1791403901f8c5b82a150195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPPainter::setPen</definition>
        <argsstring>(const QPen &amp;pen)</argsstring>
        <name>setPen</name>
        <qualifiedname>QCPPainter::setPen</qualifiedname>
        <param>
          <type>const QPen &amp;</type>
          <declname>pen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the pen of the painter and applies certain fixes to it, depending on the mode of this <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref>.</para>
<para><simplesect kind="note"><para>this function hides the non-virtual base class implementation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="511" column="8" bodyfile="qcustomplot.cpp" bodystart="328" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1a5c4d88f21564e156e88ef807f7cf0003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPPainter::setPen</definition>
        <argsstring>(const QColor &amp;color)</argsstring>
        <name>setPen</name>
        <qualifiedname>QCPPainter::setPen</qualifiedname>
        <param>
          <type>const QColor &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Sets the pen (by color) of the painter and applies certain fixes to it, depending on the mode of this <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref>.</para>
<para><simplesect kind="note"><para>this function hides the non-virtual base class implementation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="512" column="8" bodyfile="qcustomplot.cpp" bodystart="342" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1a25e76095aae41da0d08035060e5f81ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPPainter::setPen</definition>
        <argsstring>(Qt::PenStyle penStyle)</argsstring>
        <name>setPen</name>
        <qualifiedname>QCPPainter::setPen</qualifiedname>
        <param>
          <type>Qt::PenStyle</type>
          <declname>penStyle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Sets the pen (by style) of the painter and applies certain fixes to it, depending on the mode of this <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref>.</para>
<para><simplesect kind="note"><para>this function hides the non-virtual base class implementation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="513" column="8" bodyfile="qcustomplot.cpp" bodystart="356" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1a0b4b1b9bd495e182c731774dc800e6e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPPainter::drawLine</definition>
        <argsstring>(const QLineF &amp;line)</argsstring>
        <name>drawLine</name>
        <qualifiedname>QCPPainter::drawLine</qualifiedname>
        <param>
          <type>const QLineF &amp;</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Works around a Qt bug introduced with Qt 4.8 which makes drawing QLineF unpredictable when antialiasing is disabled. Thus when antialiasing is disabled, it rounds the <emphasis>line</emphasis> to integer coordinates and then passes it to the original drawLine.</para>
<para><simplesect kind="note"><para>this function hides the non-virtual base class implementation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="514" column="8" bodyfile="qcustomplot.cpp" bodystart="371" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1ad1638db27929491b3f1beb74d6cbad5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QCPPainter::drawLine</definition>
        <argsstring>(const QPointF &amp;p1, const QPointF &amp;p2)</argsstring>
        <name>drawLine</name>
        <qualifiedname>QCPPainter::drawLine</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="515" column="8" bodyfile="qcustomplot.h" bodystart="515" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1a8fd6821ee6fecbfa04444c9062912abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPPainter::save</definition>
        <argsstring>()</argsstring>
        <name>save</name>
        <qualifiedname>QCPPainter::save</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves the painter (see QPainter::save). Since <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> adds some new internal state to QPainter, the save/restore functions are reimplemented to also save/restore those members.</para>
<para><simplesect kind="note"><para>this function hides the non-virtual base class implementation.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_q_c_p_painter_1a64908e6298d5bbd83457dc987cc3a022" kindref="member">restore</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="516" column="8" bodyfile="qcustomplot.cpp" bodystart="452" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1a64908e6298d5bbd83457dc987cc3a022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPPainter::restore</definition>
        <argsstring>()</argsstring>
        <name>restore</name>
        <qualifiedname>QCPPainter::restore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restores the painter (see QPainter::restore). Since <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> adds some new internal state to QPainter, the save/restore functions are reimplemented to also save/restore those members.</para>
<para><simplesect kind="note"><para>this function hides the non-virtual base class implementation.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_q_c_p_painter_1a8fd6821ee6fecbfa04444c9062912abd" kindref="member">save</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="517" column="8" bodyfile="qcustomplot.cpp" bodystart="466" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_painter_1a7e63fbcf47e35c6f2ecd11b8fef7c7d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPPainter::makeNonCosmetic</definition>
        <argsstring>()</argsstring>
        <name>makeNonCosmetic</name>
        <qualifiedname>QCPPainter::makeNonCosmetic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the pen width to 1 if it currently is 0. This function is called in the <ref refid="class_q_c_p_painter_1af9c7a4cd1791403901f8c5b82a150195" kindref="member">setPen</ref> overrides when the <ref refid="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156dac1e481bfaf408f2bd2eaad3ec341f36b" kindref="member">pmNonCosmetic</ref> mode is set. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="520" column="8" bodyfile="qcustomplot.cpp" bodystart="479" bodyend="487"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>QPainter subclass used internally. </para>
    </briefdescription>
    <detaileddescription>
<para>This QPainter subclass is used to provide some extended functionality e.g. for tweaking position consistency between antialiased and non-antialiased painting. Further it provides workarounds for QPainter quirks.</para>
<para><simplesect kind="warning"><para>This class intentionally hides non-virtual functions of QPainter, e.g. setPen, save and restore. So while it is possible to pass a <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> instance to a function that expects a QPainter pointer, some of the workarounds and tweaks will be unavailable to the function (because it will call the base class implementations of the functions actually hidden by <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref>). </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QCPPainter</label>
        <link refid="class_q_c_p_painter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QPainter</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QCPPainter</label>
        <link refid="class_q_c_p_painter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QPainter</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="480" column="1" bodyfile="qcustomplot.h" bodystart="481" bodyend="529"/>
    <listofallmembers>
      <member refid="class_q_c_p_painter_1a5aff96296e995f6f35b2596a482aae37" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>antialiasing</name></member>
      <member refid="class_q_c_p_painter_1a0a41146ccd619dceab6e25ec7b46b044" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>begin</name></member>
      <member refid="class_q_c_p_painter_1a0b4b1b9bd495e182c731774dc800e6e0" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>drawLine</name></member>
      <member refid="class_q_c_p_painter_1ad1638db27929491b3f1beb74d6cbad5e" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>drawLine</name></member>
      <member refid="class_q_c_p_painter_1a7e63fbcf47e35c6f2ecd11b8fef7c7d8" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>makeNonCosmetic</name></member>
      <member refid="class_q_c_p_painter_1a0189e641bbf7dc31ac15aef7b36501fa" prot="protected" virt="non-virtual"><scope>QCPPainter</scope><name>mAntialiasingStack</name></member>
      <member refid="class_q_c_p_painter_1a7055085da176aee0f6b23298f1003d08" prot="protected" virt="non-virtual"><scope>QCPPainter</scope><name>mIsAntialiasing</name></member>
      <member refid="class_q_c_p_painter_1af5d1d6e5df0adbc7de5633250fb3396c" prot="protected" virt="non-virtual"><scope>QCPPainter</scope><name>mModes</name></member>
      <member refid="class_q_c_p_painter_1aef102658219b24165f7ee2aad1b9e48f" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>modes</name></member>
      <member refid="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156d" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>PainterMode</name></member>
      <member refid="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156da3bac5e87e3d58553b297befb4eee2a45" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>pmDefault</name></member>
      <member refid="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156dae78f9a4eb277a5f9207f50850a51a0b0" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>pmNoCaching</name></member>
      <member refid="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156dac1e481bfaf408f2bd2eaad3ec341f36b" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>pmNonCosmetic</name></member>
      <member refid="class_q_c_p_painter_1a156cf16444ff5e0d81a73c615fdb156daeda679cd55dcd468341d07d48a30b6ab" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>pmVectorized</name></member>
      <member refid="class_q_c_p_painter_1a3c52cb0f43f34573d29bea487da28fe8" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>QCPPainter</name></member>
      <member refid="class_q_c_p_painter_1ae58dbb1795ddc4351ab324dc9898aa22" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>QCPPainter</name></member>
      <member refid="class_q_c_p_painter_1a64908e6298d5bbd83457dc987cc3a022" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>restore</name></member>
      <member refid="class_q_c_p_painter_1a8fd6821ee6fecbfa04444c9062912abd" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>save</name></member>
      <member refid="class_q_c_p_painter_1aaba1deb9188244d9ea65b035112b4d05" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>setAntialiasing</name></member>
      <member refid="class_q_c_p_painter_1af6b1f7d2bbc548b10aa55d8b6ad49577" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>setMode</name></member>
      <member refid="class_q_c_p_painter_1a5fac93adc29c7c4dea9f3e171e9e635e" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>setModes</name></member>
      <member refid="class_q_c_p_painter_1af9c7a4cd1791403901f8c5b82a150195" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>setPen</name></member>
      <member refid="class_q_c_p_painter_1a5c4d88f21564e156e88ef807f7cf0003" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>setPen</name></member>
      <member refid="class_q_c_p_painter_1a25e76095aae41da0d08035060e5f81ca" prot="public" virt="non-virtual"><scope>QCPPainter</scope><name>setPen</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
