<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_abstract_paint_buffer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QCPAbstractPaintBuffer</compoundname>
    <derivedcompoundref refid="class_q_c_p_paint_buffer_pixmap" prot="public" virt="non-virtual">QCPPaintBufferPixmap</derivedcompoundref>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_abstract_paint_buffer_1ae246c426222bfa18d5e8797fab73e3ce" prot="protected" static="no" mutable="no">
        <type>QSize</type>
        <definition>QSize QCPAbstractPaintBuffer::mSize</definition>
        <argsstring></argsstring>
        <name>mSize</name>
        <qualifiedname>QCPAbstractPaintBuffer::mSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="563" column="9" bodyfile="qcustomplot.h" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_paint_buffer_1a33c1fd784478441fcff9ebf3d69af5b2" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double QCPAbstractPaintBuffer::mDevicePixelRatio</definition>
        <argsstring></argsstring>
        <name>mDevicePixelRatio</name>
        <qualifiedname>QCPAbstractPaintBuffer::mDevicePixelRatio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="564" column="10" bodyfile="qcustomplot.h" bodystart="564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_paint_buffer_1a3bc49cc9cf9daaca3a60977f010c08c9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPAbstractPaintBuffer::mInvalidated</definition>
        <argsstring></argsstring>
        <name>mInvalidated</name>
        <qualifiedname>QCPAbstractPaintBuffer::mInvalidated</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="567" column="8" bodyfile="qcustomplot.h" bodystart="567" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1a3ce532c12f10b81697108835755641e2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPAbstractPaintBuffer::QCPAbstractPaintBuffer</definition>
        <argsstring>(const QSize &amp;size, double devicePixelRatio)</argsstring>
        <name>QCPAbstractPaintBuffer</name>
        <qualifiedname>QCPAbstractPaintBuffer::QCPAbstractPaintBuffer</qualifiedname>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>double</type>
          <declname>devicePixelRatio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a paint buffer and initializes it with the provided <emphasis>size</emphasis> and <emphasis>devicePixelRatio</emphasis>.</para>
<para>Subclasses must call their <ref refid="class_q_c_p_abstract_paint_buffer_1a9bbd9f7520ccfa3e13fc737813f706e4" kindref="member">reallocateBuffer</ref> implementation in their respective constructors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="542" column="12" bodyfile="qcustomplot.cpp" bodystart="581" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1a50fbb1265814d019a1707f4cb11e20de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPAbstractPaintBuffer::~QCPAbstractPaintBuffer</definition>
        <argsstring>()</argsstring>
        <name>~QCPAbstractPaintBuffer</name>
        <qualifiedname>QCPAbstractPaintBuffer::~QCPAbstractPaintBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="543" column="11" bodyfile="qcustomplot.cpp" bodystart="588" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1a3ea8284e547985c5d263f26a6adfa11f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QSize</type>
        <definition>QSize QCPAbstractPaintBuffer::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>QCPAbstractPaintBuffer::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="546" column="9" bodyfile="qcustomplot.h" bodystart="546" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1a76bf771cda945a6c602cf9b7d365d92b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractPaintBuffer::invalidated</definition>
        <argsstring>() const</argsstring>
        <name>invalidated</name>
        <qualifiedname>QCPAbstractPaintBuffer::invalidated</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="547" column="8" bodyfile="qcustomplot.h" bodystart="547" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1aac1b981f8c1744036610ff1a6b9461f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double QCPAbstractPaintBuffer::devicePixelRatio</definition>
        <argsstring>() const</argsstring>
        <name>devicePixelRatio</name>
        <qualifiedname>QCPAbstractPaintBuffer::devicePixelRatio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="548" column="10" bodyfile="qcustomplot.h" bodystart="548" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPaintBuffer::setSize</definition>
        <argsstring>(const QSize &amp;size)</argsstring>
        <name>setSize</name>
        <qualifiedname>QCPAbstractPaintBuffer::setSize</qualifiedname>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the paint buffer size.</para>
<para>The buffer is reallocated (by calling <ref refid="class_q_c_p_abstract_paint_buffer_1a9bbd9f7520ccfa3e13fc737813f706e4" kindref="member">reallocateBuffer</ref>), so any painters that were obtained by <ref refid="class_q_c_p_abstract_paint_buffer_1ab1329e5e2cfc44a7cef1b5e9b6fab20d" kindref="member">startPainting</ref> are invalidated and must not be used after calling this method.</para>
<para>If <emphasis>size</emphasis> is already the current buffer size, this method does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="551" column="8" bodyfile="qcustomplot.cpp" bodystart="600" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1ae4c7dc70dfc66be2879ce297b2b3d67f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPaintBuffer::setInvalidated</definition>
        <argsstring>(bool invalidated=true)</argsstring>
        <name>setInvalidated</name>
        <qualifiedname>QCPAbstractPaintBuffer::setInvalidated</qualifiedname>
        <param>
          <type>bool</type>
          <declname>invalidated</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the invalidated flag to <emphasis>invalidated</emphasis>.</para>
<para>This mechanism is used internally in conjunction with isolated replotting of <ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> instances (in <ref refid="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538" kindref="member">QCPLayer::lmBuffered</ref> mode). If <ref refid="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180" kindref="member">QCPLayer::replot</ref> is called on a buffered layer, i.e. an isolated repaint of only that layer (and its dedicated paint buffer) is requested, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> will decide depending on the invalidated flags of other paint buffers whether it also replots them, instead of only the layer on which the replot was called.</para>
<para>The invalidated flag is set to true when <ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> association has changed, i.e. if layers were added or removed from this buffer, or if they were reordered. It is set to false as soon as all associated <ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref> instances are drawn onto the buffer.</para>
<para>Under normal circumstances, it is not necessary to manually call this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="552" column="8" bodyfile="qcustomplot.cpp" bodystart="624" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1a555eaad5d5c806420ff35602a1bb68fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPaintBuffer::setDevicePixelRatio</definition>
        <argsstring>(double ratio)</argsstring>
        <name>setDevicePixelRatio</name>
        <qualifiedname>QCPAbstractPaintBuffer::setDevicePixelRatio</qualifiedname>
        <param>
          <type>double</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the device pixel ratio to <emphasis>ratio</emphasis>. This is useful to render on high-DPI output devices. The ratio is automatically set to the device pixel ratio used by the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance.</para>
<para>The buffer is reallocated (by calling <ref refid="class_q_c_p_abstract_paint_buffer_1a9bbd9f7520ccfa3e13fc737813f706e4" kindref="member">reallocateBuffer</ref>), so any painters that were obtained by <ref refid="class_q_c_p_abstract_paint_buffer_1ab1329e5e2cfc44a7cef1b5e9b6fab20d" kindref="member">startPainting</ref> are invalidated and must not be used after calling this method.</para>
<para><simplesect kind="note"><para>This method is only available for Qt versions 5.4 and higher. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="553" column="8" bodyfile="qcustomplot.cpp" bodystart="638" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1ab1329e5e2cfc44a7cef1b5e9b6fab20d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
        <definition>virtual QCPPainter * QCPAbstractPaintBuffer::startPainting</definition>
        <argsstring>()=0</argsstring>
        <name>startPainting</name>
        <qualifiedname>QCPAbstractPaintBuffer::startPainting</qualifiedname>
        <reimplementedby refid="class_q_c_p_paint_buffer_pixmap_1a357964ef7d28cfa530338be4e5c93234">startPainting</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> which is ready to draw to this buffer. The ownership and thus the responsibility to delete the painter after the painting operations are complete is given to the caller of this method.</para>
<para>Once you are done using the painter, delete the painter and call <ref refid="class_q_c_p_abstract_paint_buffer_1a996577a718aecb3b9b5351fab797a062" kindref="member">donePainting</ref>.</para>
<para>While a painter generated with this method is active, you must not call <ref refid="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01" kindref="member">setSize</ref>, <ref refid="class_q_c_p_abstract_paint_buffer_1a555eaad5d5c806420ff35602a1bb68fa" kindref="member">setDevicePixelRatio</ref> or <ref refid="class_q_c_p_abstract_paint_buffer_1a7fc69e37c2a8232e8b2eb8b5853aae4c" kindref="member">clear</ref>.</para>
<para>This method may return 0, if a painter couldn&apos;t be activated on the buffer. This usually indicates a problem with the respective painting backend. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="556" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1a996577a718aecb3b9b5351fab797a062" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void QCPAbstractPaintBuffer::donePainting</definition>
        <argsstring>()</argsstring>
        <name>donePainting</name>
        <qualifiedname>QCPAbstractPaintBuffer::donePainting</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If you have acquired a <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> to paint onto this paint buffer via <ref refid="class_q_c_p_abstract_paint_buffer_1ab1329e5e2cfc44a7cef1b5e9b6fab20d" kindref="member">startPainting</ref>, call this method as soon as you are done with the painting operations and have deleted the painter.</para>
<para>paint buffer subclasses may use this method to perform any type of cleanup that is necessary. The default implementation does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="557" column="16" bodyfile="qcustomplot.h" bodystart="557" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1a1f92e533105b575951eba5f01d8d129d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QCPAbstractPaintBuffer::draw</definition>
        <argsstring>(QCPPainter *painter) const =0</argsstring>
        <name>draw</name>
        <qualifiedname>QCPAbstractPaintBuffer::draw</qualifiedname>
        <reimplementedby refid="class_q_c_p_paint_buffer_pixmap_1af7bfc685e56a0a9329e57cd9a265eb74">draw</reimplementedby>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws the contents of this buffer with the provided <emphasis>painter</emphasis>. This is the method that is used to finally join all paint buffers and draw them onto the screen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="558" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1a7fc69e37c2a8232e8b2eb8b5853aae4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QCPAbstractPaintBuffer::clear</definition>
        <argsstring>(const QColor &amp;color)=0</argsstring>
        <name>clear</name>
        <qualifiedname>QCPAbstractPaintBuffer::clear</qualifiedname>
        <reimplementedby refid="class_q_c_p_paint_buffer_pixmap_1a14badbd010a3cde6b55817ccb7b65217">clear</reimplementedby>
        <param>
          <type>const QColor &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills the entire buffer with the provided <emphasis>color</emphasis>. To have an empty transparent buffer, use the named color <computeroutput>Qt::transparent</computeroutput>.</para>
<para>This method must not be called if there is currently a painter (acquired with <ref refid="class_q_c_p_abstract_paint_buffer_1ab1329e5e2cfc44a7cef1b5e9b6fab20d" kindref="member">startPainting</ref>) active. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="559" column="16"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_abstract_paint_buffer_1a9bbd9f7520ccfa3e13fc737813f706e4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QCPAbstractPaintBuffer::reallocateBuffer</definition>
        <argsstring>()=0</argsstring>
        <name>reallocateBuffer</name>
        <qualifiedname>QCPAbstractPaintBuffer::reallocateBuffer</qualifiedname>
        <reimplementedby refid="class_q_c_p_paint_buffer_pixmap_1ad49f3205ba3463b1c44f8db3cfcc90f0">reallocateBuffer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reallocates the internal buffer with the currently configured size (<ref refid="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01" kindref="member">setSize</ref>) and device pixel ratio, if applicable (<ref refid="class_q_c_p_abstract_paint_buffer_1a555eaad5d5c806420ff35602a1bb68fa" kindref="member">setDevicePixelRatio</ref>). It is called as soon as any of those properties are changed on this paint buffer.</para>
<para><simplesect kind="note"><para>Subclasses of <ref refid="class_q_c_p_abstract_paint_buffer" kindref="compound">QCPAbstractPaintBuffer</ref> must call their reimplementation of this method in their constructor, to perform the first allocation (this can not be done by the base class because calling pure virtual methods in base class constructors is not possible). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="570" column="16"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The abstract base class for paint buffers, which define the rendering backend. </para>
    </briefdescription>
    <detaileddescription>
<para>This abstract base class defines the basic interface that a paint buffer needs to provide in order to be usable by <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>.</para>
<para>A paint buffer manages both a surface to draw onto, and the matching paint device. The size of the surface can be changed via <ref refid="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01" kindref="member">setSize</ref>. External classes (<ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> and <ref refid="class_q_c_p_layer" kindref="compound">QCPLayer</ref>) request a painter via <ref refid="class_q_c_p_abstract_paint_buffer_1ab1329e5e2cfc44a7cef1b5e9b6fab20d" kindref="member">startPainting</ref> and then perform the draw calls. Once the painting is complete, <ref refid="class_q_c_p_abstract_paint_buffer_1a996577a718aecb3b9b5351fab797a062" kindref="member">donePainting</ref> is called, so the paint buffer implementation can do clean up if necessary. Before rendering a frame, each paint buffer is usually filled with a color using <ref refid="class_q_c_p_abstract_paint_buffer_1a7fc69e37c2a8232e8b2eb8b5853aae4c" kindref="member">clear</ref> (usually the color is <computeroutput>Qt::transparent</computeroutput>), to remove the contents of the previous frame.</para>
<para>The simplest paint buffer implementation is <ref refid="class_q_c_p_paint_buffer_pixmap" kindref="compound">QCPPaintBufferPixmap</ref> which allows regular software rendering via the raster engine. Hardware accelerated rendering via pixel buffers and frame buffer objects is provided by QCPPaintBufferGlPbuffer and QCPPaintBufferGlFbo. They are used automatically if <ref refid="class_q_custom_plot_1a7db1adc09016329f3aef7c60da935789" kindref="member">QCustomPlot::setOpenGl</ref> is enabled. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QCPAbstractPaintBuffer</label>
        <link refid="class_q_c_p_abstract_paint_buffer"/>
      </node>
      <node id="2">
        <label>QCPPaintBufferPixmap</label>
        <link refid="class_q_c_p_paint_buffer_pixmap"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="qcustomplot.h" line="539" column="1" bodyfile="qcustomplot.h" bodystart="540" bodyend="571"/>
    <listofallmembers>
      <member refid="class_q_c_p_abstract_paint_buffer_1a7fc69e37c2a8232e8b2eb8b5853aae4c" prot="public" virt="pure-virtual"><scope>QCPAbstractPaintBuffer</scope><name>clear</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1aac1b981f8c1744036610ff1a6b9461f9" prot="public" virt="non-virtual"><scope>QCPAbstractPaintBuffer</scope><name>devicePixelRatio</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a996577a718aecb3b9b5351fab797a062" prot="public" virt="virtual"><scope>QCPAbstractPaintBuffer</scope><name>donePainting</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a1f92e533105b575951eba5f01d8d129d" prot="public" virt="pure-virtual"><scope>QCPAbstractPaintBuffer</scope><name>draw</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a76bf771cda945a6c602cf9b7d365d92b" prot="public" virt="non-virtual"><scope>QCPAbstractPaintBuffer</scope><name>invalidated</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a33c1fd784478441fcff9ebf3d69af5b2" prot="protected" virt="non-virtual"><scope>QCPAbstractPaintBuffer</scope><name>mDevicePixelRatio</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a3bc49cc9cf9daaca3a60977f010c08c9" prot="protected" virt="non-virtual"><scope>QCPAbstractPaintBuffer</scope><name>mInvalidated</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1ae246c426222bfa18d5e8797fab73e3ce" prot="protected" virt="non-virtual"><scope>QCPAbstractPaintBuffer</scope><name>mSize</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a3ce532c12f10b81697108835755641e2" prot="public" virt="non-virtual"><scope>QCPAbstractPaintBuffer</scope><name>QCPAbstractPaintBuffer</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a9bbd9f7520ccfa3e13fc737813f706e4" prot="protected" virt="pure-virtual"><scope>QCPAbstractPaintBuffer</scope><name>reallocateBuffer</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a555eaad5d5c806420ff35602a1bb68fa" prot="public" virt="non-virtual"><scope>QCPAbstractPaintBuffer</scope><name>setDevicePixelRatio</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1ae4c7dc70dfc66be2879ce297b2b3d67f" prot="public" virt="non-virtual"><scope>QCPAbstractPaintBuffer</scope><name>setInvalidated</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01" prot="public" virt="non-virtual"><scope>QCPAbstractPaintBuffer</scope><name>setSize</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a3ea8284e547985c5d263f26a6adfa11f" prot="public" virt="non-virtual"><scope>QCPAbstractPaintBuffer</scope><name>size</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1ab1329e5e2cfc44a7cef1b5e9b6fab20d" prot="public" virt="pure-virtual"><scope>QCPAbstractPaintBuffer</scope><name>startPainting</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a50fbb1265814d019a1707f4cb11e20de" prot="public" virt="virtual"><scope>QCPAbstractPaintBuffer</scope><name>~QCPAbstractPaintBuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
