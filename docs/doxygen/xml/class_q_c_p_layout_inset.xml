<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_layout_inset" kind="class" language="C++" prot="public">
    <compoundname>QCPLayoutInset</compoundname>
    <basecompoundref refid="class_q_c_p_layout" prot="public" virt="non-virtual">QCPLayout</basecompoundref>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192" prot="public" static="no" strong="no">
        <type></type>
        <name>InsetPlacement</name>
        <qualifiedname>QCPLayoutInset::InsetPlacement</qualifiedname>
        <enumvalue id="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa4802986ea2cea457f932b115acba59e" prot="public">
          <name>ipFree</name>
          <briefdescription>
<para>The element may be positioned/sized arbitrarily, see <ref refid="class_q_c_p_layout_inset_1aa487c8378a6f9533567a2e6430099dc3" kindref="member">setInsetRect</ref>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa81e7df4a785ddee2229a8f47c46e817" prot="public">
          <name>ipBorderAligned</name>
          <briefdescription>
<para>The element is aligned to one of the layout sides, see <ref refid="class_q_c_p_layout_inset_1a62882a4f9ad58bb0f53da12fde022abe" kindref="member">setInsetAlignment</ref>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines how the placement and sizing is handled for a certain element in a <ref refid="class_q_c_p_layout_inset" kindref="compound">QCPLayoutInset</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1444" column="3" bodyfile="qcustomplot.h" bodystart="1444" bodyend="1446"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_layout_inset_1a8fff7eae9a1be9a5c1e544fb379f682f" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> * &gt;</type>
        <definition>QList&lt;QCPLayoutElement*&gt; QCPLayoutInset::mElements</definition>
        <argsstring></argsstring>
        <name>mElements</name>
        <qualifiedname>QCPLayoutInset::mElements</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1477" column="9" bodyfile="qcustomplot.h" bodystart="1477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layout_inset_1a57a0a4e445cc78eada29765ecf092abe" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192" kindref="member">InsetPlacement</ref> &gt;</type>
        <definition>QList&lt;InsetPlacement&gt; QCPLayoutInset::mInsetPlacement</definition>
        <argsstring></argsstring>
        <name>mInsetPlacement</name>
        <qualifiedname>QCPLayoutInset::mInsetPlacement</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1478" column="9" bodyfile="qcustomplot.h" bodystart="1478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layout_inset_1a55e9b84c310136ff985a6544184ab64a" prot="protected" static="no" mutable="no">
        <type>QList&lt; Qt::Alignment &gt;</type>
        <definition>QList&lt;Qt::Alignment&gt; QCPLayoutInset::mInsetAlignment</definition>
        <argsstring></argsstring>
        <name>mInsetAlignment</name>
        <qualifiedname>QCPLayoutInset::mInsetAlignment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1479" column="9" bodyfile="qcustomplot.h" bodystart="1479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_layout_inset_1aaa8f6b5029458f3d97a65239524a2b33" prot="protected" static="no" mutable="no">
        <type>QList&lt; QRectF &gt;</type>
        <definition>QList&lt;QRectF&gt; QCPLayoutInset::mInsetRect</definition>
        <argsstring></argsstring>
        <name>mInsetRect</name>
        <qualifiedname>QCPLayoutInset::mInsetRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1480" column="9" bodyfile="qcustomplot.h" bodystart="1480" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_layout_inset_1a3ad984f3221735374cc5dee14356a7dd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPLayoutInset::QCPLayoutInset</definition>
        <argsstring>()</argsstring>
        <name>QCPLayoutInset</name>
        <qualifiedname>QCPLayoutInset::QCPLayoutInset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an instance of <ref refid="class_q_c_p_layout_inset" kindref="compound">QCPLayoutInset</ref> and sets default values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1449" column="12" bodyfile="qcustomplot.cpp" bodystart="4887" bodyend="4889"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1a3726b9068ad31556ab60b714b5d0f9d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPLayoutInset::~QCPLayoutInset</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>~QCPLayoutInset</name>
        <qualifiedname>QCPLayoutInset::~QCPLayoutInset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1450" column="11" bodyfile="qcustomplot.cpp" bodystart="4891" bodyend="4896"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1a6fcbd74ebbc45bfe64c604b2791aa57f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192" kindref="member">InsetPlacement</ref></type>
        <definition>QCPLayoutInset::InsetPlacement QCPLayoutInset::insetPlacement</definition>
        <argsstring>(int index) const</argsstring>
        <name>insetPlacement</name>
        <qualifiedname>QCPLayoutInset::insetPlacement</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the placement type of the element with the specified <emphasis>index</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1453" column="18" bodyfile="qcustomplot.cpp" bodystart="4901" bodyend="4910"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1a5b33b66f0abbb4a7cc2f8aa6c94cf7f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Qt::Alignment</type>
        <definition>Qt::Alignment QCPLayoutInset::insetAlignment</definition>
        <argsstring>(int index) const</argsstring>
        <name>insetAlignment</name>
        <qualifiedname>QCPLayoutInset::insetAlignment</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the alignment of the element with the specified <emphasis>index</emphasis>. The alignment only has a meaning, if the inset placement (<ref refid="class_q_c_p_layout_inset_1a63298830744d5d8c5345511c00fd2144" kindref="member">setInsetPlacement</ref>) is <ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa81e7df4a785ddee2229a8f47c46e817" kindref="member">ipBorderAligned</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1454" column="17" bodyfile="qcustomplot.cpp" bodystart="4916" bodyend="4929"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1ab23099a46af17c31f4c40668f13c9de1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF QCPLayoutInset::insetRect</definition>
        <argsstring>(int index) const</argsstring>
        <name>insetRect</name>
        <qualifiedname>QCPLayoutInset::insetRect</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the rect of the element with the specified <emphasis>index</emphasis>. The rect only has a meaning, if the inset placement (<ref refid="class_q_c_p_layout_inset_1a63298830744d5d8c5345511c00fd2144" kindref="member">setInsetPlacement</ref>) is <ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa4802986ea2cea457f932b115acba59e" kindref="member">ipFree</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1455" column="10" bodyfile="qcustomplot.cpp" bodystart="4935" bodyend="4944"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1a63298830744d5d8c5345511c00fd2144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutInset::setInsetPlacement</definition>
        <argsstring>(int index, InsetPlacement placement)</argsstring>
        <name>setInsetPlacement</name>
        <qualifiedname>QCPLayoutInset::setInsetPlacement</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192" kindref="member">InsetPlacement</ref></type>
          <declname>placement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the inset placement type of the element with the specified <emphasis>index</emphasis> to <emphasis>placement</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192" kindref="member">InsetPlacement</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1458" column="8" bodyfile="qcustomplot.cpp" bodystart="4951" bodyend="4957"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1a62882a4f9ad58bb0f53da12fde022abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutInset::setInsetAlignment</definition>
        <argsstring>(int index, Qt::Alignment alignment)</argsstring>
        <name>setInsetAlignment</name>
        <qualifiedname>QCPLayoutInset::setInsetAlignment</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>Qt::Alignment</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the inset placement (<ref refid="class_q_c_p_layout_inset_1a63298830744d5d8c5345511c00fd2144" kindref="member">setInsetPlacement</ref>) is <ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa81e7df4a785ddee2229a8f47c46e817" kindref="member">ipBorderAligned</ref>, this function is used to set the alignment of the element with the specified <emphasis>index</emphasis> to <emphasis>alignment</emphasis>.</para>
<para><emphasis>alignment</emphasis> is an or combination of the following alignment flags: Qt::AlignLeft, Qt::AlignHCenter, Qt::AlighRight, Qt::AlignTop, Qt::AlignVCenter, Qt::AlignBottom. Any other alignment flags will be ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1459" column="8" bodyfile="qcustomplot.cpp" bodystart="4967" bodyend="4973"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1aa487c8378a6f9533567a2e6430099dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutInset::setInsetRect</definition>
        <argsstring>(int index, const QRectF &amp;rect)</argsstring>
        <name>setInsetRect</name>
        <qualifiedname>QCPLayoutInset::setInsetRect</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the inset placement (<ref refid="class_q_c_p_layout_inset_1a63298830744d5d8c5345511c00fd2144" kindref="member">setInsetPlacement</ref>) is <ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa4802986ea2cea457f932b115acba59e" kindref="member">ipFree</ref>, this function is used to set the position and size of the element with the specified <emphasis>index</emphasis> to <emphasis>rect</emphasis>.</para>
<para><emphasis>rect</emphasis> is given in fractions of the whole inset layout rect. So an inset with rect (0, 0, 1, 1) will span the entire layout. An inset with rect (0.6, 0.1, 0.35, 0.35) will be in the top right corner of the layout, with 35% width and height of the parent layout.</para>
<para>Note that the minimum and maximum sizes of the embedded element (<ref refid="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b" kindref="member">QCPLayoutElement::setMinimumSize</ref>, <ref refid="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95" kindref="member">QCPLayoutElement::setMaximumSize</ref>) are enforced. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1460" column="8" bodyfile="qcustomplot.cpp" bodystart="4986" bodyend="4992"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1a493526b922ea66a75c45ef1842446988" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPLayoutInset::updateLayout</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>updateLayout</name>
        <qualifiedname>QCPLayoutInset::updateLayout</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1a165c77f6287ac92e8d03017ad913378b">updateLayout</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1463" column="16" bodyfile="qcustomplot.cpp" bodystart="4995" bodyend="5030"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1a7f5aa4d48a2e844cfe6dd7ed8f0861df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int QCPLayoutInset::elementCount</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>elementCount</name>
        <qualifiedname>QCPLayoutInset::elementCount</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1acc6012e7dacc55c4282942c31c45b8d9">elementCount</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements/cells in the layout.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_1aca129722c019f91d3367046f80abfa77" kindref="member">elements</ref>, <ref refid="class_q_c_p_layout_inset_1a881ca205605bae9c034733b808f93a02" kindref="member">elementAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1464" column="15" bodyfile="qcustomplot.cpp" bodystart="5033" bodyend="5036"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1a881ca205605bae9c034733b808f93a02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
        <definition>QCPLayoutElement * QCPLayoutInset::elementAt</definition>
        <argsstring>(int index) const Q_DECL_OVERRIDE</argsstring>
        <name>elementAt</name>
        <qualifiedname>QCPLayoutInset::elementAt</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1ab22bd9153d855a35ab4010267ae36a69">elementAt</reimplements>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the element in the cell with the given <emphasis>index</emphasis>. If <emphasis>index</emphasis> is invalid, returns <computeroutput>nullptr</computeroutput>.</para>
<para>Note that even if <emphasis>index</emphasis> is valid, the respective cell may be empty in some layouts (e.g. <ref refid="class_q_c_p_layout_grid" kindref="compound">QCPLayoutGrid</ref>), so this function may return <computeroutput>nullptr</computeroutput> in those cases. You may use this function to check whether a cell is empty or not.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_1aca129722c019f91d3367046f80abfa77" kindref="member">elements</ref>, <ref refid="class_q_c_p_layout_inset_1a7f5aa4d48a2e844cfe6dd7ed8f0861df" kindref="member">elementCount</ref>, <ref refid="class_q_c_p_layout_inset_1abf2e8233f5b7051220907e62ded490a2" kindref="member">takeAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1465" column="28" bodyfile="qcustomplot.cpp" bodystart="5039" bodyend="5045"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1abf2e8233f5b7051220907e62ded490a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
        <definition>QCPLayoutElement * QCPLayoutInset::takeAt</definition>
        <argsstring>(int index) Q_DECL_OVERRIDE</argsstring>
        <name>takeAt</name>
        <qualifiedname>QCPLayoutInset::takeAt</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1aae3fc1bd5656aa737f18f0779789fd79">takeAt</reimplements>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the element with the given <emphasis>index</emphasis> from the layout and returns it.</para>
<para>If the <emphasis>index</emphasis> is invalid or the cell with that index is empty, returns <computeroutput>nullptr</computeroutput>.</para>
<para>Note that some layouts don&apos;t remove the respective cell right away but leave an empty cell after successful removal of the layout element. To collapse empty cells, use <ref refid="class_q_c_p_layout_inset_1abdac9a04752751ea68c320016086a2e8" kindref="member">simplify</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_inset_1a881ca205605bae9c034733b808f93a02" kindref="member">elementAt</ref>, <ref refid="class_q_c_p_layout_inset_1af7f13cc369f8190b5e7e17d5f39dfe1c" kindref="member">take</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1466" column="28" bodyfile="qcustomplot.cpp" bodystart="5048" bodyend="5063"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1af7f13cc369f8190b5e7e17d5f39dfe1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QCPLayoutInset::take</definition>
        <argsstring>(QCPLayoutElement *element) Q_DECL_OVERRIDE</argsstring>
        <name>take</name>
        <qualifiedname>QCPLayoutInset::take</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1ad110be0de976cd8a817513a4a53d53db">take</reimplements>
        <param>
          <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the specified <emphasis>element</emphasis> from the layout and returns true on success.</para>
<para>If the <emphasis>element</emphasis> isn&apos;t in this layout, returns false.</para>
<para>Note that some layouts don&apos;t remove the respective cell right away but leave an empty cell after successful removal of the layout element. To collapse empty cells, use <ref refid="class_q_c_p_layout_inset_1abdac9a04752751ea68c320016086a2e8" kindref="member">simplify</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_inset_1abf2e8233f5b7051220907e62ded490a2" kindref="member">takeAt</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1467" column="16" bodyfile="qcustomplot.cpp" bodystart="5066" bodyend="5082"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1abdac9a04752751ea68c320016086a2e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void QCPLayoutInset::simplify</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>simplify</name>
        <qualifiedname>QCPLayoutInset::simplify</qualifiedname>
        <reimplements refid="class_q_c_p_layout_1a41e6ac049143866e8f8b4964efab01b2">simplify</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The QCPInsetLayout does not need simplification since it can never have empty cells due to its linear index structure. This method does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1468" column="16" bodyfile="qcustomplot.h" bodystart="1468" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1a1569969c3e7e92f64ea13d46616e5a8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double QCPLayoutInset::selectTest</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable, QVariant *details=nullptr) const Q_DECL_OVERRIDE</argsstring>
        <name>selectTest</name>
        <qualifiedname>QCPLayoutInset::selectTest</qualifiedname>
        <reimplements refid="class_q_c_p_layout_element_1a62d60f1b0ee9bb23e38811d71586d79c">selectTest</reimplements>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <param>
          <type>QVariant *</type>
          <declname>details</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The inset layout is sensitive to events only at areas where its (visible) child elements are sensitive. If the selectTest method of any of the child elements returns a positive number for <emphasis>pos</emphasis>, this method returns a value corresponding to 0.99 times the parent plot&apos;s selection tolerance. The inset layout is not selectable itself by default. So if <emphasis>onlySelectable</emphasis> is true, -1.0 is returned.</para>
<para>See <ref refid="class_q_c_p_layerable_1a272989087fc8c4357b4ba614f9922336" kindref="member">QCPLayerable::selectTest</ref> for a general explanation of this virtual method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1469" column="18" bodyfile="qcustomplot.cpp" bodystart="5093" bodyend="5107"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1ad61529eb576af7f04dff94abb10c745a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutInset::addElement</definition>
        <argsstring>(QCPLayoutElement *element, Qt::Alignment alignment)</argsstring>
        <name>addElement</name>
        <qualifiedname>QCPLayoutInset::addElement</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>element</declname>
        </param>
        <param>
          <type>Qt::Alignment</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the specified <emphasis>element</emphasis> to the layout as an inset aligned at the border (<ref refid="class_q_c_p_layout_inset_1a62882a4f9ad58bb0f53da12fde022abe" kindref="member">setInsetAlignment</ref> is initialized with <ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa81e7df4a785ddee2229a8f47c46e817" kindref="member">ipBorderAligned</ref>). The alignment is set to <emphasis>alignment</emphasis>.</para>
<para><emphasis>alignment</emphasis> is an or combination of the following alignment flags: Qt::AlignLeft, Qt::AlignHCenter, Qt::AlighRight, Qt::AlignTop, Qt::AlignVCenter, Qt::AlignBottom. Any other alignment flags will be ignored.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_inset_1a8ff61fbee4a1f0ff45c398009d9f1e56" kindref="member">addElement(QCPLayoutElement *element, const QRectF &amp;rect)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1472" column="8" bodyfile="qcustomplot.cpp" bodystart="5120" bodyend="5133"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_layout_inset_1a8ff61fbee4a1f0ff45c398009d9f1e56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPLayoutInset::addElement</definition>
        <argsstring>(QCPLayoutElement *element, const QRectF &amp;rect)</argsstring>
        <name>addElement</name>
        <qualifiedname>QCPLayoutInset::addElement</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_layout_element" kindref="compound">QCPLayoutElement</ref> *</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the specified <emphasis>element</emphasis> to the layout as an inset with free positioning/sizing (<ref refid="class_q_c_p_layout_inset_1a62882a4f9ad58bb0f53da12fde022abe" kindref="member">setInsetAlignment</ref> is initialized with <ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa4802986ea2cea457f932b115acba59e" kindref="member">ipFree</ref>). The position and size is set to <emphasis>rect</emphasis>.</para>
<para><emphasis>rect</emphasis> is given in fractions of the whole inset layout rect. So an inset with rect (0, 0, 1, 1) will span the entire layout. An inset with rect (0.6, 0.1, 0.35, 0.35) will be in the top right corner of the layout, with 35% width and height of the parent layout.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_layout_inset_1ad61529eb576af7f04dff94abb10c745a" kindref="member">addElement(QCPLayoutElement *element, Qt::Alignment alignment)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1473" column="8" bodyfile="qcustomplot.cpp" bodystart="5146" bodyend="5159"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A layout that places child elements aligned to the border or arbitrarily positioned. </para>
    </briefdescription>
    <detaileddescription>
<para>Elements are placed either aligned to the border or at arbitrary position in the area of the layout. Which placement applies is controlled with the <ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192" kindref="member">InsetPlacement</ref> (<ref refid="class_q_c_p_layout_inset_1a63298830744d5d8c5345511c00fd2144" kindref="member">setInsetPlacement</ref>).</para>
<para>Elements are added via <ref refid="class_q_c_p_layout_inset_1ad61529eb576af7f04dff94abb10c745a" kindref="member">addElement(QCPLayoutElement *element, Qt::Alignment alignment)</ref> or <ref refid="class_q_c_p_layout_inset_1a8ff61fbee4a1f0ff45c398009d9f1e56" kindref="member">addElement(QCPLayoutElement *element, const QRectF &amp;rect)</ref>. If the first method is used, the inset placement will default to <ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa81e7df4a785ddee2229a8f47c46e817" kindref="member">ipBorderAligned</ref> and the element will be aligned according to the <emphasis>alignment</emphasis> parameter. The second method defaults to <ref refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa4802986ea2cea457f932b115acba59e" kindref="member">ipFree</ref> and allows placing elements at arbitrary position and size, defined by <emphasis>rect</emphasis>.</para>
<para>The alignment or rect can be set via <ref refid="class_q_c_p_layout_inset_1a62882a4f9ad58bb0f53da12fde022abe" kindref="member">setInsetAlignment</ref> or <ref refid="class_q_c_p_layout_inset_1aa487c8378a6f9533567a2e6430099dc3" kindref="member">setInsetRect</ref>, respectively.</para>
<para>This is the layout that every <ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> has as <ref refid="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10" kindref="member">QCPAxisRect::insetLayout</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="13" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="10">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="17">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QObject</label>
      </node>
      <node id="7">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="1437" column="1" bodyfile="qcustomplot.h" bodystart="1438" bodyend="1484"/>
    <listofallmembers>
      <member refid="class_q_c_p_layout_inset_1ad61529eb576af7f04dff94abb10c745a" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>addElement</name></member>
      <member refid="class_q_c_p_layout_inset_1a8ff61fbee4a1f0ff45c398009d9f1e56" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>addElement</name></member>
      <member refid="class_q_c_p_layout_1af6dbbc24156a808da29cd1ec031729a3" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>adoptElement</name></member>
      <member refid="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>antialiased</name></member>
      <member refid="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>applyAntialiasingHint</name></member>
      <member refid="class_q_c_p_layout_element_1a0a8f18141bcf46cf40ad4c13324ff346" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>applyDefaultAntialiasingHint</name></member>
      <member refid="class_q_c_p_layout_element_1a2585bc8c5cc70ee712909751a2fc8909" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>autoMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a005c9f0fe84bc1591a2cf2c46fd477b4" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>calculateAutoMargin</name></member>
      <member refid="class_q_c_p_layout_1a02883bdf2769b5b227f0232dba1ac4ee" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>clear</name></member>
      <member refid="class_q_c_p_layerable_1acbcfc9ecc75433747b1978a77b1864b3" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>clipRect</name></member>
      <member refid="class_q_c_p_layerable_1ae546370644a5551c76af739afc008bee" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>deselectEvent</name></member>
      <member refid="class_q_c_p_layout_element_1ad1c597b1d608cfdd86e7b76819a94cfb" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>draw</name></member>
      <member refid="class_q_c_p_layout_inset_1a881ca205605bae9c034733b808f93a02" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>elementAt</name></member>
      <member refid="class_q_c_p_layout_inset_1a7f5aa4d48a2e844cfe6dd7ed8f0861df" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>elementCount</name></member>
      <member refid="class_q_c_p_layout_1aca129722c019f91d3367046f80abfa77" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>elements</name></member>
      <member refid="class_q_c_p_layout_1add49fd6843821a6126914b837ed52e22" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>getFinalMaximumOuterSize</name></member>
      <member refid="class_q_c_p_layout_1a864fddc84721f186663faf3683f1fa70" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>getFinalMinimumOuterSize</name></member>
      <member refid="class_q_c_p_layout_1a3e77be8006d39f2aafc1313d6e8fc3fd" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>getSectionSizes</name></member>
      <member refid="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>initializeParentPlot</name></member>
      <member refid="class_q_c_p_layout_inset_1a5b33b66f0abbb4a7cc2f8aa6c94cf7f8" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>insetAlignment</name></member>
      <member refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>InsetPlacement</name></member>
      <member refid="class_q_c_p_layout_inset_1a6fcbd74ebbc45bfe64c604b2791aa57f" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>insetPlacement</name></member>
      <member refid="class_q_c_p_layout_inset_1ab23099a46af17c31f4c40668f13c9de1" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>insetRect</name></member>
      <member refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa81e7df4a785ddee2229a8f47c46e817" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>ipBorderAligned</name></member>
      <member refid="class_q_c_p_layout_inset_1a8b9e17d9a2768293d2a7d72f5e298192aa4802986ea2cea457f932b115acba59e" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>ipFree</name></member>
      <member refid="class_q_c_p_layerable_1a9d4e121a7f1d2314f906fe698209cac9" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>layer</name></member>
      <member refid="class_q_c_p_layerable_1abbf8657cedea73ac1c3499b521c90eba" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>layerChanged</name></member>
      <member refid="class_q_c_p_layout_element_1a4efdcbde9d28f410e5ef166c9d691deb" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>layout</name></member>
      <member refid="class_q_c_p_layout_element_1a765f041a73af0c2de41b41a5a03e31a4" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>layoutChanged</name></member>
      <member refid="class_q_c_p_layerable_1a3ab45a4c76a3333ce42eb217a81733ec" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mAntialiased</name></member>
      <member refid="class_q_c_p_layout_element_1aa5513622910f31d9309f87886bee597a" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>marginGroup</name></member>
      <member refid="class_q_c_p_layout_element_1acdd2c6b2ffb1c712e3bb3014fdec2e1b" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>marginGroups</name></member>
      <member refid="class_q_c_p_layout_element_1af4ac9450aa2d60863bf3a8ea0c940c9d" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>margins</name></member>
      <member refid="class_q_c_p_layout_element_1af61c70354d1275778d68206b2a1b2d36" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mAutoMargins</name></member>
      <member refid="class_q_c_p_layout_element_1ad96efb977a26e360e8a64a4c1e56456d" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>maximumOuterSizeHint</name></member>
      <member refid="class_q_c_p_layout_element_1afb9503858d4aa0f3b9f1794b084fb40a" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>maximumSize</name></member>
      <member refid="class_q_c_p_layout_inset_1a8fff7eae9a1be9a5c1e544fb379f682f" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mElements</name></member>
      <member refid="class_q_c_p_layout_element_1a5eae30e28f28d73fd1c56409c011393e" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>minimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a46789036c4fcb190fa374f91321d7c09" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>minimumOuterSizeHint</name></member>
      <member refid="class_q_c_p_layout_element_1a60d4295468a2b57fe91f6f68e20c3993" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>minimumSize</name></member>
      <member refid="class_q_c_p_layout_inset_1a55e9b84c310136ff985a6544184ab64a" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mInsetAlignment</name></member>
      <member refid="class_q_c_p_layout_inset_1a57a0a4e445cc78eada29765ecf092abe" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mInsetPlacement</name></member>
      <member refid="class_q_c_p_layout_inset_1aaa8f6b5029458f3d97a65239524a2b33" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mInsetRect</name></member>
      <member refid="class_q_c_p_layerable_1aa38ec5891aff0f50b36fd63e9372a0cd" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mLayer</name></member>
      <member refid="class_q_c_p_layout_element_1aeafbbc1130e02eee663c5326761fc963" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mMarginGroups</name></member>
      <member refid="class_q_c_p_layout_element_1ac2a32b99ee527ca5dfff9da03628fe94" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a64a387973fd4addac842028c89088998" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a5ba71f25d1af4bb092b28df618538e63" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mMinimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1affef747c81632de33f08483b7fd10d01" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mMinimumSize</name></member>
      <member refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>mouseDoubleClickEvent</name></member>
      <member refid="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>mouseMoveEvent</name></member>
      <member refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>mousePressEvent</name></member>
      <member refid="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>mouseReleaseEvent</name></member>
      <member refid="class_q_c_p_layout_element_1a07bb4973379e75cb0fa5b032c1d24afd" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>moveToLayer</name></member>
      <member refid="class_q_c_p_layerable_1a3291445a980053e2d17a21d15957624e" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mParentLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1ae7c75c25549608bd688bdb65d4c38066" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mParentLayout</name></member>
      <member refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_layout_element_1ad8896f05550389f7b9e92c9e6cdf6e01" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mRect</name></member>
      <member refid="class_q_c_p_layout_element_1acc012635b1ae178ff3c4da8a3af303a2" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mSizeConstraintRect</name></member>
      <member refid="class_q_c_p_layerable_1a62e3aed8427d6ce3ccf716f285106cb3" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>outerRect</name></member>
      <member refid="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>parentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1a36ed5b292b90934b524a4e5866a3526c" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layout_element_1ab4bb5c5a958451f5f153fdce350f13cf" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>parentPlotInitialized</name></member>
      <member refid="class_q_c_p_layerable_1a4f87f420cb2597e2b393aab934d2f099" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_layout_1a04222e6e1361fd802d48f1a25b7020d4" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>QCPLayout</name></member>
      <member refid="class_q_c_p_layout_element_1a2c25c7bf27eaa1fad66807af855d8d81" prot="public" virt="non-virtual" ambiguityscope="QCPLayout::QCPLayoutElement::"><scope>QCPLayoutInset</scope><name>QCPLayoutElement</name></member>
      <member refid="class_q_c_p_layout_inset_1a3ad984f3221735374cc5dee14356a7dd" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>QCPLayoutInset</name></member>
      <member refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>realVisibility</name></member>
      <member refid="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>rect</name></member>
      <member refid="class_q_c_p_layout_1a4afbb4bef0071f72f91afdac4433a18e" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>releaseElement</name></member>
      <member refid="class_q_c_p_layout_1a6c58f537d8086f352576ab7c5b15d0bc" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>remove</name></member>
      <member refid="class_q_c_p_layout_1a2403f684fee3ce47132faaeed00bb066" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>removeAt</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aa7fa7e25cd23758b9915c64ed9f1be26c" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>scrInnerRect</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aabe2745b41a6131ed194e13591b08e04d" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>scrOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1a7498c2d0d081cf7cad0fb3bb93aa0e91" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>selectEvent</name></member>
      <member refid="class_q_c_p_layerable_1a908c9edda761886f33893be326dab77d" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>selectionCategory</name></member>
      <member refid="class_q_c_p_layout_inset_1a1569969c3e7e92f64ea13d46616e5a8a" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>selectTest</name></member>
      <member refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setAntialiased</name></member>
      <member refid="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setAutoMargins</name></member>
      <member refid="class_q_c_p_layout_inset_1a62882a4f9ad58bb0f53da12fde022abe" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setInsetAlignment</name></member>
      <member refid="class_q_c_p_layout_inset_1a63298830744d5d8c5345511c00fd2144" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setInsetPlacement</name></member>
      <member refid="class_q_c_p_layout_inset_1aa487c8378a6f9533567a2e6430099dc3" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setInsetRect</name></member>
      <member refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layout_element_1a516e56f76b6bc100e8e71d329866847d" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setMarginGroup</name></member>
      <member refid="class_q_c_p_layout_element_1a8f450b1f3f992ad576fce2c63d8b79cf" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a03e0e9c48f230217c529b0819f832d84" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setMaximumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a0a8a17abc16b7923159fcc7608f94673" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setMinimumMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setMinimumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a8e0447614a0bf92de9a7304588c6b96e" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setMinimumSize</name></member>
      <member refid="class_q_c_p_layout_element_1a38975ea13e36de8e53391ce41d94bc0f" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setOuterRect</name></member>
      <member refid="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setParentLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setSizeConstraintRect</name></member>
      <member refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_layout_inset_1abdac9a04752751ea68c320016086a2e8" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>simplify</name></member>
      <member refid="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2a" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>SizeConstraintRect</name></member>
      <member refid="class_q_c_p_layout_element_1a66136f121ee3e1c933b748761203cab4" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>sizeConstraintRect</name></member>
      <member refid="class_q_c_p_layout_1aeac66a292f65cf7f8adf94eb92345b3e" prot="protected" virt="non-virtual"><scope>QCPLayoutInset</scope><name>sizeConstraintsChanged</name></member>
      <member refid="class_q_c_p_layout_inset_1af7f13cc369f8190b5e7e17d5f39dfe1c" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>take</name></member>
      <member refid="class_q_c_p_layout_inset_1abf2e8233f5b7051220907e62ded490a2" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>takeAt</name></member>
      <member refid="class_q_c_p_layout_1a48ecc9c98ea90b547c3e27a931a8f7bd" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>update</name></member>
      <member refid="class_q_c_p_layout_inset_1a493526b922ea66a75c45ef1842446988" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>updateLayout</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>UpdatePhase</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da5d1ccf5d79967c232c3c511796860045" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>upLayout</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da288cb59a92280e47261a341f2813e676" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>upMargins</name></member>
      <member refid="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374dad6119882eba136357c2f627992e527d3" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>upPreparation</name></member>
      <member refid="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70" prot="public" virt="non-virtual"><scope>QCPLayoutInset</scope><name>visible</name></member>
      <member refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022" prot="protected" virt="virtual"><scope>QCPLayoutInset</scope><name>wheelEvent</name></member>
      <member refid="class_q_c_p_layerable_1a4231cf5b3601d6d3a5781283e7a9735b" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>~QCPLayerable</name></member>
      <member refid="class_q_c_p_layout_element_1a2fa26d3d22a2854c4da1d80f188db961" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>~QCPLayoutElement</name></member>
      <member refid="class_q_c_p_layout_inset_1a3726b9068ad31556ab60b714b5d0f9d3" prot="public" virt="virtual"><scope>QCPLayoutInset</scope><name>~QCPLayoutInset</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
