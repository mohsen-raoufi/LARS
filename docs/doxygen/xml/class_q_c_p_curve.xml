<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_curve" kind="class" language="C++" prot="public">
    <compoundname>QCPCurve</compoundname>
    <basecompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPCurveData &gt;</basecompoundref>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1" prot="public" static="no" strong="no">
        <type></type>
        <name>LineStyle</name>
        <qualifiedname>QCPCurve::LineStyle</qualifiedname>
        <enumvalue id="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1aec1601a191cdf0b4e761c4c66092cc48" prot="public">
          <name>lsNone</name>
          <briefdescription>
<para>No line is drawn between data points (e.g. only scatters) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1ade5822ce6fbf131d3df131795c2e1003" prot="public">
          <name>lsLine</name>
          <briefdescription>
<para>Data points are connected with a straight line. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines how the curve&apos;s line is represented visually in the plot. The line is drawn with the current pen of the curve (<ref refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" kindref="member">setPen</ref>). <simplesect kind="see"><para><ref refid="class_q_c_p_curve_1a4a377ec863ff81a1875c3094a6177c19" kindref="member">setLineStyle</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5611" column="3" bodyfile="qcustomplot.h" bodystart="5611" bodyend="5613"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_curve_1a08f803b4a30b01bbd7a1eab15d0f864f" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_scatter_style" kindref="compound">QCPScatterStyle</ref></type>
        <definition>QCPScatterStyle QCPCurve::mScatterStyle</definition>
        <argsstring></argsstring>
        <name>mScatterStyle</name>
        <qualifiedname>QCPCurve::mScatterStyle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5646" column="19" bodyfile="qcustomplot.h" bodystart="5646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_curve_1a990bd5fdeb474459f3f6f5ad0a7b945c" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int QCPCurve::mScatterSkip</definition>
        <argsstring></argsstring>
        <name>mScatterSkip</name>
        <qualifiedname>QCPCurve::mScatterSkip</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5647" column="7" bodyfile="qcustomplot.h" bodystart="5647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_curve_1ae1f35ae2b15aee8e15bcdfec5be95156" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1" kindref="member">LineStyle</ref></type>
        <definition>LineStyle QCPCurve::mLineStyle</definition>
        <argsstring></argsstring>
        <name>mLineStyle</name>
        <qualifiedname>QCPCurve::mLineStyle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5648" column="13" bodyfile="qcustomplot.h" bodystart="5648" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_c_p_curve_1a1cdf9df76adcfae45261690aa0ca2198" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCustomPlot</definition>
        <argsstring></argsstring>
        <name>QCustomPlot</name>
        <qualifiedname>QCPCurve::QCustomPlot</qualifiedname>
        <param>
          <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5669" column="16" bodyfile="qcustomplot.h" bodystart="5669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_curve_1a8429035e7adfbd7f05805a6530ad5e3b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPLegend</definition>
        <argsstring></argsstring>
        <name>QCPLegend</name>
        <qualifiedname>QCPCurve::QCPLegend</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5670" column="16" bodyfile="qcustomplot.h" bodystart="5670" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_curve_1a36de58e2652b3fa47bdf9187d421d3ce" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPCurve::QCPCurve</definition>
        <argsstring>(QCPAxis *keyAxis, QCPAxis *valueAxis)</argsstring>
        <name>QCPCurve</name>
        <qualifiedname>QCPCurve::QCPCurve</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>keyAxis</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>valueAxis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a curve which uses <emphasis>keyAxis</emphasis> as its key axis (&quot;x&quot;) and <emphasis>valueAxis</emphasis> as its value axis (&quot;y&quot;). <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> must reside in the same <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance and not have the same orientation. If either of these restrictions is violated, a corresponding message is printed to the debug output (qDebug), the construction is not aborted, though.</para>
<para>The created <ref refid="class_q_c_p_curve" kindref="compound">QCPCurve</ref> is automatically registered with the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance inferred from <emphasis>keyAxis</emphasis>. This <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance takes ownership of the <ref refid="class_q_c_p_curve" kindref="compound">QCPCurve</ref>, so do not delete it manually but use <ref refid="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2" kindref="member">QCustomPlot::removePlottable()</ref> instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5616" column="12" bodyfile="qcustomplot.cpp" bodystart="22618" bodyend="22630"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a603d56afa3165e8fff3ef945997527f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPCurve::~QCPCurve</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>~QCPCurve</name>
        <qualifiedname>QCPCurve::~QCPCurve</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5617" column="11" bodyfile="qcustomplot.cpp" bodystart="22632" bodyend="22634"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QSharedPointer&lt; <ref refid="class_q_c_p_data_container" kindref="compound">QCPCurveDataContainer</ref> &gt;</type>
        <definition>QSharedPointer&lt; QCPCurveDataContainer &gt; QCPCurve::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <qualifiedname>QCPCurve::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a shared pointer to the internal data storage of type QCPCurveDataContainer. You may use it to directly manipulate the data, which may be more convenient and faster than using the regular <ref refid="class_q_c_p_curve_1a41246850d2e080bc57183ca19cd4135e" kindref="member">setData</ref> or <ref refid="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f" kindref="member">addData</ref> methods. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5620" column="18" bodyfile="qcustomplot.h" bodystart="5620" bodyend="5620"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1afa6bd72a3a331a5ed45d3e0c5843b592" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_scatter_style" kindref="compound">QCPScatterStyle</ref></type>
        <definition>QCPScatterStyle QCPCurve::scatterStyle</definition>
        <argsstring>() const</argsstring>
        <name>scatterStyle</name>
        <qualifiedname>QCPCurve::scatterStyle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5621" column="19" bodyfile="qcustomplot.h" bodystart="5621" bodyend="5621"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a09b33217172aedf6c62c441b4ff66166" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int QCPCurve::scatterSkip</definition>
        <argsstring>() const</argsstring>
        <name>scatterSkip</name>
        <qualifiedname>QCPCurve::scatterSkip</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5622" column="7" bodyfile="qcustomplot.h" bodystart="5622" bodyend="5622"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a06e3cf3f8f1add689254b3cda66e040e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1" kindref="member">LineStyle</ref></type>
        <definition>LineStyle QCPCurve::lineStyle</definition>
        <argsstring>() const</argsstring>
        <name>lineStyle</name>
        <qualifiedname>QCPCurve::lineStyle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5623" column="13" bodyfile="qcustomplot.h" bodystart="5623" bodyend="5623"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a41246850d2e080bc57183ca19cd4135e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::setData</definition>
        <argsstring>(QSharedPointer&lt; QCPCurveDataContainer &gt; data)</argsstring>
        <name>setData</name>
        <qualifiedname>QCPCurve::setData</qualifiedname>
        <param>
          <type>QSharedPointer&lt; <ref refid="class_q_c_p_data_container" kindref="compound">QCPCurveDataContainer</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Replaces the current data container with the provided <emphasis>data</emphasis> container.</para>
<para>Since a QSharedPointer is used, multiple QCPCurves may share the same data container safely. Modifying the data in the container will then affect all curves that share the container. Sharing can be achieved by simply exchanging the data containers wrapped in shared pointers: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting></para>
<para>If you do not wish to share containers, but create a copy from an existing container, rather use the <ref refid="class_q_c_p_data_container_1ae7042bd534fc3ce7befa2ce3f790b5bf" kindref="member">QCPDataContainer&lt;DataType&gt;::set</ref> method on the curve&apos;s data container directly: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting></para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f" kindref="member">addData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5626" column="8" bodyfile="qcustomplot.cpp" bodystart="22651" bodyend="22654"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a0768af2c33c8dcffa3cf5bdeb53923a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::setData</definition>
        <argsstring>(const QVector&lt; double &gt; &amp;t, const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;values, bool alreadySorted=false)</argsstring>
        <name>setData</name>
        <qualifiedname>QCPCurve::setData</qualifiedname>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alreadySorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Replaces the current data with the provided points in <emphasis>t</emphasis>, <emphasis>keys</emphasis> and <emphasis>values</emphasis>. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>
<para>If you can guarantee that the passed data points are sorted by <emphasis>t</emphasis> in ascending order, you can set <emphasis>alreadySorted</emphasis> to true, to improve performance by saving a sorting run.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f" kindref="member">addData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5627" column="8" bodyfile="qcustomplot.cpp" bodystart="22667" bodyend="22671"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a9d3245d43304226e013240c94802f7f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::setData</definition>
        <argsstring>(const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;values)</argsstring>
        <name>setData</name>
        <qualifiedname>QCPCurve::setData</qualifiedname>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Replaces the current data with the provided points in <emphasis>keys</emphasis> and <emphasis>values</emphasis>. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>
<para>The t parameter of each data point will be set to the integer index of the respective key/value pair.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f" kindref="member">addData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5628" column="8" bodyfile="qcustomplot.cpp" bodystart="22685" bodyend="22689"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a55e43b44709bf50a35500644988aa706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::setScatterStyle</definition>
        <argsstring>(const QCPScatterStyle &amp;style)</argsstring>
        <name>setScatterStyle</name>
        <qualifiedname>QCPCurve::setScatterStyle</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_scatter_style" kindref="compound">QCPScatterStyle</ref> &amp;</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the visual appearance of single data points in the plot. If set to <ref refid="class_q_c_p_scatter_style_1adb31525af6b680e6f1b7472e43859349abd144c291ca274f77053ec68cab6c022" kindref="member">QCPScatterStyle::ssNone</ref>, no scatter points are drawn (e.g. for line-only plots with appropriate line style).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_scatter_style" kindref="compound">QCPScatterStyle</ref>, <ref refid="class_q_c_p_curve_1a4a377ec863ff81a1875c3094a6177c19" kindref="member">setLineStyle</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5629" column="8" bodyfile="qcustomplot.cpp" bodystart="22698" bodyend="22701"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a97dbfecd497e972d5f2162615e6da5be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::setScatterSkip</definition>
        <argsstring>(int skip)</argsstring>
        <name>setScatterSkip</name>
        <qualifiedname>QCPCurve::setScatterSkip</qualifiedname>
        <param>
          <type>int</type>
          <declname>skip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If scatters are displayed (scatter style not <ref refid="class_q_c_p_scatter_style_1adb31525af6b680e6f1b7472e43859349abd144c291ca274f77053ec68cab6c022" kindref="member">QCPScatterStyle::ssNone</ref>), <emphasis>skip</emphasis> number of scatter points are skipped/not drawn after every drawn scatter point.</para>
<para>This can be used to make the data appear sparser while for example still having a smooth line, and to improve performance for very high density plots.</para>
<para>If <emphasis>skip</emphasis> is set to 0 (default), all scatter points are drawn.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_curve_1a55e43b44709bf50a35500644988aa706" kindref="member">setScatterStyle</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5630" column="8" bodyfile="qcustomplot.cpp" bodystart="22714" bodyend="22717"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a4a377ec863ff81a1875c3094a6177c19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::setLineStyle</definition>
        <argsstring>(LineStyle style)</argsstring>
        <name>setLineStyle</name>
        <qualifiedname>QCPCurve::setLineStyle</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1" kindref="member">LineStyle</ref></type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets how the single data points are connected in the plot or how they are represented visually apart from the scatter symbol. For scatter-only plots, set <emphasis>style</emphasis> to <ref refid="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1aec1601a191cdf0b4e761c4c66092cc48" kindref="member">lsNone</ref> and <ref refid="class_q_c_p_curve_1a55e43b44709bf50a35500644988aa706" kindref="member">setScatterStyle</ref> to the desired scatter style.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_curve_1a55e43b44709bf50a35500644988aa706" kindref="member">setScatterStyle</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5631" column="8" bodyfile="qcustomplot.cpp" bodystart="22726" bodyend="22729"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::addData</definition>
        <argsstring>(const QVector&lt; double &gt; &amp;t, const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;values, bool alreadySorted=false)</argsstring>
        <name>addData</name>
        <qualifiedname>QCPCurve::addData</qualifiedname>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alreadySorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds the provided points in <emphasis>t</emphasis>, <emphasis>keys</emphasis> and <emphasis>values</emphasis> to the current data. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>
<para>If you can guarantee that the passed data points are sorted by <emphasis>keys</emphasis> in ascending order, you can set <emphasis>alreadySorted</emphasis> to true, to improve performance by saving a sorting run.</para>
<para>Alternatively, you can also access and modify the data directly via the <ref refid="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60" kindref="member">data</ref> method, which returns a pointer to the internal data container. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5634" column="8" bodyfile="qcustomplot.cpp" bodystart="22743" bodyend="22761"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a6424fa06da1786648c83ad13a0d0aa14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::addData</definition>
        <argsstring>(const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;values)</argsstring>
        <name>addData</name>
        <qualifiedname>QCPCurve::addData</qualifiedname>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds the provided points in <emphasis>keys</emphasis> and <emphasis>values</emphasis> to the current data. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>
<para>The t parameter of each data point will be set to the integer index of the respective key/value pair.</para>
<para>Alternatively, you can also access and modify the data directly via the <ref refid="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60" kindref="member">data</ref> method, which returns a pointer to the internal data container. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5635" column="8" bodyfile="qcustomplot.cpp" bodystart="22775" bodyend="22798"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a13398b236f6926014e404eeb5b9f415c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::addData</definition>
        <argsstring>(double t, double key, double value)</argsstring>
        <name>addData</name>
        <qualifiedname>QCPCurve::addData</qualifiedname>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Adds the provided data point as <emphasis>t</emphasis>, <emphasis>key</emphasis> and <emphasis>value</emphasis> to the current data.</para>
<para>Alternatively, you can also access and modify the data directly via the <ref refid="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60" kindref="member">data</ref> method, which returns a pointer to the internal data container. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5636" column="8" bodyfile="qcustomplot.cpp" bodystart="22806" bodyend="22809"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1ada4762e793cd5707b33f35b8a4b0f8fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::addData</definition>
        <argsstring>(double key, double value)</argsstring>
        <name>addData</name>
        <qualifiedname>QCPCurve::addData</qualifiedname>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds the provided data point as <emphasis>key</emphasis> and <emphasis>value</emphasis> to the current data.</para>
<para>The t parameter is generated automatically by increments of 1 for each point, starting at the highest t of previously existing data or 0, if the curve data is empty.</para>
<para>Alternatively, you can also access and modify the data directly via the <ref refid="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60" kindref="member">data</ref> method, which returns a pointer to the internal data container. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5637" column="8" bodyfile="qcustomplot.cpp" bodystart="22821" bodyend="22827"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a6717367381d420607fae5c98b4eba022" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double QCPCurve::selectTest</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable, QVariant *details=nullptr) const Q_DECL_OVERRIDE</argsstring>
        <name>selectTest</name>
        <qualifiedname>QCPCurve::selectTest</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable1_d_1a2f169c3c2989e5d08ec7a9e3eb56a261">selectTest</reimplements>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <param>
          <type>QVariant *</type>
          <declname>details</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implements a selectTest specific to this plottable&apos;s point geometry.</para>
<para>If <emphasis>details</emphasis> is not 0, it will be set to a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref>, describing the closest data point to <emphasis>pos</emphasis>.</para>
<para>\seebaseclassmethod <ref refid="class_q_c_p_abstract_plottable_1a8e4964b629802ce50e1427c7fb21d35b" kindref="member">QCPAbstractPlottable::selectTest</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5640" column="18" bodyfile="qcustomplot.cpp" bodystart="22837" bodyend="22856"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a22d09087f78f254731197cc0b8783299" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>QCPRange QCPCurve::getKeyRange</definition>
        <argsstring>(bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE</argsstring>
        <name>getKeyRange</name>
        <qualifiedname>QCPCurve::getKeyRange</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable_1a56b4d9000f4de0de86c566c84eb05a21">getKeyRange</reimplements>
        <param>
          <type>bool &amp;</type>
          <declname>foundRange</declname>
        </param>
        <param>
          <type><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9" kindref="member">QCP::SignDomain</ref></type>
          <declname>inSignDomain</declname>
          <defval><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the coordinate range that all data in this plottable span in the key axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> or <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f" kindref="member">QCP::sdPositive</ref> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>
<para>Note that <emphasis>foundRange</emphasis> is not the same as <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" kindref="member">rescaleAxes</ref>, <ref refid="class_q_c_p_curve_1a8bb8e3b9085f15921dc40483fb025ab2" kindref="member">getValueRange</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5641" column="20" bodyfile="qcustomplot.cpp" bodystart="22859" bodyend="22862"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a8bb8e3b9085f15921dc40483fb025ab2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>QCPRange QCPCurve::getValueRange</definition>
        <argsstring>(bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &amp;inKeyRange=QCPRange()) const Q_DECL_OVERRIDE</argsstring>
        <name>getValueRange</name>
        <qualifiedname>QCPCurve::getValueRange</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable_1aa81c95aec08d86cdd5407e48b83ab186">getValueRange</reimplements>
        <param>
          <type>bool &amp;</type>
          <declname>foundRange</declname>
        </param>
        <param>
          <type><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9" kindref="member">QCP::SignDomain</ref></type>
          <declname>inSignDomain</declname>
          <defval><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref></defval>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref> &amp;</type>
          <declname>inKeyRange</declname>
          <defval><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the coordinate range that the data points in the specified key range (<emphasis>inKeyRange</emphasis>) span in the value axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> or <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f" kindref="member">QCP::sdPositive</ref> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>
<para>If <emphasis>inKeyRange</emphasis> has both lower and upper bound set to zero (is equal to <computeroutput><ref refid="class_q_c_p_range" kindref="compound">QCPRange()</ref></computeroutput>), all data points are considered, without any restriction on the keys.</para>
<para>Note that <emphasis>foundRange</emphasis> is not the same as <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" kindref="member">rescaleAxes</ref>, <ref refid="class_q_c_p_curve_1a22d09087f78f254731197cc0b8783299" kindref="member">getKeyRange</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5642" column="20" bodyfile="qcustomplot.cpp" bodystart="22865" bodyend="22868"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_curve_1ac199d41d23865cd68bd7b598308a4433" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPCurve::draw</definition>
        <argsstring>(QCPPainter *painter) Q_DECL_OVERRIDE</argsstring>
        <name>draw</name>
        <qualifiedname>QCPCurve::draw</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable_1a453f676a5cee7bf846c5f0fa05ea84b3">draw</reimplements>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5651" column="16" bodyfile="qcustomplot.cpp" bodystart="22871" bodyend="22936"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1aac6e94afbce4002d2cd7793250154e84" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPCurve::drawLegendIcon</definition>
        <argsstring>(QCPPainter *painter, const QRectF &amp;rect) const Q_DECL_OVERRIDE</argsstring>
        <name>drawLegendIcon</name>
        <qualifiedname>QCPCurve::drawLegendIcon</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable_1a71c259f4f96533d12df152c446b17425">drawLegendIcon</reimplements>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5652" column="16" bodyfile="qcustomplot.cpp" bodystart="22939" bodyend="22971"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1aa4d7415f7c69eb7820263941f7d88e2c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPCurve::drawCurveLine</definition>
        <argsstring>(QCPPainter *painter, const QVector&lt; QPointF &gt; &amp;lines) const</argsstring>
        <name>drawCurveLine</name>
        <qualifiedname>QCPCurve::drawCurveLine</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <param>
          <type>const QVector&lt; QPointF &gt; &amp;</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5655" column="16" bodyfile="qcustomplot.cpp" bodystart="22979" bodyend="22986"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a0bea811373c5ee8c67c9c2b4d74ad866" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPCurve::drawScatterPlot</definition>
        <argsstring>(QCPPainter *painter, const QVector&lt; QPointF &gt; &amp;points, const QCPScatterStyle &amp;style) const</argsstring>
        <name>drawScatterPlot</name>
        <qualifiedname>QCPCurve::drawScatterPlot</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <param>
          <type>const QVector&lt; QPointF &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_scatter_style" kindref="compound">QCPScatterStyle</ref> &amp;</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5656" column="16" bodyfile="qcustomplot.cpp" bodystart="22995" bodyend="23003"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1aefca1e5127fae2d7ff65b9e921637c58" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::getCurveLines</definition>
        <argsstring>(QVector&lt; QPointF &gt; *lines, const QCPDataRange &amp;dataRange, double penWidth) const</argsstring>
        <name>getCurveLines</name>
        <qualifiedname>QCPCurve::getCurveLines</qualifiedname>
        <param>
          <type>QVector&lt; QPointF &gt; *</type>
          <declname>lines</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>dataRange</declname>
        </param>
        <param>
          <type>double</type>
          <declname>penWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5659" column="8" bodyfile="qcustomplot.cpp" bodystart="23033" bodyend="23114"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a564c5fdc8409e3532b1322389a8434b8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::getScatters</definition>
        <argsstring>(QVector&lt; QPointF &gt; *scatters, const QCPDataRange &amp;dataRange, double scatterWidth) const</argsstring>
        <name>getScatters</name>
        <qualifiedname>QCPCurve::getScatters</qualifiedname>
        <param>
          <type>QVector&lt; QPointF &gt; *</type>
          <declname>scatters</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &amp;</type>
          <declname>dataRange</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scatterWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5660" column="8" bodyfile="qcustomplot.cpp" bodystart="23136" bodyend="23213"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a77c89253397c4754b40d4bc8d3e789bf" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QCPCurve::getRegion</definition>
        <argsstring>(double key, double value, double keyMin, double valueMax, double keyMax, double valueMin) const</argsstring>
        <name>getRegion</name>
        <qualifiedname>QCPCurve::getRegion</qualifiedname>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keyMin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>valueMax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keyMax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>valueMin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5661" column="7" bodyfile="qcustomplot.cpp" bodystart="23234" bodyend="23261"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a708b0897ae9eb5e48ae12b683596f340" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF QCPCurve::getOptimizedPoint</definition>
        <argsstring>(int otherRegion, double otherKey, double otherValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin) const</argsstring>
        <name>getOptimizedPoint</name>
        <qualifiedname>QCPCurve::getOptimizedPoint</qualifiedname>
        <param>
          <type>int</type>
          <declname>otherRegion</declname>
        </param>
        <param>
          <type>double</type>
          <declname>otherKey</declname>
        </param>
        <param>
          <type>double</type>
          <declname>otherValue</declname>
        </param>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keyMin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>valueMax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keyMax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>valueMin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5662" column="11" bodyfile="qcustomplot.cpp" bodystart="23278" bodyend="23374"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a66bff7933dac149c4577ad63a27da924" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QVector&lt; QPointF &gt;</type>
        <definition>QVector&lt; QPointF &gt; QCPCurve::getOptimizedCornerPoints</definition>
        <argsstring>(int prevRegion, int currentRegion, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin) const</argsstring>
        <name>getOptimizedCornerPoints</name>
        <qualifiedname>QCPCurve::getOptimizedCornerPoints</qualifiedname>
        <param>
          <type>int</type>
          <declname>prevRegion</declname>
        </param>
        <param>
          <type>int</type>
          <declname>currentRegion</declname>
        </param>
        <param>
          <type>double</type>
          <declname>prevKey</declname>
        </param>
        <param>
          <type>double</type>
          <declname>prevValue</declname>
        </param>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keyMin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>valueMax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keyMax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>valueMin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5663" column="11" bodyfile="qcustomplot.cpp" bodystart="23394" bodyend="23544"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1af5df2560b30333fe662ec676bd355415" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPCurve::mayTraverse</definition>
        <argsstring>(int prevRegion, int currentRegion) const</argsstring>
        <name>mayTraverse</name>
        <qualifiedname>QCPCurve::mayTraverse</qualifiedname>
        <param>
          <type>int</type>
          <declname>prevRegion</declname>
        </param>
        <param>
          <type>int</type>
          <declname>currentRegion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5664" column="8" bodyfile="qcustomplot.cpp" bodystart="23558" bodyend="23645"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1afc5367ef0369d7a88ebba6eacf55f14f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPCurve::getTraverse</definition>
        <argsstring>(double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin, QPointF &amp;crossA, QPointF &amp;crossB) const</argsstring>
        <name>getTraverse</name>
        <qualifiedname>QCPCurve::getTraverse</qualifiedname>
        <param>
          <type>double</type>
          <declname>prevKey</declname>
        </param>
        <param>
          <type>double</type>
          <declname>prevValue</declname>
        </param>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keyMin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>valueMax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keyMax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>valueMin</declname>
        </param>
        <param>
          <type>QPointF &amp;</type>
          <declname>crossA</declname>
        </param>
        <param>
          <type>QPointF &amp;</type>
          <declname>crossB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5665" column="8" bodyfile="qcustomplot.cpp" bodystart="23661" bodyend="23747"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1a55e24387fd97a2cad0def8a40809e9ec" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPCurve::getTraverseCornerPoints</definition>
        <argsstring>(int prevRegion, int currentRegion, double keyMin, double valueMax, double keyMax, double valueMin, QVector&lt; QPointF &gt; &amp;beforeTraverse, QVector&lt; QPointF &gt; &amp;afterTraverse) const</argsstring>
        <name>getTraverseCornerPoints</name>
        <qualifiedname>QCPCurve::getTraverseCornerPoints</qualifiedname>
        <param>
          <type>int</type>
          <declname>prevRegion</declname>
        </param>
        <param>
          <type>int</type>
          <declname>currentRegion</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keyMin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>valueMax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keyMax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>valueMin</declname>
        </param>
        <param>
          <type>QVector&lt; QPointF &gt; &amp;</type>
          <declname>beforeTraverse</declname>
        </param>
        <param>
          <type>QVector&lt; QPointF &gt; &amp;</type>
          <declname>afterTraverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5666" column="8" bodyfile="qcustomplot.cpp" bodystart="23774" bodyend="23856"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_curve_1aa2c9c9c0e57f11f18a5cb7e47927157c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QCPCurve::pointDistance</definition>
        <argsstring>(const QPointF &amp;pixelPoint, QCPCurveDataContainer::const_iterator &amp;closestData) const</argsstring>
        <name>pointDistance</name>
        <qualifiedname>QCPCurve::pointDistance</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pixelPoint</declname>
        </param>
        <param>
          <type>QCPCurveDataContainer::const_iterator &amp;</type>
          <declname>closestData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5667" column="10" bodyfile="qcustomplot.cpp" bodystart="23870" bodyend="23914"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A plottable representing a parametric curve in a plot. </para>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="QCPCurve.png"></image>
</para>
<para>Unlike <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref>, plottables of this type may have multiple points with the same key coordinate, so their visual representation can have <emphasis>loops</emphasis>. This is realized by introducing a third coordinate <emphasis>t</emphasis>, which defines the order of the points described by the other two coordinates <emphasis>x</emphasis> and <emphasis>y</emphasis>.</para>
<para>To plot data, assign it with the <ref refid="class_q_c_p_curve_1a41246850d2e080bc57183ca19cd4135e" kindref="member">setData</ref> or <ref refid="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f" kindref="member">addData</ref> functions. Alternatively, you can also access and modify the curve&apos;s data via the <ref refid="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60" kindref="member">data</ref> method, which returns a pointer to the internal QCPCurveDataContainer.</para>
<para>Gaps in the curve can be created by adding data points with NaN as key and value (<computeroutput>qQNaN()</computeroutput> or <computeroutput>std::numeric_limits&lt;double&gt;::quiet_NaN()</computeroutput>) in between the two data points that shall be separated.</para>
<sect1 id="class_q_c_p_curve_1qcpcurve-appearance">
<title>Changing the appearance</title><para>The appearance of the curve is determined by the pen and the brush (<ref refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" kindref="member">setPen</ref>, <ref refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" kindref="member">setBrush</ref>).</para>
</sect1>
<sect1 id="class_q_c_p_curve_1qcpcurve-usage">
<title>Usage</title><para>Like all data representing objects in <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>, the <ref refid="class_q_c_p_curve" kindref="compound">QCPCurve</ref> is a plottable (<ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref>). So the plottable-interface of <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> applies (<ref refid="class_q_custom_plot_1a32de81ff53e263e785b83b52ecd99d6f" kindref="member">QCustomPlot::plottable</ref>, <ref refid="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2" kindref="member">QCustomPlot::removePlottable</ref>, etc.)</para>
<para>Usually, you first create an instance: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting> which registers it with the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance of the passed axes. Note that this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance takes ownership of the plottable, so do not delete it manually but use <ref refid="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2" kindref="member">QCustomPlot::removePlottable()</ref> instead. The newly created plottable can be modified, e.g.: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting> </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QCPAbstractPlottable</label>
        <link refid="class_q_c_p_abstract_plottable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPAbstractPlottable1D&lt; QCPCurveData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QCPCurve</label>
        <link refid="class_q_c_p_curve"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QCPPlottableInterface1D</label>
        <link refid="class_q_c_p_plottable_interface1_d"/>
      </node>
      <node id="5">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QCPAbstractPlottable</label>
        <link refid="class_q_c_p_abstract_plottable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>mSelection</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>mSelectionDecorator</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>QCPAbstractPlottable1D&lt; QCPCurveData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="16" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>QCPCurve</label>
        <link refid="class_q_c_p_curve"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>mScatterStyle</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>QCPDataSelection</label>
        <link refid="class_q_c_p_data_selection"/>
      </node>
      <node id="14">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="24">
        <label>QCPPlottableInterface1D</label>
        <link refid="class_q_c_p_plottable_interface1_d"/>
      </node>
      <node id="13">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="23">
        <label>QCPScatterStyle</label>
        <link refid="class_q_c_p_scatter_style"/>
      </node>
      <node id="22">
        <label>QCPSelectionDecorator</label>
        <link refid="class_q_c_p_selection_decorator"/>
        <childnode refid="23" relation="usage">
          <edgelabel>mScatterStyle</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mPlottable</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QObject</label>
      </node>
      <node id="7">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="5597" column="1" bodyfile="qcustomplot.h" bodystart="5598" bodyend="5671"/>
    <listofallmembers>
      <member refid="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>addData</name></member>
      <member refid="class_q_c_p_curve_1a6424fa06da1786648c83ad13a0d0aa14" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>addData</name></member>
      <member refid="class_q_c_p_curve_1a13398b236f6926014e404eeb5b9f415c" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>addData</name></member>
      <member refid="class_q_c_p_curve_1ada4762e793cd5707b33f35b8a4b0f8fb" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>addData</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa64e93cb5b606d8110d2cc0a349bb30f" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>addToLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a70f8cabfd808f7d5204b9f18c45c13f5" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>addToLegend</name></member>
      <member refid="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>antialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a022717896dc57b638a7b5a7be7212ba9" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>antialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a795370db6b1309de0ab60b633efb5ec2" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>antialiasedScatters</name></member>
      <member refid="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>applyAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac032077fb0db93d6faa3273d02363398" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>applyDefaultAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a8d06a59ea23324cce6330ebf2262c0ed" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>applyFillAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac95f26b15a1e5d9c7bd2c0a46d760fc9" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>applyScattersAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a893b4896dfd92b68b05b2600b80f5826" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>brush</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a635cee3effc07ad421414c76fd83548c" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>clipRect</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>coordsToPixels</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a5acb50ae984eef09a7ab92315d2ad708" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>coordsToPixels</name></member>
      <member refid="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>data</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ab5dd99e4f1621e7dbd63438e0b02984e" prot="public" virt="virtual"><scope>QCPCurve</scope><name>dataCount</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1aeb156ebf5d3c8de906b428be30733ad8" prot="public" virt="virtual"><scope>QCPCurve</scope><name>dataMainKey</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a6be0f657ba85a1688336d76ad649ecf2" prot="public" virt="virtual"><scope>QCPCurve</scope><name>dataMainValue</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a6ca0699a6af5f25a7565de7c50ce13b2" prot="public" virt="virtual"><scope>QCPCurve</scope><name>dataPixelPosition</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1aa8277da921b009bce474437d50b4a2d8" prot="public" virt="virtual"><scope>QCPCurve</scope><name>dataSortKey</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a55f937ba6a63e56e57f0b1a6e85a333a" prot="public" virt="virtual"><scope>QCPCurve</scope><name>dataValueRange</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a9b104d9da4f38f934363945c313bf82e" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>deselectEvent</name></member>
      <member refid="class_q_c_p_curve_1ac199d41d23865cd68bd7b598308a4433" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>draw</name></member>
      <member refid="class_q_c_p_curve_1aa4d7415f7c69eb7820263941f7d88e2c" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>drawCurveLine</name></member>
      <member refid="class_q_c_p_curve_1aac6e94afbce4002d2cd7793250154e84" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>drawLegendIcon</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a7adc6c3cccebb5341f11e0c2b7d54206" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>drawPolyline</name></member>
      <member refid="class_q_c_p_curve_1a0bea811373c5ee8c67c9c2b4d74ad866" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>drawScatterPlot</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6" prot="public" virt="virtual"><scope>QCPCurve</scope><name>findBegin</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a" prot="public" virt="virtual"><scope>QCPCurve</scope><name>findEnd</name></member>
      <member refid="class_q_c_p_curve_1aefca1e5127fae2d7ff65b9e921637c58" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>getCurveLines</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ae890e62ce403c54f575c73b9529f1af8" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>getDataSegments</name></member>
      <member refid="class_q_c_p_curve_1a22d09087f78f254731197cc0b8783299" prot="public" virt="virtual"><scope>QCPCurve</scope><name>getKeyRange</name></member>
      <member refid="class_q_c_p_curve_1a66bff7933dac149c4577ad63a27da924" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>getOptimizedCornerPoints</name></member>
      <member refid="class_q_c_p_curve_1a708b0897ae9eb5e48ae12b683596f340" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>getOptimizedPoint</name></member>
      <member refid="class_q_c_p_curve_1a77c89253397c4754b40d4bc8d3e789bf" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>getRegion</name></member>
      <member refid="class_q_c_p_curve_1a564c5fdc8409e3532b1322389a8434b8" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>getScatters</name></member>
      <member refid="class_q_c_p_curve_1afc5367ef0369d7a88ebba6eacf55f14f" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>getTraverse</name></member>
      <member refid="class_q_c_p_curve_1a55e24387fd97a2cad0def8a40809e9ec" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>getTraverseCornerPoints</name></member>
      <member refid="class_q_c_p_curve_1a8bb8e3b9085f15921dc40483fb025ab2" prot="public" virt="virtual"><scope>QCPCurve</scope><name>getValueRange</name></member>
      <member refid="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>initializeParentPlot</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1acb01f095cfb292f2cce2257e074554c4" prot="public" virt="virtual"><scope>QCPCurve</scope><name>interface1D</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa6f25b97ee99988fe352f17cb9ed962b" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>keyAxis</name></member>
      <member refid="class_q_c_p_layerable_1a9d4e121a7f1d2314f906fe698209cac9" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>layer</name></member>
      <member refid="class_q_c_p_layerable_1abbf8657cedea73ac1c3499b521c90eba" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>layerChanged</name></member>
      <member refid="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>LineStyle</name></member>
      <member refid="class_q_c_p_curve_1a06e3cf3f8f1add689254b3cda66e040e" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>lineStyle</name></member>
      <member refid="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1ade5822ce6fbf131d3df131795c2e1003" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>lsLine</name></member>
      <member refid="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1aec1601a191cdf0b4e761c4c66092cc48" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>lsNone</name></member>
      <member refid="class_q_c_p_layerable_1a3ab45a4c76a3333ce42eb217a81733ec" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mAntialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a152ac765bedf927fb240545d11d453ea" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mAntialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa115755e525a8e3a86dc683f9cab755b" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mAntialiasedScatters</name></member>
      <member refid="class_q_c_p_curve_1af5df2560b30333fe662ec676bd355415" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mayTraverse</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a33f00674c0161c13315ab9da0895418e" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mBrush</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ac139cf70590707a1fb40eabe97fac246" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mDataContainer</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mKeyAxis</name></member>
      <member refid="class_q_c_p_layerable_1aa38ec5891aff0f50b36fd63e9372a0cd" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mLayer</name></member>
      <member refid="class_q_c_p_curve_1ae1f35ae2b15aee8e15bcdfec5be95156" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mLineStyle</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac29ffef424e2488675930de18cde612a" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mName</name></member>
      <member refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>mouseDoubleClickEvent</name></member>
      <member refid="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>mouseMoveEvent</name></member>
      <member refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>mousePressEvent</name></member>
      <member refid="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>mouseReleaseEvent</name></member>
      <member refid="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>moveToLayer</name></member>
      <member refid="class_q_c_p_layerable_1a3291445a980053e2d17a21d15957624e" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mParentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a67bc0622fd1b9fa14e54c14922dcec66" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mPen</name></member>
      <member refid="class_q_c_p_curve_1a990bd5fdeb474459f3f6f5ad0a7b945c" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mScatterSkip</name></member>
      <member refid="class_q_c_p_curve_1a08f803b4a30b01bbd7a1eab15d0f864f" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mScatterStyle</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3944521f7bec90974737c9d192fc57ba" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mSelectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a206aa62c9eba32c82e892b29cdbf6314" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mSelection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a0dbc731cab717f4ff67b4ca100c74046" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mSelectionDecorator</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2901452ca4aea911a1827717934a4bda" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mValueAxis</name></member>
      <member refid="class_q_c_p_layerable_1a62e3aed8427d6ce3ccf716f285106cb3" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a52c226eefcb1920240eeabae574d28c0" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>name</name></member>
      <member refid="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>parentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1a36ed5b292b90934b524a4e5866a3526c" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layerable_1ab20b7dbd8e0249ed61adb9622c427382" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>parentPlotInitialized</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ad5972efc31344e5a7a78ab4f8864b2d3" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>pen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3903c1120ab5c27e7fa46b597ef267bd" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>pixelsToCoords</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a28d32c0062b9450847851ffdee1c5f69" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>pixelsToCoords</name></member>
      <member refid="class_q_c_p_curve_1aa2c9c9c0e57f11f18a5cb7e47927157c" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>pointDistance</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af78a036e40db6f53a31abadc5323715a" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>QCPAbstractPlottable</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a30b2e50ab0afce65f104ea7a95440315" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>QCPAbstractPlottable1D</name></member>
      <member refid="class_q_c_p_curve_1a36de58e2652b3fa47bdf9187d421d3ce" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>QCPCurve</name></member>
      <member refid="class_q_c_p_layerable_1a4f87f420cb2597e2b393aab934d2f099" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_curve_1a8429035e7adfbd7f05805a6530ad5e3b" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>QCPLegend</name></member>
      <member refid="class_q_c_p_curve_1a1cdf9df76adcfae45261690aa0ca2198" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>QCustomPlot</name></member>
      <member refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>realVisibility</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3cc235007e2343a65ad4f463767e0e20" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>removeFromLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac95fb2604d9106d0852ad9ceb326fe8c" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>removeFromLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>rescaleAxes</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ae96b83c961e257da116c6acf9c7da308" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>rescaleKeyAxis</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a714eaf36b12434cd71846215504db82e" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>rescaleValueAxis</name></member>
      <member refid="class_q_c_p_curve_1a09b33217172aedf6c62c441b4ff66166" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>scatterSkip</name></member>
      <member refid="class_q_c_p_curve_1afa6bd72a3a331a5ed45d3e0c5843b592" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>scatterStyle</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a016653741033bd332d1d4c3c725cc284" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>selectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a663b1a44123c8340ac041a29d1e2c973" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>selectableChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a0b3b514474fe93354fc74cfc144184b4" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>selected</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>selectEvent</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a040bf09f41d456284cfd39cc37aa068f" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>selection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af80ad8531642e786b6f4fad551c203c4" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>selectionCategory</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3af66432b1dca93b28e00e78a8c7c1d9" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>selectionChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a787a9c39421059006891744b731fa473" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>selectionChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7861518e47ca0c6a0c386032c2db075e" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>selectionDecorator</name></member>
      <member refid="class_q_c_p_curve_1a6717367381d420607fae5c98b4eba022" prot="public" virt="virtual"><scope>QCPCurve</scope><name>selectTest</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded" prot="public" virt="virtual"><scope>QCPCurve</scope><name>selectTestRect</name></member>
      <member refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setAntialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a089d6b5577120239b55c39ed27c39536" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setAntialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2f03f067ede2ed4da6f7d0e4777a3f02" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setAntialiasedScatters</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setBrush</name></member>
      <member refid="class_q_c_p_curve_1a41246850d2e080bc57183ca19cd4135e" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setData</name></member>
      <member refid="class_q_c_p_curve_1a0768af2c33c8dcffa3cf5bdeb53923a6" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setData</name></member>
      <member refid="class_q_c_p_curve_1a9d3245d43304226e013240c94802f7f6" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setData</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a8524fa2994c63c0913ebd9bb2ffa3920" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setKeyAxis</name></member>
      <member refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_curve_1a4a377ec863ff81a1875c3094a6177c19" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setLineStyle</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ab79c7ba76bc7fa89a4b3580e12149f1f" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setName</name></member>
      <member refid="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a" prot="protected" virt="non-virtual"><scope>QCPCurve</scope><name>setParentLayerable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setPen</name></member>
      <member refid="class_q_c_p_curve_1a97dbfecd497e972d5f2162615e6da5be" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setScatterSkip</name></member>
      <member refid="class_q_c_p_curve_1a55e43b44709bf50a35500644988aa706" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setScatterStyle</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setSelectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setSelection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a20e266ad646f8c4a7e4631040510e5d9" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setSelectionDecorator</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a71626a07367e241ec62ad2c34baf21cb" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setValueAxis</name></member>
      <member refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1afe0d56e39cc076032922f059b304c092" prot="public" virt="virtual"><scope>QCPCurve</scope><name>sortKeyIsMainKey</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a842b3831660d3e33b73863fd133889dd" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>valueAxis</name></member>
      <member refid="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70" prot="public" virt="non-virtual"><scope>QCPCurve</scope><name>visible</name></member>
      <member refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022" prot="protected" virt="virtual"><scope>QCPCurve</scope><name>wheelEvent</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3223d1e2073bd1d3516863a1dce554b0" prot="public" virt="virtual"><scope>QCPCurve</scope><name>~QCPAbstractPlottable</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ae4d821dbdc530b6910321e53599ec39b" prot="public" virt="virtual"><scope>QCPCurve</scope><name>~QCPAbstractPlottable1D</name></member>
      <member refid="class_q_c_p_curve_1a603d56afa3165e8fff3ef945997527f8" prot="public" virt="virtual"><scope>QCPCurve</scope><name>~QCPCurve</name></member>
      <member refid="class_q_c_p_layerable_1a4231cf5b3601d6d3a5781283e7a9735b" prot="public" virt="virtual"><scope>QCPCurve</scope><name>~QCPLayerable</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1a97508cd3c61b9e8580b9f0d9964f7fb1" prot="public" virt="virtual"><scope>QCPCurve</scope><name>~QCPPlottableInterface1D</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
