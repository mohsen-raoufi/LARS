<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_abstract_plottable" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QCPAbstractPlottable</compoundname>
    <basecompoundref refid="class_q_c_p_layerable" prot="public" virt="non-virtual">QCPLayerable</basecompoundref>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPBarsData &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPCurveData &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPFinancialData &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPGraphData &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPStatisticalBoxData &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; DataType &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_color_map" prot="public" virt="non-virtual">QCPColorMap</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_error_bars" prot="public" virt="non-virtual">QCPErrorBars</derivedcompoundref>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_abstract_plottable_1ac29ffef424e2488675930de18cde612a" prot="protected" static="no" mutable="no">
        <type>QString</type>
        <definition>QString QCPAbstractPlottable::mName</definition>
        <argsstring></argsstring>
        <name>mName</name>
        <qualifiedname>QCPAbstractPlottable::mName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3528" column="11" bodyfile="qcustomplot.h" bodystart="3528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_plottable_1a152ac765bedf927fb240545d11d453ea" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPAbstractPlottable::mAntialiasedFill</definition>
        <argsstring></argsstring>
        <name>mAntialiasedFill</name>
        <qualifiedname>QCPAbstractPlottable::mAntialiasedFill</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3529" column="8" bodyfile="qcustomplot.h" bodystart="3529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_plottable_1aa115755e525a8e3a86dc683f9cab755b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPAbstractPlottable::mAntialiasedScatters</definition>
        <argsstring></argsstring>
        <name>mAntialiasedScatters</name>
        <qualifiedname>QCPAbstractPlottable::mAntialiasedScatters</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3529" column="25" bodyfile="qcustomplot.h" bodystart="3529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_plottable_1a67bc0622fd1b9fa14e54c14922dcec66" prot="protected" static="no" mutable="no">
        <type>QPen</type>
        <definition>QPen QCPAbstractPlottable::mPen</definition>
        <argsstring></argsstring>
        <name>mPen</name>
        <qualifiedname>QCPAbstractPlottable::mPen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3530" column="8" bodyfile="qcustomplot.h" bodystart="3530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_plottable_1a33f00674c0161c13315ab9da0895418e" prot="protected" static="no" mutable="no">
        <type>QBrush</type>
        <definition>QBrush QCPAbstractPlottable::mBrush</definition>
        <argsstring></argsstring>
        <name>mBrush</name>
        <qualifiedname>QCPAbstractPlottable::mBrush</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3531" column="10" bodyfile="qcustomplot.h" bodystart="3531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" prot="protected" static="no" mutable="no">
        <type>QPointer&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> &gt;</type>
        <definition>QPointer&lt;QCPAxis&gt; QCPAbstractPlottable::mKeyAxis</definition>
        <argsstring></argsstring>
        <name>mKeyAxis</name>
        <qualifiedname>QCPAbstractPlottable::mKeyAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3532" column="12" bodyfile="qcustomplot.h" bodystart="3532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_plottable_1a2901452ca4aea911a1827717934a4bda" prot="protected" static="no" mutable="no">
        <type>QPointer&lt; <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> &gt;</type>
        <definition>QPointer&lt;QCPAxis&gt; QCPAbstractPlottable::mValueAxis</definition>
        <argsstring></argsstring>
        <name>mValueAxis</name>
        <qualifiedname>QCPAbstractPlottable::mValueAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3532" column="21" bodyfile="qcustomplot.h" bodystart="3532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_plottable_1a3944521f7bec90974737c9d192fc57ba" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038" kindref="member">QCP::SelectionType</ref></type>
        <definition>QCP::SelectionType QCPAbstractPlottable::mSelectable</definition>
        <argsstring></argsstring>
        <name>mSelectable</name>
        <qualifiedname>QCPAbstractPlottable::mSelectable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3533" column="22" bodyfile="qcustomplot.h" bodystart="3533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_plottable_1a206aa62c9eba32c82e892b29cdbf6314" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>QCPDataSelection QCPAbstractPlottable::mSelection</definition>
        <argsstring></argsstring>
        <name>mSelection</name>
        <qualifiedname>QCPAbstractPlottable::mSelection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3534" column="20" bodyfile="qcustomplot.h" bodystart="3534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_plottable_1a0dbc731cab717f4ff67b4ca100c74046" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_selection_decorator" kindref="compound">QCPSelectionDecorator</ref> *</type>
        <definition>QCPSelectionDecorator* QCPAbstractPlottable::mSelectionDecorator</definition>
        <argsstring></argsstring>
        <name>mSelectionDecorator</name>
        <qualifiedname>QCPAbstractPlottable::mSelectionDecorator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3535" column="25" bodyfile="qcustomplot.h" bodystart="3535" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_c_p_abstract_plottable_1a1cdf9df76adcfae45261690aa0ca2198" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCustomPlot</definition>
        <argsstring></argsstring>
        <name>QCustomPlot</name>
        <qualifiedname>QCPAbstractPlottable::QCustomPlot</qualifiedname>
        <param>
          <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3556" column="16" bodyfile="qcustomplot.h" bodystart="3556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_abstract_plottable_1af123edeca169ec7a31958a1d714e1a8a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPAxis</definition>
        <argsstring></argsstring>
        <name>QCPAxis</name>
        <qualifiedname>QCPAbstractPlottable::QCPAxis</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3557" column="16" bodyfile="qcustomplot.h" bodystart="3557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_abstract_plottable_1a104c78e91302afd6842a903e472f552f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPPlottableLegendItem</definition>
        <argsstring></argsstring>
        <name>QCPPlottableLegendItem</name>
        <qualifiedname>QCPAbstractPlottable::QCPPlottableLegendItem</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_plottable_legend_item" kindref="compound">QCPPlottableLegendItem</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3558" column="16" bodyfile="qcustomplot.h" bodystart="3558" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1af78a036e40db6f53a31abadc5323715a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPAbstractPlottable::QCPAbstractPlottable</definition>
        <argsstring>(QCPAxis *keyAxis, QCPAxis *valueAxis)</argsstring>
        <name>QCPAbstractPlottable</name>
        <qualifiedname>QCPAbstractPlottable::QCPAbstractPlottable</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>keyAxis</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>valueAxis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs an abstract plottable which uses <emphasis>keyAxis</emphasis> as its key axis (&quot;x&quot;) and <emphasis>valueAxis</emphasis> as its value axis (&quot;y&quot;). <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> must reside in the same <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance and have perpendicular orientations. If either of these restrictions is violated, a corresponding message is printed to the debug output (qDebug), the construction is not aborted, though.</para>
<para>Since <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> is an abstract class that defines the basic interface to plottables, it can&apos;t be directly instantiated.</para>
<para>You probably want one of the subclasses like <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> or <ref refid="class_q_c_p_curve" kindref="compound">QCPCurve</ref> instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3474" column="3" bodyfile="qcustomplot.cpp" bodystart="11414" bodyend="11433"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a3223d1e2073bd1d3516863a1dce554b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPAbstractPlottable::~QCPAbstractPlottable</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>~QCPAbstractPlottable</name>
        <qualifiedname>QCPAbstractPlottable::~QCPAbstractPlottable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3475" column="11" bodyfile="qcustomplot.cpp" bodystart="11435" bodyend="11442"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a52c226eefcb1920240eeabae574d28c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>QString QCPAbstractPlottable::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>QCPAbstractPlottable::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3478" column="11" bodyfile="qcustomplot.h" bodystart="3478" bodyend="3478"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a022717896dc57b638a7b5a7be7212ba9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractPlottable::antialiasedFill</definition>
        <argsstring>() const</argsstring>
        <name>antialiasedFill</name>
        <qualifiedname>QCPAbstractPlottable::antialiasedFill</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3479" column="8" bodyfile="qcustomplot.h" bodystart="3479" bodyend="3479"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a795370db6b1309de0ab60b633efb5ec2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractPlottable::antialiasedScatters</definition>
        <argsstring>() const</argsstring>
        <name>antialiasedScatters</name>
        <qualifiedname>QCPAbstractPlottable::antialiasedScatters</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3480" column="8" bodyfile="qcustomplot.h" bodystart="3480" bodyend="3480"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1ad5972efc31344e5a7a78ab4f8864b2d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPen</type>
        <definition>QPen QCPAbstractPlottable::pen</definition>
        <argsstring>() const</argsstring>
        <name>pen</name>
        <qualifiedname>QCPAbstractPlottable::pen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3481" column="8" bodyfile="qcustomplot.h" bodystart="3481" bodyend="3481"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a893b4896dfd92b68b05b2600b80f5826" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QBrush</type>
        <definition>QBrush QCPAbstractPlottable::brush</definition>
        <argsstring>() const</argsstring>
        <name>brush</name>
        <qualifiedname>QCPAbstractPlottable::brush</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3482" column="10" bodyfile="qcustomplot.h" bodystart="3482" bodyend="3482"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1aa6f25b97ee99988fe352f17cb9ed962b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
        <definition>QCPAxis * QCPAbstractPlottable::keyAxis</definition>
        <argsstring>() const</argsstring>
        <name>keyAxis</name>
        <qualifiedname>QCPAbstractPlottable::keyAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3483" column="11" bodyfile="qcustomplot.h" bodystart="3483" bodyend="3483"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a842b3831660d3e33b73863fd133889dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
        <definition>QCPAxis * QCPAbstractPlottable::valueAxis</definition>
        <argsstring>() const</argsstring>
        <name>valueAxis</name>
        <qualifiedname>QCPAbstractPlottable::valueAxis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3484" column="11" bodyfile="qcustomplot.h" bodystart="3484" bodyend="3484"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a016653741033bd332d1d4c3c725cc284" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038" kindref="member">QCP::SelectionType</ref></type>
        <definition>QCP::SelectionType QCPAbstractPlottable::selectable</definition>
        <argsstring>() const</argsstring>
        <name>selectable</name>
        <qualifiedname>QCPAbstractPlottable::selectable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3485" column="22" bodyfile="qcustomplot.h" bodystart="3485" bodyend="3485"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a0b3b514474fe93354fc74cfc144184b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractPlottable::selected</definition>
        <argsstring>() const</argsstring>
        <name>selected</name>
        <qualifiedname>QCPAbstractPlottable::selected</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if there are any data points of the plottable currently selected. Use <ref refid="class_q_c_p_abstract_plottable_1a040bf09f41d456284cfd39cc37aa068f" kindref="member">selection</ref> to retrieve the current <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3486" column="8" bodyfile="qcustomplot.h" bodystart="3486" bodyend="3486"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a040bf09f41d456284cfd39cc37aa068f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>QCPDataSelection QCPAbstractPlottable::selection</definition>
        <argsstring>() const</argsstring>
        <name>selection</name>
        <qualifiedname>QCPAbstractPlottable::selection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> encompassing all the data points that are currently selected on this plottable.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a0b3b514474fe93354fc74cfc144184b4" kindref="member">selected</ref>, <ref refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" kindref="member">setSelection</ref>, <ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">setSelectable</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3487" column="20" bodyfile="qcustomplot.h" bodystart="3487" bodyend="3487"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a7861518e47ca0c6a0c386032c2db075e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_selection_decorator" kindref="compound">QCPSelectionDecorator</ref> *</type>
        <definition>QCPSelectionDecorator * QCPAbstractPlottable::selectionDecorator</definition>
        <argsstring>() const</argsstring>
        <name>selectionDecorator</name>
        <qualifiedname>QCPAbstractPlottable::selectionDecorator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides access to the selection decorator of this plottable. The selection decorator controls how selected data ranges are drawn (e.g. their pen color and fill), see <ref refid="class_q_c_p_selection_decorator" kindref="compound">QCPSelectionDecorator</ref> for details.</para>
<para>If you wish to use an own <ref refid="class_q_c_p_selection_decorator" kindref="compound">QCPSelectionDecorator</ref> subclass, pass an instance of it to <ref refid="class_q_c_p_abstract_plottable_1a20e266ad646f8c4a7e4631040510e5d9" kindref="member">setSelectionDecorator</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3488" column="25" bodyfile="qcustomplot.h" bodystart="3488" bodyend="3488"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1ab79c7ba76bc7fa89a4b3580e12149f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::setName</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>setName</name>
        <qualifiedname>QCPAbstractPlottable::setName</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The name is the textual representation of this plottable as it is displayed in the legend (<ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref>). It may contain any UTF-8 characters, including newlines. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3491" column="8" bodyfile="qcustomplot.cpp" bodystart="11448" bodyend="11451"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a089d6b5577120239b55c39ed27c39536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::setAntialiasedFill</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setAntialiasedFill</name>
        <qualifiedname>QCPAbstractPlottable::setAntialiasedFill</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether fills of this plottable are drawn antialiased or not.</para>
<para>Note that this setting may be overridden by <ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">QCustomPlot::setAntialiasedElements</ref> and <ref refid="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24" kindref="member">QCustomPlot::setNotAntialiasedElements</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3492" column="8" bodyfile="qcustomplot.cpp" bodystart="11459" bodyend="11462"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a2f03f067ede2ed4da6f7d0e4777a3f02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::setAntialiasedScatters</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setAntialiasedScatters</name>
        <qualifiedname>QCPAbstractPlottable::setAntialiasedScatters</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the scatter symbols of this plottable are drawn antialiased or not.</para>
<para>Note that this setting may be overridden by <ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">QCustomPlot::setAntialiasedElements</ref> and <ref refid="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24" kindref="member">QCustomPlot::setNotAntialiasedElements</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3493" column="8" bodyfile="qcustomplot.cpp" bodystart="11470" bodyend="11473"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::setPen</definition>
        <argsstring>(const QPen &amp;pen)</argsstring>
        <name>setPen</name>
        <qualifiedname>QCPAbstractPlottable::setPen</qualifiedname>
        <param>
          <type>const QPen &amp;</type>
          <declname>pen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The pen is used to draw basic lines that make up the plottable representation in the plot.</para>
<para>For example, the <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> subclass draws its graph lines with this pen.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" kindref="member">setBrush</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3494" column="8" bodyfile="qcustomplot.cpp" bodystart="11483" bodyend="11486"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::setBrush</definition>
        <argsstring>(const QBrush &amp;brush)</argsstring>
        <name>setBrush</name>
        <qualifiedname>QCPAbstractPlottable::setBrush</qualifiedname>
        <param>
          <type>const QBrush &amp;</type>
          <declname>brush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The brush is used to draw basic fills of the plottable representation in the plot. The Fill can be a color, gradient or texture, see the usage of QBrush.</para>
<para>For example, the <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> subclass draws the fill under the graph with this brush, when it&apos;s not set to Qt::NoBrush.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" kindref="member">setPen</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3495" column="8" bodyfile="qcustomplot.cpp" bodystart="11497" bodyend="11500"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a8524fa2994c63c0913ebd9bb2ffa3920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::setKeyAxis</definition>
        <argsstring>(QCPAxis *axis)</argsstring>
        <name>setKeyAxis</name>
        <qualifiedname>QCPAbstractPlottable::setKeyAxis</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The key axis of a plottable can be set to any axis of a <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>, as long as it is orthogonal to the plottable&apos;s value axis. This function performs no checks to make sure this is the case. The typical mathematical choice is to use the x-axis (<ref refid="class_q_custom_plot_1a968b5ac86c181a49bba78c2b62a80cb3" kindref="member">QCustomPlot::xAxis</ref>) as key axis and the y-axis (<ref refid="class_q_custom_plot_1af6fea5679725b152c14facd920b19367" kindref="member">QCustomPlot::yAxis</ref>) as value axis.</para>
<para>Normally, the key and value axes are set in the constructor of the plottable (or <ref refid="class_q_custom_plot_1a2836a46e31d5aee174ae054c0aa6580b" kindref="member">QCustomPlot::addGraph</ref> when working with QCPGraphs through the dedicated graph interface).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a71626a07367e241ec62ad2c34baf21cb" kindref="member">setValueAxis</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3496" column="8" bodyfile="qcustomplot.cpp" bodystart="11513" bodyend="11516"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a71626a07367e241ec62ad2c34baf21cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::setValueAxis</definition>
        <argsstring>(QCPAxis *axis)</argsstring>
        <name>setValueAxis</name>
        <qualifiedname>QCPAbstractPlottable::setValueAxis</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The value axis of a plottable can be set to any axis of a <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>, as long as it is orthogonal to the plottable&apos;s key axis. This function performs no checks to make sure this is the case. The typical mathematical choice is to use the x-axis (<ref refid="class_q_custom_plot_1a968b5ac86c181a49bba78c2b62a80cb3" kindref="member">QCustomPlot::xAxis</ref>) as key axis and the y-axis (<ref refid="class_q_custom_plot_1af6fea5679725b152c14facd920b19367" kindref="member">QCustomPlot::yAxis</ref>) as value axis.</para>
<para>Normally, the key and value axes are set in the constructor of the plottable (or <ref refid="class_q_custom_plot_1a2836a46e31d5aee174ae054c0aa6580b" kindref="member">QCustomPlot::addGraph</ref> when working with QCPGraphs through the dedicated graph interface).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a8524fa2994c63c0913ebd9bb2ffa3920" kindref="member">setKeyAxis</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3497" column="8" bodyfile="qcustomplot.cpp" bodystart="11529" bodyend="11532"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SLOT void</type>
        <definition>void QCPAbstractPlottable::setSelectable</definition>
        <argsstring>(QCP::SelectionType selectable)</argsstring>
        <name>setSelectable</name>
        <qualifiedname>QCPAbstractPlottable::setSelectable</qualifiedname>
        <param>
          <type><ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038" kindref="member">QCP::SelectionType</ref></type>
          <declname>selectable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether and to which granularity this plottable can be selected.</para>
<para>A selection can happen by clicking on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> surface (When <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref> contains <ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a67148c8227b4155eca49135fc274c7ec" kindref="member">QCP::iSelectPlottables</ref>), by dragging a selection rect (When <ref refid="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb" kindref="member">QCustomPlot::setSelectionRectMode</ref> is <ref refid="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacfa62c286e8da283a0cbb88ecac2f3f7506" kindref="member">QCP::srmSelect</ref>), or programmatically by calling <ref refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" kindref="member">setSelection</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" kindref="member">setSelection</ref>, <ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038" kindref="member">QCP::SelectionType</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3498" column="15" bodyfile="qcustomplot.cpp" bodystart="11599" bodyend="11613"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SLOT void</type>
        <definition>void QCPAbstractPlottable::setSelection</definition>
        <argsstring>(QCPDataSelection selection)</argsstring>
        <name>setSelection</name>
        <qualifiedname>QCPAbstractPlottable::setSelection</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
          <declname>selection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets which data ranges of this plottable are selected. Selected data ranges are drawn differently (e.g. color) in the plot. This can be controlled via the selection decorator (see <ref refid="class_q_c_p_abstract_plottable_1a7861518e47ca0c6a0c386032c2db075e" kindref="member">selectionDecorator</ref>).</para>
<para>The entire selection mechanism for plottables is handled automatically when <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref> contains iSelectPlottables. You only need to call this function when you wish to change the selection state programmatically.</para>
<para>Using <ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">setSelectable</ref> you can further specify for each plottable whether and to which granularity it is selectable. If <emphasis>selection</emphasis> is not compatible with the current <ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038" kindref="member">QCP::SelectionType</ref> set via <ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">setSelectable</ref>, the resulting selection will be adjusted accordingly (see <ref refid="class_q_c_p_data_selection_1a17b84d852911531d229f4a76aa239a75" kindref="member">QCPDataSelection::enforceType</ref>).</para>
<para>emits the <ref refid="class_q_c_p_abstract_plottable_1a3af66432b1dca93b28e00e78a8c7c1d9" kindref="member">selectionChanged</ref> signal when <emphasis>selected</emphasis> is different from the previous selection state.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">setSelectable</ref>, <ref refid="class_q_c_p_abstract_plottable_1a8e4964b629802ce50e1427c7fb21d35b" kindref="member">selectTest</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3499" column="15" bodyfile="qcustomplot.cpp" bodystart="11553" bodyend="11562"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a20e266ad646f8c4a7e4631040510e5d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::setSelectionDecorator</definition>
        <argsstring>(QCPSelectionDecorator *decorator)</argsstring>
        <name>setSelectionDecorator</name>
        <qualifiedname>QCPAbstractPlottable::setSelectionDecorator</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_selection_decorator" kindref="compound">QCPSelectionDecorator</ref> *</type>
          <declname>decorator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use this method to set an own <ref refid="class_q_c_p_selection_decorator" kindref="compound">QCPSelectionDecorator</ref> (subclass) instance. This allows you to customize the visual representation of selected data ranges further than by using the default <ref refid="class_q_c_p_selection_decorator" kindref="compound">QCPSelectionDecorator</ref>.</para>
<para>The plottable takes ownership of the <emphasis>decorator</emphasis>.</para>
<para>The currently set decorator can be accessed via <ref refid="class_q_c_p_abstract_plottable_1a7861518e47ca0c6a0c386032c2db075e" kindref="member">selectionDecorator</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3500" column="8" bodyfile="qcustomplot.cpp" bodystart="11573" bodyend="11587"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a8e4964b629802ce50e1427c7fb21d35b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double QCPAbstractPlottable::selectTest</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable, QVariant *details=nullptr) const Q_DECL_OVERRIDE=0</argsstring>
        <name>selectTest</name>
        <qualifiedname>QCPAbstractPlottable::selectTest</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a272989087fc8c4357b4ba614f9922336">selectTest</reimplements>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a2f169c3c2989e5d08ec7a9e3eb56a261">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a2f169c3c2989e5d08ec7a9e3eb56a261">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a2f169c3c2989e5d08ec7a9e3eb56a261">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a2f169c3c2989e5d08ec7a9e3eb56a261">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a2f169c3c2989e5d08ec7a9e3eb56a261">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1a2f169c3c2989e5d08ec7a9e3eb56a261">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_bars_1ae490d8589b7e5f5d7e2e5ee88ce3e6c2">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_color_map_1af0a8ef6c421bd387bbbc8e5f5cb2a602">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_curve_1a6717367381d420607fae5c98b4eba022">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1a35d48d6b283898e725cc9f3fb38c2769">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_financial_1a8114a6d3ab6bea0a93d4b85401f29b52">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_graph_1af524307eacb919827b88233ef7449ce3">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_statistical_box_1abefd8d3e0adf21c198cfc9615ddc8df1">selectTest</reimplementedby>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <param>
          <type>QVariant *</type>
          <declname>details</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used to decide whether a click hits a layerable object or not.</para>
<para><emphasis>pos</emphasis> is a point in pixel coordinates on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> surface. This function returns the shortest pixel distance of this point to the object. If the object is either invisible or the distance couldn&apos;t be determined, -1.0 is returned. Further, if <emphasis>onlySelectable</emphasis> is true and the object is not selectable, -1.0 is returned, too.</para>
<para>If the object is represented not by single lines but by an area like a <ref refid="class_q_c_p_item_text" kindref="compound">QCPItemText</ref> or the bars of a <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref> plottable, a click inside the area should also be considered a hit. In these cases this function thus returns a constant value greater zero but still below the parent plot&apos;s selection tolerance. (typically the selectionTolerance multiplied by 0.99).</para>
<para>Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i.e. closer than 0.99*selectionTolerance).</para>
<para>The actual setting of the selection state is not done by this function. This is handled by the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> when the mouseReleaseEvent occurs, and the finally selected object is notified via the selectEvent/ deselectEvent methods.</para>
<para><emphasis>details</emphasis> is an optional output parameter. Every layerable subclass may place any information in <emphasis>details</emphasis>. This information will be passed to selectEvent when the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> decides on the basis of this selectTest call, that the object was successfully selected. The subsequent call to selectEvent will carry the <emphasis>details</emphasis>. This is useful for multi-part objects (like <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref>). This way, a possibly complex calculation to decide which part was clicked is only done once in <ref refid="class_q_c_p_abstract_plottable_1a8e4964b629802ce50e1427c7fb21d35b" kindref="member">selectTest</ref>. The result (i.e. the actually clicked part) can then be placed in <emphasis>details</emphasis>. So in the subsequent selectEvent, the decision which part was selected doesn&apos;t have to be done a second time for a single selection operation.</para>
<para>In the case of 1D Plottables (<ref refid="class_q_c_p_abstract_plottable1_d" kindref="compound">QCPAbstractPlottable1D</ref>, like <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> or <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref>) <emphasis>details</emphasis> will be set to a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref>, describing the closest data point to <emphasis>pos</emphasis>.</para>
<para>You may pass <computeroutput>nullptr</computeroutput> as <emphasis>details</emphasis> to indicate that you are not interested in those selection details.</para>
<para><simplesect kind="see"><para>selectEvent, deselectEvent, <ref refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376" kindref="member">mousePressEvent</ref>, <ref refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022" kindref="member">wheelEvent</ref>, <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref>, <ref refid="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded" kindref="member">QCPAbstractPlottable1D::selectTestRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3503" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a53c8b30779771f2c743104e652e74ab1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_q_c_p_plottable_interface1_d" kindref="compound">QCPPlottableInterface1D</ref> *</type>
        <definition>virtual QCPPlottableInterface1D * QCPAbstractPlottable::interface1D</definition>
        <argsstring>()</argsstring>
        <name>interface1D</name>
        <qualifiedname>QCPAbstractPlottable::interface1D</qualifiedname>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1acb01f095cfb292f2cce2257e074554c4">interface1D</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1acb01f095cfb292f2cce2257e074554c4">interface1D</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1acb01f095cfb292f2cce2257e074554c4">interface1D</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1acb01f095cfb292f2cce2257e074554c4">interface1D</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1acb01f095cfb292f2cce2257e074554c4">interface1D</reimplementedby>
        <reimplementedby refid="class_q_c_p_abstract_plottable1_d_1acb01f095cfb292f2cce2257e074554c4">interface1D</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1ad8f0bfffcbb3c3bdf9ebe5f7ef2fe0cf">interface1D</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If this plottable is a one-dimensional plottable, i.e. it implements the <ref refid="class_q_c_p_plottable_interface1_d" kindref="compound">QCPPlottableInterface1D</ref>, returns the <emphasis>this</emphasis> pointer with that type. Otherwise (e.g. in the case of a <ref refid="class_q_c_p_color_map" kindref="compound">QCPColorMap</ref>) returns zero.</para>
<para>You can use this method to gain read access to data coordinates while holding a pointer to the abstract base class only. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3504" column="35" bodyfile="qcustomplot.h" bodystart="3504" bodyend="3504"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a56b4d9000f4de0de86c566c84eb05a21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>virtual QCPRange QCPAbstractPlottable::getKeyRange</definition>
        <argsstring>(bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const =0</argsstring>
        <name>getKeyRange</name>
        <qualifiedname>QCPAbstractPlottable::getKeyRange</qualifiedname>
        <reimplementedby refid="class_q_c_p_bars_1ac5a3854774d9d9cd129b1eae1426de2d">getKeyRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_color_map_1a985861974560f950af6cb7fae8c46267">getKeyRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_curve_1a22d09087f78f254731197cc0b8783299">getKeyRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1a6cac828a430d66ac77a167549d01d212">getKeyRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_financial_1a15d68fb257113fef697356d65fa76559">getKeyRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_graph_1aac47c6189e3aea46ea46939e5d14796c">getKeyRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_statistical_box_1a77d2d13301dfe60c13adfaa17fc1802f">getKeyRange</reimplementedby>
        <param>
          <type>bool &amp;</type>
          <declname>foundRange</declname>
        </param>
        <param>
          <type><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9" kindref="member">QCP::SignDomain</ref></type>
          <declname>inSignDomain</declname>
          <defval><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the coordinate range that all data in this plottable span in the key axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> or <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f" kindref="member">QCP::sdPositive</ref> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>
<para>Note that <emphasis>foundRange</emphasis> is not the same as <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" kindref="member">rescaleAxes</ref>, <ref refid="class_q_c_p_abstract_plottable_1aa81c95aec08d86cdd5407e48b83ab186" kindref="member">getValueRange</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3505" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1aa81c95aec08d86cdd5407e48b83ab186" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>virtual QCPRange QCPAbstractPlottable::getValueRange</definition>
        <argsstring>(bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &amp;inKeyRange=QCPRange()) const =0</argsstring>
        <name>getValueRange</name>
        <qualifiedname>QCPAbstractPlottable::getValueRange</qualifiedname>
        <reimplementedby refid="class_q_c_p_bars_1a02cee4bf94d48a1e5f6fc185d9a10477">getValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_color_map_1a88134493aaf6b297af34eaab65264fff">getValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_curve_1a8bb8e3b9085f15921dc40483fb025ab2">getValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1ab76215a186ae4862235821e028685f26">getValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_financial_1a82d862aa134d78853f98f8c57a03415b">getValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_graph_1a8f773e56f191a61c06e129e90a604d77">getValueRange</reimplementedby>
        <reimplementedby refid="class_q_c_p_statistical_box_1ab3388a21d0c2e86fbc0cba9c06ceb49b">getValueRange</reimplementedby>
        <param>
          <type>bool &amp;</type>
          <declname>foundRange</declname>
        </param>
        <param>
          <type><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9" kindref="member">QCP::SignDomain</ref></type>
          <declname>inSignDomain</declname>
          <defval><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref></defval>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref> &amp;</type>
          <declname>inKeyRange</declname>
          <defval><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the coordinate range that the data points in the specified key range (<emphasis>inKeyRange</emphasis>) span in the value axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> or <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f" kindref="member">QCP::sdPositive</ref> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>
<para>If <emphasis>inKeyRange</emphasis> has both lower and upper bound set to zero (is equal to <computeroutput><ref refid="class_q_c_p_range" kindref="compound">QCPRange()</ref></computeroutput>), all data points are considered, without any restriction on the keys.</para>
<para>Note that <emphasis>foundRange</emphasis> is not the same as <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" kindref="member">rescaleAxes</ref>, <ref refid="class_q_c_p_abstract_plottable_1a56b4d9000f4de0de86c566c84eb05a21" kindref="member">getKeyRange</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3506" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::coordsToPixels</definition>
        <argsstring>(double key, double value, double &amp;x, double &amp;y) const</argsstring>
        <name>coordsToPixels</name>
        <qualifiedname>QCPAbstractPlottable::coordsToPixels</qualifiedname>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function for transforming a key/value pair to pixels on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> surface, taking the orientations of the axes associated with this plottable into account (e.g. whether key represents x or y).</para>
<para><emphasis>key</emphasis> and <emphasis>value</emphasis> are transformed to the coodinates in pixels and are written to <emphasis>x</emphasis> and <emphasis>y</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a3903c1120ab5c27e7fa46b597ef267bd" kindref="member">pixelsToCoords</ref>, <ref refid="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4" kindref="member">QCPAxis::coordToPixel</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3509" column="8" bodyfile="qcustomplot.cpp" bodystart="11625" bodyend="11640"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a5acb50ae984eef09a7ab92315d2ad708" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const QPointF</type>
        <definition>const QPointF QCPAbstractPlottable::coordsToPixels</definition>
        <argsstring>(double key, double value) const</argsstring>
        <name>coordsToPixels</name>
        <qualifiedname>QCPAbstractPlottable::coordsToPixels</qualifiedname>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Transforms the given <emphasis>key</emphasis> and <emphasis>value</emphasis> to pixel coordinates and returns them in a QPointF. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3510" column="17" bodyfile="qcustomplot.cpp" bodystart="11646" bodyend="11656"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a3903c1120ab5c27e7fa46b597ef267bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::pixelsToCoords</definition>
        <argsstring>(double x, double y, double &amp;key, double &amp;value) const</argsstring>
        <name>pixelsToCoords</name>
        <qualifiedname>QCPAbstractPlottable::pixelsToCoords</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function for transforming a x/y pixel pair on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> surface to plot coordinates, taking the orientations of the axes associated with this plottable into account (e.g. whether key represents x or y).</para>
<para><emphasis>x</emphasis> and <emphasis>y</emphasis> are transformed to the plot coodinates and are written to <emphasis>key</emphasis> and <emphasis>value</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93" kindref="member">coordsToPixels</ref>, <ref refid="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4" kindref="member">QCPAxis::coordToPixel</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3511" column="8" bodyfile="qcustomplot.cpp" bodystart="11667" bodyend="11682"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a28d32c0062b9450847851ffdee1c5f69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::pixelsToCoords</definition>
        <argsstring>(const QPointF &amp;pixelPos, double &amp;key, double &amp;value) const</argsstring>
        <name>pixelsToCoords</name>
        <qualifiedname>QCPAbstractPlottable::pixelsToCoords</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pixelPos</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Returns the pixel input <emphasis>pixelPos</emphasis> as plot coordinates <emphasis>key</emphasis> and <emphasis>value</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3512" column="8" bodyfile="qcustomplot.cpp" bodystart="11688" bodyend="11691"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::rescaleAxes</definition>
        <argsstring>(bool onlyEnlarge=false) const</argsstring>
        <name>rescaleAxes</name>
        <qualifiedname>QCPAbstractPlottable::rescaleAxes</qualifiedname>
        <param>
          <type>bool</type>
          <declname>onlyEnlarge</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rescales the key and value axes associated with this plottable to contain all displayed data, so the whole plottable is visible. If the scaling of an axis is logarithmic, rescaleAxes will make sure not to rescale to an illegal range i.e. a range containing different signs and/or zero. Instead it will stay in the current sign domain and ignore all parts of the plottable that lie outside of that domain.</para>
<para><emphasis>onlyEnlarge</emphasis> makes sure the ranges are only expanded, never reduced. So it&apos;s possible to show multiple plottables in their entirety by multiple calls to rescaleAxes where the first call has <emphasis>onlyEnlarge</emphasis> set to false (the default), and all subsequent set to true.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1ae96b83c961e257da116c6acf9c7da308" kindref="member">rescaleKeyAxis</ref>, <ref refid="class_q_c_p_abstract_plottable_1a714eaf36b12434cd71846215504db82e" kindref="member">rescaleValueAxis</ref>, <ref refid="class_q_custom_plot_1ad86528f2cee6c7e446dea4a6e8839935" kindref="member">QCustomPlot::rescaleAxes</ref>, <ref refid="class_q_c_p_axis_1a499345f02ebce4b23d8ccec96e58daa9" kindref="member">QCPAxis::rescale</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3513" column="8" bodyfile="qcustomplot.cpp" bodystart="11706" bodyend="11710"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1ae96b83c961e257da116c6acf9c7da308" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::rescaleKeyAxis</definition>
        <argsstring>(bool onlyEnlarge=false) const</argsstring>
        <name>rescaleKeyAxis</name>
        <qualifiedname>QCPAbstractPlottable::rescaleKeyAxis</qualifiedname>
        <param>
          <type>bool</type>
          <declname>onlyEnlarge</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rescales the key axis of the plottable so the whole plottable is visible.</para>
<para>See <ref refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" kindref="member">rescaleAxes</ref> for detailed behaviour. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3514" column="8" bodyfile="qcustomplot.cpp" bodystart="11717" bodyend="11747"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a714eaf36b12434cd71846215504db82e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::rescaleValueAxis</definition>
        <argsstring>(bool onlyEnlarge=false, bool inKeyRange=false) const</argsstring>
        <name>rescaleValueAxis</name>
        <qualifiedname>QCPAbstractPlottable::rescaleValueAxis</qualifiedname>
        <param>
          <type>bool</type>
          <declname>onlyEnlarge</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>inKeyRange</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rescales the value axis of the plottable so the whole plottable is visible. If <emphasis>inKeyRange</emphasis> is set to true, only the data points which are in the currently visible key axis range are considered.</para>
<para>Returns true if the axis was actually scaled. This might not be the case if this plottable has an invalid range, e.g. because it has no data points.</para>
<para>See <ref refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" kindref="member">rescaleAxes</ref> for detailed behaviour. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3515" column="8" bodyfile="qcustomplot.cpp" bodystart="11759" bodyend="11790"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1aa64e93cb5b606d8110d2cc0a349bb30f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractPlottable::addToLegend</definition>
        <argsstring>(QCPLegend *legend)</argsstring>
        <name>addToLegend</name>
        <qualifiedname>QCPAbstractPlottable::addToLegend</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref> *</type>
          <declname>legend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds this plottable to the specified <emphasis>legend</emphasis>.</para>
<para>Creates a <ref refid="class_q_c_p_plottable_legend_item" kindref="compound">QCPPlottableLegendItem</ref> which is inserted into the legend. Returns true on success, i.e. when the legend exists and a legend item associated with this plottable isn&apos;t already in the legend.</para>
<para>If the plottable needs a more specialized representation in the legend, you can create a corresponding subclass of <ref refid="class_q_c_p_plottable_legend_item" kindref="compound">QCPPlottableLegendItem</ref> and add it to the legend manually instead of calling this method.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a3cc235007e2343a65ad4f463767e0e20" kindref="member">removeFromLegend</ref>, <ref refid="class_q_c_p_legend_1a3ab274de52d2951faea45a6d975e6b3f" kindref="member">QCPLegend::addItem</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3516" column="8" bodyfile="qcustomplot.cpp" bodystart="11806" bodyend="11825"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a70f8cabfd808f7d5204b9f18c45c13f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractPlottable::addToLegend</definition>
        <argsstring>()</argsstring>
        <name>addToLegend</name>
        <qualifiedname>QCPAbstractPlottable::addToLegend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds this plottable to the legend of the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> (<ref refid="class_q_custom_plot_1a73da53368aa4c2db3d874cf0db50d140" kindref="member">QCustomPlot::legend</ref>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a3cc235007e2343a65ad4f463767e0e20" kindref="member">removeFromLegend</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3517" column="8" bodyfile="qcustomplot.cpp" bodystart="11833" bodyend="11839"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a3cc235007e2343a65ad4f463767e0e20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractPlottable::removeFromLegend</definition>
        <argsstring>(QCPLegend *legend) const</argsstring>
        <name>removeFromLegend</name>
        <qualifiedname>QCPAbstractPlottable::removeFromLegend</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref> *</type>
          <declname>legend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Removes the plottable from the specifed <emphasis>legend</emphasis>. This means the <ref refid="class_q_c_p_plottable_legend_item" kindref="compound">QCPPlottableLegendItem</ref> that is associated with this plottable is removed.</para>
<para>Returns true on success, i.e. if the legend exists and a legend item associated with this plottable was found and removed.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1aa64e93cb5b606d8110d2cc0a349bb30f" kindref="member">addToLegend</ref>, <ref refid="class_q_c_p_legend_1ac91595c3eaa746fe6321d2eb952c63bb" kindref="member">QCPLegend::removeItem</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3518" column="8" bodyfile="qcustomplot.cpp" bodystart="11851" bodyend="11863"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1ac95fb2604d9106d0852ad9ceb326fe8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractPlottable::removeFromLegend</definition>
        <argsstring>() const</argsstring>
        <name>removeFromLegend</name>
        <qualifiedname>QCPAbstractPlottable::removeFromLegend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Removes the plottable from the legend of the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1aa64e93cb5b606d8110d2cc0a349bb30f" kindref="member">addToLegend</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3519" column="8" bodyfile="qcustomplot.cpp" bodystart="11871" bodyend="11877"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_q_c_p_abstract_plottable_1a3af66432b1dca93b28e00e78a8c7c1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::selectionChanged</definition>
        <argsstring>(bool selected)</argsstring>
        <name>selectionChanged</name>
        <qualifiedname>QCPAbstractPlottable::selectionChanged</qualifiedname>
        <param>
          <type>bool</type>
          <declname>selected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the selection state of this plottable has changed, either by user interaction or by a direct call to <ref refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" kindref="member">setSelection</ref>. The parameter <emphasis>selected</emphasis> indicates whether there are any points selected or not.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a787a9c39421059006891744b731fa473" kindref="member">selectionChanged(const QCPDataSelection &amp;selection)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3522" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_c_p_abstract_plottable_1a787a9c39421059006891744b731fa473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::selectionChanged</definition>
        <argsstring>(const QCPDataSelection &amp;selection)</argsstring>
        <name>selectionChanged</name>
        <qualifiedname>QCPAbstractPlottable::selectionChanged</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> &amp;</type>
          <declname>selection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the selection state of this plottable has changed, either by user interaction or by a direct call to <ref refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" kindref="member">setSelection</ref>. The parameter <emphasis>selection</emphasis> holds the currently selected data ranges.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a3af66432b1dca93b28e00e78a8c7c1d9" kindref="member">selectionChanged(bool selected)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3523" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_c_p_abstract_plottable_1a663b1a44123c8340ac041a29d1e2c973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::selectableChanged</definition>
        <argsstring>(QCP::SelectionType selectable)</argsstring>
        <name>selectableChanged</name>
        <qualifiedname>QCPAbstractPlottable::selectableChanged</qualifiedname>
        <param>
          <type><ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038" kindref="member">QCP::SelectionType</ref></type>
          <declname>selectable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the selectability of this plottable has changed.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">setSelectable</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3524" column="8"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a635cee3effc07ad421414c76fd83548c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QRect</type>
        <definition>QRect QCPAbstractPlottable::clipRect</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>clipRect</name>
        <qualifiedname>QCPAbstractPlottable::clipRect</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1acbcfc9ecc75433747b1978a77b1864b3">clipRect</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3538" column="17" bodyfile="qcustomplot.cpp" bodystart="11880" bodyend="11886"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a453f676a5cee7bf846c5f0fa05ea84b3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QCPAbstractPlottable::draw</definition>
        <argsstring>(QCPPainter *painter) Q_DECL_OVERRIDE=0</argsstring>
        <name>draw</name>
        <qualifiedname>QCPAbstractPlottable::draw</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1adf62b4bac3ca934db80290792fc897e1">draw</reimplements>
        <reimplementedby refid="class_q_c_p_bars_1aa267c20650d55084c3f47cb2f8fac9dc">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_color_map_1a6b628014d2939368935efd0a788648c8">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_curve_1ac199d41d23865cd68bd7b598308a4433">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1a801e85931372abf2a1034bfb2eac5cd2">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_financial_1a4d62b7a618d609321adb5f5f1e31f446">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_graph_1a2b0849598f06e834b43ce18cd13bcdc3">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_statistical_box_1afcff35fa79728cfe10e80e0702014fea">draw</reimplementedby>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3539" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1af80ad8531642e786b6f4fad551c203c4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037" kindref="member">QCP::Interaction</ref></type>
        <definition>QCP::Interaction QCPAbstractPlottable::selectionCategory</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>selectionCategory</name>
        <qualifiedname>QCPAbstractPlottable::selectionCategory</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a908c9edda761886f33893be326dab77d">selectionCategory</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3540" column="28" bodyfile="qcustomplot.cpp" bodystart="11889" bodyend="11892"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1ac032077fb0db93d6faa3273d02363398" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::applyDefaultAntialiasingHint</definition>
        <argsstring>(QCPPainter *painter) const Q_DECL_OVERRIDE</argsstring>
        <name>applyDefaultAntialiasingHint</name>
        <qualifiedname>QCPAbstractPlottable::applyDefaultAntialiasingHint</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a1168944abbf9fa6731b0f4a2d0d67e8b">applyDefaultAntialiasingHint</reimplements>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3541" column="8" bodyfile="qcustomplot.cpp" bodystart="11909" bodyend="11912"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::selectEvent</definition>
        <argsstring>(QMouseEvent *event, bool additive, const QVariant &amp;details, bool *selectionStateChanged) Q_DECL_OVERRIDE</argsstring>
        <name>selectEvent</name>
        <qualifiedname>QCPAbstractPlottable::selectEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a7498c2d0d081cf7cad0fb3bb93aa0e91">selectEvent</reimplements>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>additive</declname>
        </param>
        <param>
          <type>const QVariant &amp;</type>
          <declname>details</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>selectionStateChanged</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3543" column="16" bodyfile="qcustomplot.cpp" bodystart="11947" bodyend="11975"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a9b104d9da4f38f934363945c313bf82e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::deselectEvent</definition>
        <argsstring>(bool *selectionStateChanged) Q_DECL_OVERRIDE</argsstring>
        <name>deselectEvent</name>
        <qualifiedname>QCPAbstractPlottable::deselectEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1ae546370644a5551c76af739afc008bee">deselectEvent</reimplements>
        <param>
          <type>bool *</type>
          <declname>selectionStateChanged</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3544" column="16" bodyfile="qcustomplot.cpp" bodystart="11978" bodyend="11987"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a71c259f4f96533d12df152c446b17425" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QCPAbstractPlottable::drawLegendIcon</definition>
        <argsstring>(QCPPainter *painter, const QRectF &amp;rect) const =0</argsstring>
        <name>drawLegendIcon</name>
        <qualifiedname>QCPAbstractPlottable::drawLegendIcon</qualifiedname>
        <reimplementedby refid="class_q_c_p_bars_1aee7c3e1763fd6b504c45baa8775be7b7">drawLegendIcon</reimplementedby>
        <reimplementedby refid="class_q_c_p_color_map_1adeaa5e262a03b7f021bd1aa6f1e60ce9">drawLegendIcon</reimplementedby>
        <reimplementedby refid="class_q_c_p_curve_1aac6e94afbce4002d2cd7793250154e84">drawLegendIcon</reimplementedby>
        <reimplementedby refid="class_q_c_p_error_bars_1a20f5d292e66103f26bca00b11ce417b4">drawLegendIcon</reimplementedby>
        <reimplementedby refid="class_q_c_p_financial_1a53f6ef2cddb650993f04c66e39a04942">drawLegendIcon</reimplementedby>
        <reimplementedby refid="class_q_c_p_graph_1a6efbab06c400bdb15e28b2d0a4ecc18a">drawLegendIcon</reimplementedby>
        <reimplementedby refid="class_q_c_p_statistical_box_1ad286c63a79c21d5231a4b6c6fdbb914f">drawLegendIcon</reimplementedby>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3547" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1a8d06a59ea23324cce6330ebf2262c0ed" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::applyFillAntialiasingHint</definition>
        <argsstring>(QCPPainter *painter) const</argsstring>
        <name>applyFillAntialiasingHint</name>
        <qualifiedname>QCPAbstractPlottable::applyFillAntialiasingHint</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3550" column="8" bodyfile="qcustomplot.cpp" bodystart="11925" bodyend="11928"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable_1ac95f26b15a1e5d9c7bd2c0a46d760fc9" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable::applyScattersAntialiasingHint</definition>
        <argsstring>(QCPPainter *painter) const</argsstring>
        <name>applyScattersAntialiasingHint</name>
        <qualifiedname>QCPAbstractPlottable::applyScattersAntialiasingHint</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3551" column="8" bodyfile="qcustomplot.cpp" bodystart="11941" bodyend="11944"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The abstract base class for all data representing objects in a plot. </para>
    </briefdescription>
    <detaileddescription>
<para>It defines a very basic interface like name, pen, brush, visibility etc. Since this class is abstract, it can&apos;t be instantiated. Use one of the subclasses or create a subclass yourself to create new ways of displaying data (see &quot;Creating own plottables&quot; below). Plottables that display one-dimensional data (i.e. data points have a single key dimension and one or multiple values at each key) are based off of the template subclass <ref refid="class_q_c_p_abstract_plottable1_d" kindref="compound">QCPAbstractPlottable1D</ref>, see details there.</para>
<para>All further specifics are in the subclasses, for example: <itemizedlist>
<listitem><para>A normal graph with possibly a line and/or scatter points <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> (typically created with <ref refid="class_q_custom_plot_1a2836a46e31d5aee174ae054c0aa6580b" kindref="member">QCustomPlot::addGraph</ref>) </para>
</listitem>
<listitem><para>A parametric curve: <ref refid="class_q_c_p_curve" kindref="compound">QCPCurve</ref> </para>
</listitem>
<listitem><para>A bar chart: <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref> </para>
</listitem>
<listitem><para>A statistical box plot: <ref refid="class_q_c_p_statistical_box" kindref="compound">QCPStatisticalBox</ref> </para>
</listitem>
<listitem><para>A color encoded two-dimensional map: <ref refid="class_q_c_p_color_map" kindref="compound">QCPColorMap</ref> </para>
</listitem>
<listitem><para>An OHLC/Candlestick chart: <ref refid="class_q_c_p_financial" kindref="compound">QCPFinancial</ref></para>
</listitem>
</itemizedlist>
</para>
<sect1 id="class_q_c_p_abstract_plottable_1plottables-subclassing">
<title>Creating own plottables</title><para>Subclassing directly from <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> is only recommended if you wish to display two-dimensional data like <ref refid="class_q_c_p_color_map" kindref="compound">QCPColorMap</ref>, i.e. two logical key dimensions and one (or more) data dimensions. If you want to display data with only one logical key dimension, you should rather derive from <ref refid="class_q_c_p_abstract_plottable1_d" kindref="compound">QCPAbstractPlottable1D</ref>.</para>
<para>If subclassing <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> directly, these are the pure virtual functions you must implement: <itemizedlist>
<listitem><para><ref refid="class_q_c_p_abstract_plottable_1a8e4964b629802ce50e1427c7fb21d35b" kindref="member">selectTest</ref> </para>
</listitem>
<listitem><para>draw </para>
</listitem>
<listitem><para>drawLegendIcon </para>
</listitem>
<listitem><para><ref refid="class_q_c_p_abstract_plottable_1a56b4d9000f4de0de86c566c84eb05a21" kindref="member">getKeyRange</ref> </para>
</listitem>
<listitem><para><ref refid="class_q_c_p_abstract_plottable_1aa81c95aec08d86cdd5407e48b83ab186" kindref="member">getValueRange</ref></para>
</listitem>
</itemizedlist>
See the documentation of those functions for what they need to do.</para>
<para>For drawing your plot, you can use the <ref refid="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93" kindref="member">coordsToPixels</ref> functions to translate a point in plot coordinates to pixel coordinates. This function is quite convenient, because it takes the orientation of the key and value axes into account for you (x and y are swapped when the key axis is vertical and the value axis horizontal). If you are worried about performance (i.e. you need to translate many points in a loop like <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref>), you can directly use <ref refid="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4" kindref="member">QCPAxis::coordToPixel</ref>. However, you must then take care about the orientation of the axis yourself.</para>
<para>Here are some important members you inherit from <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref>: <table rows="8" cols="2"><row>
<entry thead="no"><para><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> *<bold>mParentPlot</bold> </para>
</entry><entry thead="no"><para>A pointer to the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance. The parent plot is inferred from the axes that are passed in the constructor.</para>
</entry></row>
<row>
<entry thead="no"><para>QString <bold>mName</bold> </para>
</entry><entry thead="no"><para>The name of the plottable.</para>
</entry></row>
<row>
<entry thead="no"><para>QPen <bold>mPen</bold> </para>
</entry><entry thead="no"><para>The generic pen of the plottable. You should use this pen for the most prominent data representing lines in the plottable (e.g <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> uses this pen for its graph lines and scatters)</para>
</entry></row>
<row>
<entry thead="no"><para>QBrush <bold>mBrush</bold> </para>
</entry><entry thead="no"><para>The generic brush of the plottable. You should use this brush for the most prominent fillable structures in the plottable (e.g. <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> uses this brush to control filling under the graph)</para>
</entry></row>
<row>
<entry thead="no"><para>QPointer&lt;<ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref>&gt; <bold>mKeyAxis</bold>, <bold>mValueAxis</bold> </para>
</entry><entry thead="no"><para>The key and value axes this plottable is attached to. Call their <ref refid="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4" kindref="member">QCPAxis::coordToPixel</ref> functions to translate coordinates to pixels in either the key or value dimension. Make sure to check whether the pointer is <computeroutput>nullptr</computeroutput> before using it. If one of the axes is null, don&apos;t draw the plottable.</para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="class_q_c_p_selection_decorator" kindref="compound">QCPSelectionDecorator</ref> <bold>mSelectionDecorator</bold> </para>
</entry><entry thead="no"><para>The currently set selection decorator which specifies how selected data of the plottable shall be drawn and decorated. When drawing your data, you must consult this decorator for the appropriate pen/brush before drawing unselected/selected data segments. Finally, you should call its <ref refid="class_q_c_p_selection_decorator_1a4f8eb49e277063845391e803ae23054a" kindref="member">QCPSelectionDecorator::drawDecoration</ref> method at the end of your draw implementation.</para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038" kindref="member">QCP::SelectionType</ref> <bold>mSelectable</bold> </para>
</entry><entry thead="no"><para>In which composition, if at all, this plottable&apos;s data may be selected. Enforcing this setting on the data selection is done by <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> automatically.</para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> <bold>mSelection</bold> </para>
</entry><entry thead="no"><para>Holds the current selection state of the plottable&apos;s data, i.e. the selected data ranges (<ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref>).</para>
</entry></row>
</table>
</para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QCPAbstractPlottable</label>
        <link refid="class_q_c_p_abstract_plottable"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QCPAbstractPlottable1D&lt; DataType &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QCPAbstractPlottable1D&lt; QCPBarsData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QCPAbstractPlottable1D&lt; QCPCurveData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QCPAbstractPlottable1D&lt; QCPFinancialData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QCPAbstractPlottable1D&lt; QCPGraphData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QCPAbstractPlottable1D&lt; QCPStatisticalBoxData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QCPBars</label>
        <link refid="class_q_c_p_bars"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QCPColorMap</label>
        <link refid="class_q_c_p_color_map"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QCPCurve</label>
        <link refid="class_q_c_p_curve"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>QCPErrorBars</label>
        <link refid="class_q_c_p_error_bars"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QCPFinancial</label>
        <link refid="class_q_c_p_financial"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QCPGraph</label>
        <link refid="class_q_c_p_graph"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>QCPStatisticalBox</label>
        <link refid="class_q_c_p_statistical_box"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QCPAbstractPlottable</label>
        <link refid="class_q_c_p_abstract_plottable"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>mSelection</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>mSelectionDecorator</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="14" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>QCPDataSelection</label>
        <link refid="class_q_c_p_data_selection"/>
      </node>
      <node id="12">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="11">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="21">
        <label>QCPScatterStyle</label>
        <link refid="class_q_c_p_scatter_style"/>
      </node>
      <node id="20">
        <label>QCPSelectionDecorator</label>
        <link refid="class_q_c_p_selection_decorator"/>
        <childnode refid="21" relation="usage">
          <edgelabel>mScatterStyle</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>mPlottable</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
      <node id="5">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="3458" column="1" bodyfile="qcustomplot.h" bodystart="3459" bodyend="3559"/>
    <listofallmembers>
      <member refid="class_q_c_p_abstract_plottable_1aa64e93cb5b606d8110d2cc0a349bb30f" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>addToLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a70f8cabfd808f7d5204b9f18c45c13f5" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>addToLegend</name></member>
      <member refid="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>antialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a022717896dc57b638a7b5a7be7212ba9" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>antialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a795370db6b1309de0ab60b633efb5ec2" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>antialiasedScatters</name></member>
      <member refid="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>applyAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac032077fb0db93d6faa3273d02363398" prot="protected" virt="virtual"><scope>QCPAbstractPlottable</scope><name>applyDefaultAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a8d06a59ea23324cce6330ebf2262c0ed" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>applyFillAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac95f26b15a1e5d9c7bd2c0a46d760fc9" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>applyScattersAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a893b4896dfd92b68b05b2600b80f5826" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>brush</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a635cee3effc07ad421414c76fd83548c" prot="protected" virt="virtual"><scope>QCPAbstractPlottable</scope><name>clipRect</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>coordsToPixels</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a5acb50ae984eef09a7ab92315d2ad708" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>coordsToPixels</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a9b104d9da4f38f934363945c313bf82e" prot="protected" virt="virtual"><scope>QCPAbstractPlottable</scope><name>deselectEvent</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a453f676a5cee7bf846c5f0fa05ea84b3" prot="protected" virt="pure-virtual"><scope>QCPAbstractPlottable</scope><name>draw</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a71c259f4f96533d12df152c446b17425" prot="protected" virt="pure-virtual"><scope>QCPAbstractPlottable</scope><name>drawLegendIcon</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a56b4d9000f4de0de86c566c84eb05a21" prot="public" virt="pure-virtual"><scope>QCPAbstractPlottable</scope><name>getKeyRange</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa81c95aec08d86cdd5407e48b83ab186" prot="public" virt="pure-virtual"><scope>QCPAbstractPlottable</scope><name>getValueRange</name></member>
      <member refid="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>initializeParentPlot</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a53c8b30779771f2c743104e652e74ab1" prot="public" virt="virtual"><scope>QCPAbstractPlottable</scope><name>interface1D</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa6f25b97ee99988fe352f17cb9ed962b" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>keyAxis</name></member>
      <member refid="class_q_c_p_layerable_1a9d4e121a7f1d2314f906fe698209cac9" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>layer</name></member>
      <member refid="class_q_c_p_layerable_1abbf8657cedea73ac1c3499b521c90eba" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>layerChanged</name></member>
      <member refid="class_q_c_p_layerable_1a3ab45a4c76a3333ce42eb217a81733ec" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mAntialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a152ac765bedf927fb240545d11d453ea" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mAntialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa115755e525a8e3a86dc683f9cab755b" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mAntialiasedScatters</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a33f00674c0161c13315ab9da0895418e" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mBrush</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mKeyAxis</name></member>
      <member refid="class_q_c_p_layerable_1aa38ec5891aff0f50b36fd63e9372a0cd" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mLayer</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac29ffef424e2488675930de18cde612a" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mName</name></member>
      <member refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" prot="protected" virt="virtual"><scope>QCPAbstractPlottable</scope><name>mouseDoubleClickEvent</name></member>
      <member refid="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4" prot="protected" virt="virtual"><scope>QCPAbstractPlottable</scope><name>mouseMoveEvent</name></member>
      <member refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376" prot="protected" virt="virtual"><scope>QCPAbstractPlottable</scope><name>mousePressEvent</name></member>
      <member refid="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c" prot="protected" virt="virtual"><scope>QCPAbstractPlottable</scope><name>mouseReleaseEvent</name></member>
      <member refid="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>moveToLayer</name></member>
      <member refid="class_q_c_p_layerable_1a3291445a980053e2d17a21d15957624e" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mParentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a67bc0622fd1b9fa14e54c14922dcec66" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mPen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3944521f7bec90974737c9d192fc57ba" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mSelectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a206aa62c9eba32c82e892b29cdbf6314" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mSelection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a0dbc731cab717f4ff67b4ca100c74046" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mSelectionDecorator</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2901452ca4aea911a1827717934a4bda" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mValueAxis</name></member>
      <member refid="class_q_c_p_layerable_1a62e3aed8427d6ce3ccf716f285106cb3" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a52c226eefcb1920240eeabae574d28c0" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>name</name></member>
      <member refid="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>parentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1a36ed5b292b90934b524a4e5866a3526c" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layerable_1ab20b7dbd8e0249ed61adb9622c427382" prot="protected" virt="virtual"><scope>QCPAbstractPlottable</scope><name>parentPlotInitialized</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ad5972efc31344e5a7a78ab4f8864b2d3" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>pen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3903c1120ab5c27e7fa46b597ef267bd" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>pixelsToCoords</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a28d32c0062b9450847851ffdee1c5f69" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>pixelsToCoords</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af78a036e40db6f53a31abadc5323715a" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>QCPAbstractPlottable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af123edeca169ec7a31958a1d714e1a8a" prot="private" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>QCPAxis</name></member>
      <member refid="class_q_c_p_layerable_1a4f87f420cb2597e2b393aab934d2f099" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a104c78e91302afd6842a903e472f552f" prot="private" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>QCPPlottableLegendItem</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a1cdf9df76adcfae45261690aa0ca2198" prot="private" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>QCustomPlot</name></member>
      <member refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>realVisibility</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3cc235007e2343a65ad4f463767e0e20" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>removeFromLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac95fb2604d9106d0852ad9ceb326fe8c" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>removeFromLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>rescaleAxes</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ae96b83c961e257da116c6acf9c7da308" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>rescaleKeyAxis</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a714eaf36b12434cd71846215504db82e" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>rescaleValueAxis</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a016653741033bd332d1d4c3c725cc284" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>selectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a663b1a44123c8340ac041a29d1e2c973" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>selectableChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a0b3b514474fe93354fc74cfc144184b4" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>selected</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829" prot="protected" virt="virtual"><scope>QCPAbstractPlottable</scope><name>selectEvent</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a040bf09f41d456284cfd39cc37aa068f" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>selection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af80ad8531642e786b6f4fad551c203c4" prot="protected" virt="virtual"><scope>QCPAbstractPlottable</scope><name>selectionCategory</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3af66432b1dca93b28e00e78a8c7c1d9" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>selectionChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a787a9c39421059006891744b731fa473" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>selectionChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7861518e47ca0c6a0c386032c2db075e" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>selectionDecorator</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a8e4964b629802ce50e1427c7fb21d35b" prot="public" virt="pure-virtual"><scope>QCPAbstractPlottable</scope><name>selectTest</name></member>
      <member refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setAntialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a089d6b5577120239b55c39ed27c39536" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setAntialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2f03f067ede2ed4da6f7d0e4777a3f02" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setAntialiasedScatters</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setBrush</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a8524fa2994c63c0913ebd9bb2ffa3920" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setKeyAxis</name></member>
      <member refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ab79c7ba76bc7fa89a4b3580e12149f1f" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setName</name></member>
      <member refid="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setParentLayerable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setPen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setSelectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setSelection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a20e266ad646f8c4a7e4631040510e5d9" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setSelectionDecorator</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a71626a07367e241ec62ad2c34baf21cb" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setValueAxis</name></member>
      <member refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a842b3831660d3e33b73863fd133889dd" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>valueAxis</name></member>
      <member refid="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable</scope><name>visible</name></member>
      <member refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022" prot="protected" virt="virtual"><scope>QCPAbstractPlottable</scope><name>wheelEvent</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3223d1e2073bd1d3516863a1dce554b0" prot="public" virt="virtual"><scope>QCPAbstractPlottable</scope><name>~QCPAbstractPlottable</name></member>
      <member refid="class_q_c_p_layerable_1a4231cf5b3601d6d3a5781283e7a9735b" prot="public" virt="virtual"><scope>QCPAbstractPlottable</scope><name>~QCPLayerable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
