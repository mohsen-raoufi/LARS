<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_statistical_box" kind="class" language="C++" prot="public">
    <compoundname>QCPStatisticalBox</compoundname>
    <basecompoundref refid="class_q_c_p_abstract_plottable1_d" prot="public" virt="non-virtual">QCPAbstractPlottable1D&lt; QCPStatisticalBoxData &gt;</basecompoundref>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_statistical_box_1af365e40b0f706c3d76f857c7957f629d" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double QCPStatisticalBox::mWidth</definition>
        <argsstring></argsstring>
        <name>mWidth</name>
        <qualifiedname>QCPStatisticalBox::mWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5955" column="10" bodyfile="qcustomplot.h" bodystart="5955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_statistical_box_1a4d166474f845d5db626e8b11a0815a6f" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double QCPStatisticalBox::mWhiskerWidth</definition>
        <argsstring></argsstring>
        <name>mWhiskerWidth</name>
        <qualifiedname>QCPStatisticalBox::mWhiskerWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5956" column="10" bodyfile="qcustomplot.h" bodystart="5956" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_statistical_box_1a25b7552499f0f090fcff02858b2265a5" prot="protected" static="no" mutable="no">
        <type>QPen</type>
        <definition>QPen QCPStatisticalBox::mWhiskerPen</definition>
        <argsstring></argsstring>
        <name>mWhiskerPen</name>
        <qualifiedname>QCPStatisticalBox::mWhiskerPen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5957" column="8" bodyfile="qcustomplot.h" bodystart="5957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_statistical_box_1aa719b1d722a9f82364df1497a6dc1da8" prot="protected" static="no" mutable="no">
        <type>QPen</type>
        <definition>QPen QCPStatisticalBox::mWhiskerBarPen</definition>
        <argsstring></argsstring>
        <name>mWhiskerBarPen</name>
        <qualifiedname>QCPStatisticalBox::mWhiskerBarPen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5957" column="20" bodyfile="qcustomplot.h" bodystart="5957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_statistical_box_1a714bb91efb423c7b7ec3a6a50c2910b9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPStatisticalBox::mWhiskerAntialiased</definition>
        <argsstring></argsstring>
        <name>mWhiskerAntialiased</name>
        <qualifiedname>QCPStatisticalBox::mWhiskerAntialiased</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5958" column="8" bodyfile="qcustomplot.h" bodystart="5958" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_statistical_box_1a1af5b601049c575f778ae270f40c9443" prot="protected" static="no" mutable="no">
        <type>QPen</type>
        <definition>QPen QCPStatisticalBox::mMedianPen</definition>
        <argsstring></argsstring>
        <name>mMedianPen</name>
        <qualifiedname>QCPStatisticalBox::mMedianPen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5959" column="8" bodyfile="qcustomplot.h" bodystart="5959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_statistical_box_1ae102e4187e1e6ba1f2df0f622b5171a4" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_scatter_style" kindref="compound">QCPScatterStyle</ref></type>
        <definition>QCPScatterStyle QCPStatisticalBox::mOutlierStyle</definition>
        <argsstring></argsstring>
        <name>mOutlierStyle</name>
        <qualifiedname>QCPStatisticalBox::mOutlierStyle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5960" column="19" bodyfile="qcustomplot.h" bodystart="5960" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_c_p_statistical_box_1a1cdf9df76adcfae45261690aa0ca2198" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCustomPlot</definition>
        <argsstring></argsstring>
        <name>QCustomPlot</name>
        <qualifiedname>QCPStatisticalBox::QCustomPlot</qualifiedname>
        <param>
          <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5975" column="16" bodyfile="qcustomplot.h" bodystart="5975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_statistical_box_1a8429035e7adfbd7f05805a6530ad5e3b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPLegend</definition>
        <argsstring></argsstring>
        <name>QCPLegend</name>
        <qualifiedname>QCPStatisticalBox::QCPLegend</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5976" column="16" bodyfile="qcustomplot.h" bodystart="5976" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a75c2b3e7fcd0741cc981693a2ba63b27" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPStatisticalBox::QCPStatisticalBox</definition>
        <argsstring>(QCPAxis *keyAxis, QCPAxis *valueAxis)</argsstring>
        <name>QCPStatisticalBox</name>
        <qualifiedname>QCPStatisticalBox::QCPStatisticalBox</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>keyAxis</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>valueAxis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a statistical box which uses <emphasis>keyAxis</emphasis> as its key axis (&quot;x&quot;) and <emphasis>valueAxis</emphasis> as its value axis (&quot;y&quot;). <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> must reside in the same <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance and not have the same orientation. If either of these restrictions is violated, a corresponding message is printed to the debug output (qDebug), the construction is not aborted, though.</para>
<para>The created <ref refid="class_q_c_p_statistical_box" kindref="compound">QCPStatisticalBox</ref> is automatically registered with the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance inferred from <emphasis>keyAxis</emphasis>. This <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance takes ownership of the <ref refid="class_q_c_p_statistical_box" kindref="compound">QCPStatisticalBox</ref>, so do not delete it manually but use <ref refid="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2" kindref="member">QCustomPlot::removePlottable()</ref> instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5920" column="12" bodyfile="qcustomplot.cpp" bodystart="25292" bodyend="25304"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QSharedPointer&lt; <ref refid="class_q_c_p_data_container" kindref="compound">QCPStatisticalBoxDataContainer</ref> &gt;</type>
        <definition>QSharedPointer&lt; QCPStatisticalBoxDataContainer &gt; QCPStatisticalBox::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <qualifiedname>QCPStatisticalBox::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a shared pointer to the internal data storage of type QCPStatisticalBoxDataContainer. You may use it to directly manipulate the data, which may be more convenient and faster than using the regular <ref refid="class_q_c_p_statistical_box_1a08a6da55822bad825ee25a8069b9b52f" kindref="member">setData</ref> or <ref refid="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478" kindref="member">addData</ref> methods. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5923" column="18" bodyfile="qcustomplot.h" bodystart="5923" bodyend="5923"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1ae589b7481dec6ef8e50ebb6492d296f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double QCPStatisticalBox::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <qualifiedname>QCPStatisticalBox::width</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5924" column="10" bodyfile="qcustomplot.h" bodystart="5924" bodyend="5924"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1aacfa6686c7cf4af18794ec02354f4782" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double QCPStatisticalBox::whiskerWidth</definition>
        <argsstring>() const</argsstring>
        <name>whiskerWidth</name>
        <qualifiedname>QCPStatisticalBox::whiskerWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5925" column="10" bodyfile="qcustomplot.h" bodystart="5925" bodyend="5925"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a67e5144f07645fe25c31001c460817fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPen</type>
        <definition>QPen QCPStatisticalBox::whiskerPen</definition>
        <argsstring>() const</argsstring>
        <name>whiskerPen</name>
        <qualifiedname>QCPStatisticalBox::whiskerPen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5926" column="8" bodyfile="qcustomplot.h" bodystart="5926" bodyend="5926"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a47ed9ad9d2ca65640319a2f071982ed4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPen</type>
        <definition>QPen QCPStatisticalBox::whiskerBarPen</definition>
        <argsstring>() const</argsstring>
        <name>whiskerBarPen</name>
        <qualifiedname>QCPStatisticalBox::whiskerBarPen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5927" column="8" bodyfile="qcustomplot.h" bodystart="5927" bodyend="5927"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a2015a8ea758cf65a41d4a6c52a20696b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPStatisticalBox::whiskerAntialiased</definition>
        <argsstring>() const</argsstring>
        <name>whiskerAntialiased</name>
        <qualifiedname>QCPStatisticalBox::whiskerAntialiased</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5928" column="8" bodyfile="qcustomplot.h" bodystart="5928" bodyend="5928"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1af767bc7b6b477d005535314b35aca683" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPen</type>
        <definition>QPen QCPStatisticalBox::medianPen</definition>
        <argsstring>() const</argsstring>
        <name>medianPen</name>
        <qualifiedname>QCPStatisticalBox::medianPen</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5929" column="8" bodyfile="qcustomplot.h" bodystart="5929" bodyend="5929"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1aef92e38fcb8e5041a44c2e01886e3b66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_scatter_style" kindref="compound">QCPScatterStyle</ref></type>
        <definition>QCPScatterStyle QCPStatisticalBox::outlierStyle</definition>
        <argsstring>() const</argsstring>
        <name>outlierStyle</name>
        <qualifiedname>QCPStatisticalBox::outlierStyle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5930" column="19" bodyfile="qcustomplot.h" bodystart="5930" bodyend="5930"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a08a6da55822bad825ee25a8069b9b52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::setData</definition>
        <argsstring>(QSharedPointer&lt; QCPStatisticalBoxDataContainer &gt; data)</argsstring>
        <name>setData</name>
        <qualifiedname>QCPStatisticalBox::setData</qualifiedname>
        <param>
          <type>QSharedPointer&lt; <ref refid="class_q_c_p_data_container" kindref="compound">QCPStatisticalBoxDataContainer</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Replaces the current data container with the provided <emphasis>data</emphasis> container.</para>
<para>Since a QSharedPointer is used, multiple QCPStatisticalBoxes may share the same data container safely. Modifying the data in the container will then affect all statistical boxes that share the container. Sharing can be achieved by simply exchanging the data containers wrapped in shared pointers: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting></para>
<para>If you do not wish to share containers, but create a copy from an existing container, rather use the <ref refid="class_q_c_p_data_container_1ae7042bd534fc3ce7befa2ce3f790b5bf" kindref="member">QCPDataContainer&lt;DataType&gt;::set</ref> method on the statistical box data container directly: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting></para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478" kindref="member">addData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5933" column="8" bodyfile="qcustomplot.cpp" bodystart="25322" bodyend="25325"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a4ae198e66243d8cc57ad8893c37bf9d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::setData</definition>
        <argsstring>(const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;minimum, const QVector&lt; double &gt; &amp;lowerQuartile, const QVector&lt; double &gt; &amp;median, const QVector&lt; double &gt; &amp;upperQuartile, const QVector&lt; double &gt; &amp;maximum, bool alreadySorted=false)</argsstring>
        <name>setData</name>
        <qualifiedname>QCPStatisticalBox::setData</qualifiedname>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>minimum</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>lowerQuartile</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>median</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>upperQuartile</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>maximum</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alreadySorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Replaces the current data with the provided points in <emphasis>keys</emphasis>, <emphasis>minimum</emphasis>, <emphasis>lowerQuartile</emphasis>, <emphasis>median</emphasis>, <emphasis>upperQuartile</emphasis> and <emphasis>maximum</emphasis>. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>
<para>If you can guarantee that the passed data points are sorted by <emphasis>keys</emphasis> in ascending order, you can set <emphasis>alreadySorted</emphasis> to true, to improve performance by saving a sorting run.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478" kindref="member">addData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5934" column="8" bodyfile="qcustomplot.cpp" bodystart="25337" bodyend="25341"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a0b62775bd67301b1eba5c785f2b26f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::setWidth</definition>
        <argsstring>(double width)</argsstring>
        <name>setWidth</name>
        <qualifiedname>QCPStatisticalBox::setWidth</qualifiedname>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the width of the boxes in key coordinates.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_statistical_box_1adf378812446bd66f34d1f7f293d991cd" kindref="member">setWhiskerWidth</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5935" column="8" bodyfile="qcustomplot.cpp" bodystart="25348" bodyend="25351"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1adf378812446bd66f34d1f7f293d991cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::setWhiskerWidth</definition>
        <argsstring>(double width)</argsstring>
        <name>setWhiskerWidth</name>
        <qualifiedname>QCPStatisticalBox::setWhiskerWidth</qualifiedname>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the width of the whiskers in key coordinates.</para>
<para>Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_statistical_box_1a0b62775bd67301b1eba5c785f2b26f14" kindref="member">setWidth</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5936" column="8" bodyfile="qcustomplot.cpp" bodystart="25361" bodyend="25364"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a4a5034cb3b9b040444df05ab1684620b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::setWhiskerPen</definition>
        <argsstring>(const QPen &amp;pen)</argsstring>
        <name>setWhiskerPen</name>
        <qualifiedname>QCPStatisticalBox::setWhiskerPen</qualifiedname>
        <param>
          <type>const QPen &amp;</type>
          <declname>pen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the pen used for drawing the whisker backbone.</para>
<para>Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum.</para>
<para>Make sure to set the <computeroutput>capStyle</computeroutput> of the passed <emphasis>pen</emphasis> to <computeroutput>Qt::FlatCap</computeroutput>. Otherwise the backbone line might exceed the whisker bars by a few pixels due to the pen cap being not perfectly flat.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_statistical_box_1aa8d3e503897788e1abf68dc74b5f147f" kindref="member">setWhiskerBarPen</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5937" column="8" bodyfile="qcustomplot.cpp" bodystart="25377" bodyend="25380"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1aa8d3e503897788e1abf68dc74b5f147f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::setWhiskerBarPen</definition>
        <argsstring>(const QPen &amp;pen)</argsstring>
        <name>setWhiskerBarPen</name>
        <qualifiedname>QCPStatisticalBox::setWhiskerBarPen</qualifiedname>
        <param>
          <type>const QPen &amp;</type>
          <declname>pen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the pen used for drawing the whisker bars. Those are the lines parallel to the key axis at each end of the whisker backbone.</para>
<para>Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_statistical_box_1a4a5034cb3b9b040444df05ab1684620b" kindref="member">setWhiskerPen</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5938" column="8" bodyfile="qcustomplot.cpp" bodystart="25391" bodyend="25394"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a61bcd458fba002f72304d11319051843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::setWhiskerAntialiased</definition>
        <argsstring>(bool enabled)</argsstring>
        <name>setWhiskerAntialiased</name>
        <qualifiedname>QCPStatisticalBox::setWhiskerAntialiased</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the statistical boxes whiskers are drawn with antialiasing or not.</para>
<para>Note that antialiasing settings may be overridden by <ref refid="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8" kindref="member">QCustomPlot::setAntialiasedElements</ref> and <ref refid="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24" kindref="member">QCustomPlot::setNotAntialiasedElements</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5939" column="8" bodyfile="qcustomplot.cpp" bodystart="25402" bodyend="25405"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a7260ac55b669f5d0a74f16d5ca84c52c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::setMedianPen</definition>
        <argsstring>(const QPen &amp;pen)</argsstring>
        <name>setMedianPen</name>
        <qualifiedname>QCPStatisticalBox::setMedianPen</qualifiedname>
        <param>
          <type>const QPen &amp;</type>
          <declname>pen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the pen used for drawing the median indicator line inside the statistical boxes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5940" column="8" bodyfile="qcustomplot.cpp" bodystart="25410" bodyend="25413"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1ad5241943422eb8e58360a97e99ad6aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::setOutlierStyle</definition>
        <argsstring>(const QCPScatterStyle &amp;style)</argsstring>
        <name>setOutlierStyle</name>
        <qualifiedname>QCPStatisticalBox::setOutlierStyle</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_scatter_style" kindref="compound">QCPScatterStyle</ref> &amp;</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the appearance of the outlier data points.</para>
<para>Outliers can be specified with the method <ref refid="class_q_c_p_statistical_box_1a026f2790b530d6f29312254ecb1e7c1e" kindref="member">addData(double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const QVector&lt;double&gt; &amp;outliers)</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5941" column="8" bodyfile="qcustomplot.cpp" bodystart="25421" bodyend="25424"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::addData</definition>
        <argsstring>(const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;minimum, const QVector&lt; double &gt; &amp;lowerQuartile, const QVector&lt; double &gt; &amp;median, const QVector&lt; double &gt; &amp;upperQuartile, const QVector&lt; double &gt; &amp;maximum, bool alreadySorted=false)</argsstring>
        <name>addData</name>
        <qualifiedname>QCPStatisticalBox::addData</qualifiedname>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>minimum</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>lowerQuartile</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>median</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>upperQuartile</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>maximum</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alreadySorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds the provided points in <emphasis>keys</emphasis>, <emphasis>minimum</emphasis>, <emphasis>lowerQuartile</emphasis>, <emphasis>median</emphasis>, <emphasis>upperQuartile</emphasis> and <emphasis>maximum</emphasis> to the current data. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>
<para>If you can guarantee that the passed data points are sorted by <emphasis>keys</emphasis> in ascending order, you can set <emphasis>alreadySorted</emphasis> to true, to improve performance by saving a sorting run.</para>
<para>Alternatively, you can also access and modify the data directly via the <ref refid="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc" kindref="member">data</ref> method, which returns a pointer to the internal data container. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5944" column="8" bodyfile="qcustomplot.cpp" bodystart="25438" bodyend="25461"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a026f2790b530d6f29312254ecb1e7c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::addData</definition>
        <argsstring>(double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const QVector&lt; double &gt; &amp;outliers=QVector&lt; double &gt;())</argsstring>
        <name>addData</name>
        <qualifiedname>QCPStatisticalBox::addData</qualifiedname>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minimum</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lowerQuartile</declname>
        </param>
        <param>
          <type>double</type>
          <declname>median</declname>
        </param>
        <param>
          <type>double</type>
          <declname>upperQuartile</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maximum</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>outliers</declname>
          <defval>QVector&lt; double &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds the provided data point as <emphasis>key</emphasis>, <emphasis>minimum</emphasis>, <emphasis>lowerQuartile</emphasis>, <emphasis>median</emphasis>, <emphasis>upperQuartile</emphasis> and <emphasis>maximum</emphasis> to the current data.</para>
<para>Alternatively, you can also access and modify the data directly via the <ref refid="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc" kindref="member">data</ref> method, which returns a pointer to the internal data container. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5945" column="8" bodyfile="qcustomplot.cpp" bodystart="25471" bodyend="25474"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a42febad6ad5e924a151434cc434b4ffc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>QCPDataSelection QCPStatisticalBox::selectTestRect</definition>
        <argsstring>(const QRectF &amp;rect, bool onlySelectable) const Q_DECL_OVERRIDE</argsstring>
        <name>selectTestRect</name>
        <qualifiedname>QCPStatisticalBox::selectTestRect</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded">selectTestRect</reimplements>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a data selection containing all the data points of this plottable which are contained (or hit by) <emphasis>rect</emphasis>. This is used mainly in the selection rect interaction for data selection (data selection mechanism).</para>
<para>If <emphasis>onlySelectable</emphasis> is true, an empty <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref> is returned if this plottable is not selectable (i.e. if <ref refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" kindref="member">QCPAbstractPlottable::setSelectable</ref> is <ref refid="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038aa64628e338a2dd1e6f0dc84dec0b63fe" kindref="member">QCP::stNone</ref>).</para>
<para><simplesect kind="note"><para><emphasis>rect</emphasis> must be a normalized rect (positive or zero width and height). This is especially important when using the rect of <ref refid="class_q_c_p_selection_rect_1a15a43542e1f7b953a44c260b419e6d2c" kindref="member">QCPSelectionRect::accepted</ref>, which is not necessarily normalized. Use <computeroutput>QRect::normalized()</computeroutput> when passing a rect which might not be normalized.    </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5948" column="28" bodyfile="qcustomplot.cpp" bodystart="25479" bodyend="25497"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1abefd8d3e0adf21c198cfc9615ddc8df1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double QCPStatisticalBox::selectTest</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable, QVariant *details=nullptr) const Q_DECL_OVERRIDE</argsstring>
        <name>selectTest</name>
        <qualifiedname>QCPStatisticalBox::selectTest</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable1_d_1a2f169c3c2989e5d08ec7a9e3eb56a261">selectTest</reimplements>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <param>
          <type>QVariant *</type>
          <declname>details</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implements a selectTest specific to this plottable&apos;s point geometry.</para>
<para>If <emphasis>details</emphasis> is not 0, it will be set to a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref>, describing the closest data point to <emphasis>pos</emphasis>.</para>
<para>\seebaseclassmethod <ref refid="class_q_c_p_abstract_plottable_1a8e4964b629802ce50e1427c7fb21d35b" kindref="member">QCPAbstractPlottable::selectTest</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5949" column="18" bodyfile="qcustomplot.cpp" bodystart="25507" bodyend="25555"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a77d2d13301dfe60c13adfaa17fc1802f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>QCPRange QCPStatisticalBox::getKeyRange</definition>
        <argsstring>(bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE</argsstring>
        <name>getKeyRange</name>
        <qualifiedname>QCPStatisticalBox::getKeyRange</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable_1a56b4d9000f4de0de86c566c84eb05a21">getKeyRange</reimplements>
        <param>
          <type>bool &amp;</type>
          <declname>foundRange</declname>
        </param>
        <param>
          <type><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9" kindref="member">QCP::SignDomain</ref></type>
          <declname>inSignDomain</declname>
          <defval><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the coordinate range that all data in this plottable span in the key axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> or <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f" kindref="member">QCP::sdPositive</ref> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>
<para>Note that <emphasis>foundRange</emphasis> is not the same as <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" kindref="member">rescaleAxes</ref>, <ref refid="class_q_c_p_statistical_box_1ab3388a21d0c2e86fbc0cba9c06ceb49b" kindref="member">getValueRange</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5950" column="20" bodyfile="qcustomplot.cpp" bodystart="25558" bodyend="25570"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1ab3388a21d0c2e86fbc0cba9c06ceb49b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>QCPRange QCPStatisticalBox::getValueRange</definition>
        <argsstring>(bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &amp;inKeyRange=QCPRange()) const Q_DECL_OVERRIDE</argsstring>
        <name>getValueRange</name>
        <qualifiedname>QCPStatisticalBox::getValueRange</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable_1aa81c95aec08d86cdd5407e48b83ab186">getValueRange</reimplements>
        <param>
          <type>bool &amp;</type>
          <declname>foundRange</declname>
        </param>
        <param>
          <type><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9" kindref="member">QCP::SignDomain</ref></type>
          <declname>inSignDomain</declname>
          <defval><ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref></defval>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref> &amp;</type>
          <declname>inKeyRange</declname>
          <defval><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the coordinate range that the data points in the specified key range (<emphasis>inKeyRange</emphasis>) span in the value axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> or <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f" kindref="member">QCP::sdPositive</ref> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829" kindref="member">QCP::sdNegative</ref> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <ref refid="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24" kindref="member">QCP::sdBoth</ref> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>
<para>If <emphasis>inKeyRange</emphasis> has both lower and upper bound set to zero (is equal to <computeroutput><ref refid="class_q_c_p_range" kindref="compound">QCPRange()</ref></computeroutput>), all data points are considered, without any restriction on the keys.</para>
<para>Note that <emphasis>foundRange</emphasis> is not the same as <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <ref refid="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0" kindref="member">QCPRange::validRange</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" kindref="member">rescaleAxes</ref>, <ref refid="class_q_c_p_statistical_box_1a77d2d13301dfe60c13adfaa17fc1802f" kindref="member">getKeyRange</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5951" column="20" bodyfile="qcustomplot.cpp" bodystart="25573" bodyend="25576"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_statistical_box_1afcff35fa79728cfe10e80e0702014fea" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::draw</definition>
        <argsstring>(QCPPainter *painter) Q_DECL_OVERRIDE</argsstring>
        <name>draw</name>
        <qualifiedname>QCPStatisticalBox::draw</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable_1a453f676a5cee7bf846c5f0fa05ea84b3">draw</reimplements>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5963" column="16" bodyfile="qcustomplot.cpp" bodystart="25579" bodyend="25634"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1ad286c63a79c21d5231a4b6c6fdbb914f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::drawLegendIcon</definition>
        <argsstring>(QCPPainter *painter, const QRectF &amp;rect) const Q_DECL_OVERRIDE</argsstring>
        <name>drawLegendIcon</name>
        <qualifiedname>QCPStatisticalBox::drawLegendIcon</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable_1a71c259f4f96533d12df152c446b17425">drawLegendIcon</reimplements>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5964" column="16" bodyfile="qcustomplot.cpp" bodystart="25637" bodyend="25646"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a02dc6b561be8203d460d7263da74b8a9" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::drawStatisticalBox</definition>
        <argsstring>(QCPPainter *painter, QCPStatisticalBoxDataContainer::const_iterator it, const QCPScatterStyle &amp;outlierStyle) const</argsstring>
        <name>drawStatisticalBox</name>
        <qualifiedname>QCPStatisticalBox::drawStatisticalBox</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <param>
          <type>QCPStatisticalBoxDataContainer::const_iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_scatter_style" kindref="compound">QCPScatterStyle</ref> &amp;</type>
          <declname>outlierStyle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws the graphical representation of a single statistical box with the data given by the iterator <emphasis>it</emphasis> with the provided <emphasis>painter</emphasis>.</para>
<para>If the statistical box has a set of outlier data points, they are drawn with <emphasis>outlierStyle</emphasis>.</para>
<para><simplesect kind="see"><para>getQuartileBox, getWhiskerBackboneLines, getWhiskerBarLines </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5967" column="16" bodyfile="qcustomplot.cpp" bodystart="25656" bodyend="25679"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a1c24e86384a4aced91d5216fce86b175" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPStatisticalBox::getVisibleDataBounds</definition>
        <argsstring>(QCPStatisticalBoxDataContainer::const_iterator &amp;begin, QCPStatisticalBoxDataContainer::const_iterator &amp;end) const</argsstring>
        <name>getVisibleDataBounds</name>
        <qualifiedname>QCPStatisticalBox::getVisibleDataBounds</qualifiedname>
        <param>
          <type>QCPStatisticalBoxDataContainer::const_iterator &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>QCPStatisticalBoxDataContainer::const_iterator &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5970" column="8" bodyfile="qcustomplot.cpp" bodystart="25695" bodyend="25706"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1aa44482bf991ceca74602294dd9977243" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QRectF</type>
        <definition>QRectF QCPStatisticalBox::getQuartileBox</definition>
        <argsstring>(QCPStatisticalBoxDataContainer::const_iterator it) const</argsstring>
        <name>getQuartileBox</name>
        <qualifiedname>QCPStatisticalBox::getQuartileBox</qualifiedname>
        <param>
          <type>QCPStatisticalBoxDataContainer::const_iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5971" column="10" bodyfile="qcustomplot.cpp" bodystart="25715" bodyend="25721"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1a233c28f8c2464ed104a4d580eedd4c64" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QVector&lt; QLineF &gt;</type>
        <definition>QVector&lt; QLineF &gt; QCPStatisticalBox::getWhiskerBackboneLines</definition>
        <argsstring>(QCPStatisticalBoxDataContainer::const_iterator it) const</argsstring>
        <name>getWhiskerBackboneLines</name>
        <qualifiedname>QCPStatisticalBox::getWhiskerBackboneLines</qualifiedname>
        <param>
          <type>QCPStatisticalBoxDataContainer::const_iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5972" column="11" bodyfile="qcustomplot.cpp" bodystart="25731" bodyend="25737"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_statistical_box_1af478f6e8a5e9ca2f1bbac10a6b73319a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>QVector&lt; QLineF &gt;</type>
        <definition>QVector&lt; QLineF &gt; QCPStatisticalBox::getWhiskerBarLines</definition>
        <argsstring>(QCPStatisticalBoxDataContainer::const_iterator it) const</argsstring>
        <name>getWhiskerBarLines</name>
        <qualifiedname>QCPStatisticalBox::getWhiskerBarLines</qualifiedname>
        <param>
          <type>QCPStatisticalBoxDataContainer::const_iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="5973" column="11" bodyfile="qcustomplot.cpp" bodystart="25746" bodyend="25752"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A plottable representing a single statistical box in a plot. </para>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="QCPStatisticalBox.png"></image>
</para>
<para>To plot data, assign it with the <ref refid="class_q_c_p_statistical_box_1a08a6da55822bad825ee25a8069b9b52f" kindref="member">setData</ref> or <ref refid="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478" kindref="member">addData</ref> functions. Alternatively, you can also access and modify the data via the <ref refid="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc" kindref="member">data</ref> method, which returns a pointer to the internal QCPStatisticalBoxDataContainer.</para>
<para>Additionally each data point can itself have a list of outliers, drawn as scatter points at the key coordinate of the respective statistical box data point. They can either be set by using the respective <ref refid="class_q_c_p_statistical_box_1a026f2790b530d6f29312254ecb1e7c1e" kindref="member">addData</ref> method or accessing the individual data points through <ref refid="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc" kindref="member">data</ref>, and setting the <computeroutput>QVector&lt;double&gt; outliers</computeroutput> of the data points directly.</para>
<sect1 id="class_q_c_p_statistical_box_1qcpstatisticalbox-appearance">
<title>Changing the appearance</title><para>The appearance of each data point box, ranging from the lower to the upper quartile, is controlled via <ref refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" kindref="member">setPen</ref> and <ref refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" kindref="member">setBrush</ref>. You may change the width of the boxes with <ref refid="class_q_c_p_statistical_box_1a0b62775bd67301b1eba5c785f2b26f14" kindref="member">setWidth</ref> in plot coordinates.</para>
<para>Each data point&apos;s visual representation also consists of two whiskers. Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum. The appearance of the whiskers can be modified with: <ref refid="class_q_c_p_statistical_box_1a4a5034cb3b9b040444df05ab1684620b" kindref="member">setWhiskerPen</ref>, <ref refid="class_q_c_p_statistical_box_1aa8d3e503897788e1abf68dc74b5f147f" kindref="member">setWhiskerBarPen</ref>, <ref refid="class_q_c_p_statistical_box_1adf378812446bd66f34d1f7f293d991cd" kindref="member">setWhiskerWidth</ref>. The whisker width is the width of the bar perpendicular to the whisker at the top (for maximum) and bottom (for minimum). If the whisker pen is changed, make sure to set the <computeroutput>capStyle</computeroutput> to <computeroutput>Qt::FlatCap</computeroutput>. Otherwise the backbone line might exceed the whisker bars by a few pixels due to the pen cap being not perfectly flat.</para>
<para>The median indicator line inside the box has its own pen, <ref refid="class_q_c_p_statistical_box_1a7260ac55b669f5d0a74f16d5ca84c52c" kindref="member">setMedianPen</ref>.</para>
<para>The outlier data points are drawn as normal scatter points. Their look can be controlled with <ref refid="class_q_c_p_statistical_box_1ad5241943422eb8e58360a97e99ad6aa7" kindref="member">setOutlierStyle</ref></para>
</sect1>
<sect1 id="class_q_c_p_statistical_box_1qcpstatisticalbox-usage">
<title>Usage</title><para>Like all data representing objects in <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>, the <ref refid="class_q_c_p_statistical_box" kindref="compound">QCPStatisticalBox</ref> is a plottable (<ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref>). So the plottable-interface of <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> applies (<ref refid="class_q_custom_plot_1a32de81ff53e263e785b83b52ecd99d6f" kindref="member">QCustomPlot::plottable</ref>, <ref refid="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2" kindref="member">QCustomPlot::removePlottable</ref>, etc.)</para>
<para>Usually, you first create an instance: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting> which registers it with the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance of the passed axes. Note that this <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance takes ownership of the plottable, so do not delete it manually but use <ref refid="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2" kindref="member">QCustomPlot::removePlottable()</ref> instead. The newly created plottable can be modified, e.g.: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting> </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QCPAbstractPlottable</label>
        <link refid="class_q_c_p_abstract_plottable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPAbstractPlottable1D&lt; QCPStatisticalBoxData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QCPPlottableInterface1D</label>
        <link refid="class_q_c_p_plottable_interface1_d"/>
      </node>
      <node id="1">
        <label>QCPStatisticalBox</label>
        <link refid="class_q_c_p_statistical_box"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QCPAbstractPlottable</label>
        <link refid="class_q_c_p_abstract_plottable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>mSelection</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>mSelectionDecorator</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>QCPAbstractPlottable1D&lt; QCPStatisticalBoxData &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="16" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>QCPDataSelection</label>
        <link refid="class_q_c_p_data_selection"/>
      </node>
      <node id="14">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="24">
        <label>QCPPlottableInterface1D</label>
        <link refid="class_q_c_p_plottable_interface1_d"/>
      </node>
      <node id="13">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="23">
        <label>QCPScatterStyle</label>
        <link refid="class_q_c_p_scatter_style"/>
      </node>
      <node id="22">
        <label>QCPSelectionDecorator</label>
        <link refid="class_q_c_p_selection_decorator"/>
        <childnode refid="23" relation="usage">
          <edgelabel>mScatterStyle</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mPlottable</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QCPStatisticalBox</label>
        <link refid="class_q_c_p_statistical_box"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>mOutlierStyle</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QObject</label>
      </node>
      <node id="7">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="5907" column="1" bodyfile="qcustomplot.h" bodystart="5908" bodyend="5977"/>
    <listofallmembers>
      <member refid="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>addData</name></member>
      <member refid="class_q_c_p_statistical_box_1a026f2790b530d6f29312254ecb1e7c1e" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>addData</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa64e93cb5b606d8110d2cc0a349bb30f" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>addToLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a70f8cabfd808f7d5204b9f18c45c13f5" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>addToLegend</name></member>
      <member refid="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>antialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a022717896dc57b638a7b5a7be7212ba9" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>antialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a795370db6b1309de0ab60b633efb5ec2" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>antialiasedScatters</name></member>
      <member refid="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>applyAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac032077fb0db93d6faa3273d02363398" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>applyDefaultAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a8d06a59ea23324cce6330ebf2262c0ed" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>applyFillAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac95f26b15a1e5d9c7bd2c0a46d760fc9" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>applyScattersAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a893b4896dfd92b68b05b2600b80f5826" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>brush</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a635cee3effc07ad421414c76fd83548c" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>clipRect</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>coordsToPixels</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a5acb50ae984eef09a7ab92315d2ad708" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>coordsToPixels</name></member>
      <member refid="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>data</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ab5dd99e4f1621e7dbd63438e0b02984e" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>dataCount</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1aeb156ebf5d3c8de906b428be30733ad8" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>dataMainKey</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a6be0f657ba85a1688336d76ad649ecf2" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>dataMainValue</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a6ca0699a6af5f25a7565de7c50ce13b2" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>dataPixelPosition</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1aa8277da921b009bce474437d50b4a2d8" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>dataSortKey</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a55f937ba6a63e56e57f0b1a6e85a333a" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>dataValueRange</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a9b104d9da4f38f934363945c313bf82e" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>deselectEvent</name></member>
      <member refid="class_q_c_p_statistical_box_1afcff35fa79728cfe10e80e0702014fea" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>draw</name></member>
      <member refid="class_q_c_p_statistical_box_1ad286c63a79c21d5231a4b6c6fdbb914f" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>drawLegendIcon</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a7adc6c3cccebb5341f11e0c2b7d54206" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>drawPolyline</name></member>
      <member refid="class_q_c_p_statistical_box_1a02dc6b561be8203d460d7263da74b8a9" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>drawStatisticalBox</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>findBegin</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>findEnd</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ae890e62ce403c54f575c73b9529f1af8" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>getDataSegments</name></member>
      <member refid="class_q_c_p_statistical_box_1a77d2d13301dfe60c13adfaa17fc1802f" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>getKeyRange</name></member>
      <member refid="class_q_c_p_statistical_box_1aa44482bf991ceca74602294dd9977243" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>getQuartileBox</name></member>
      <member refid="class_q_c_p_statistical_box_1ab3388a21d0c2e86fbc0cba9c06ceb49b" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>getValueRange</name></member>
      <member refid="class_q_c_p_statistical_box_1a1c24e86384a4aced91d5216fce86b175" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>getVisibleDataBounds</name></member>
      <member refid="class_q_c_p_statistical_box_1a233c28f8c2464ed104a4d580eedd4c64" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>getWhiskerBackboneLines</name></member>
      <member refid="class_q_c_p_statistical_box_1af478f6e8a5e9ca2f1bbac10a6b73319a" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>getWhiskerBarLines</name></member>
      <member refid="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>initializeParentPlot</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1acb01f095cfb292f2cce2257e074554c4" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>interface1D</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa6f25b97ee99988fe352f17cb9ed962b" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>keyAxis</name></member>
      <member refid="class_q_c_p_layerable_1a9d4e121a7f1d2314f906fe698209cac9" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>layer</name></member>
      <member refid="class_q_c_p_layerable_1abbf8657cedea73ac1c3499b521c90eba" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>layerChanged</name></member>
      <member refid="class_q_c_p_layerable_1a3ab45a4c76a3333ce42eb217a81733ec" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mAntialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a152ac765bedf927fb240545d11d453ea" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mAntialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa115755e525a8e3a86dc683f9cab755b" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mAntialiasedScatters</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a33f00674c0161c13315ab9da0895418e" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mBrush</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ac139cf70590707a1fb40eabe97fac246" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mDataContainer</name></member>
      <member refid="class_q_c_p_statistical_box_1af767bc7b6b477d005535314b35aca683" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>medianPen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mKeyAxis</name></member>
      <member refid="class_q_c_p_layerable_1aa38ec5891aff0f50b36fd63e9372a0cd" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mLayer</name></member>
      <member refid="class_q_c_p_statistical_box_1a1af5b601049c575f778ae270f40c9443" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mMedianPen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac29ffef424e2488675930de18cde612a" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mName</name></member>
      <member refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>mouseDoubleClickEvent</name></member>
      <member refid="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>mouseMoveEvent</name></member>
      <member refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>mousePressEvent</name></member>
      <member refid="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>mouseReleaseEvent</name></member>
      <member refid="class_q_c_p_statistical_box_1ae102e4187e1e6ba1f2df0f622b5171a4" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mOutlierStyle</name></member>
      <member refid="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>moveToLayer</name></member>
      <member refid="class_q_c_p_layerable_1a3291445a980053e2d17a21d15957624e" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mParentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a67bc0622fd1b9fa14e54c14922dcec66" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mPen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3944521f7bec90974737c9d192fc57ba" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mSelectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a206aa62c9eba32c82e892b29cdbf6314" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mSelection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a0dbc731cab717f4ff67b4ca100c74046" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mSelectionDecorator</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2901452ca4aea911a1827717934a4bda" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mValueAxis</name></member>
      <member refid="class_q_c_p_layerable_1a62e3aed8427d6ce3ccf716f285106cb3" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_statistical_box_1a714bb91efb423c7b7ec3a6a50c2910b9" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mWhiskerAntialiased</name></member>
      <member refid="class_q_c_p_statistical_box_1aa719b1d722a9f82364df1497a6dc1da8" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mWhiskerBarPen</name></member>
      <member refid="class_q_c_p_statistical_box_1a25b7552499f0f090fcff02858b2265a5" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mWhiskerPen</name></member>
      <member refid="class_q_c_p_statistical_box_1a4d166474f845d5db626e8b11a0815a6f" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mWhiskerWidth</name></member>
      <member refid="class_q_c_p_statistical_box_1af365e40b0f706c3d76f857c7957f629d" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>mWidth</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a52c226eefcb1920240eeabae574d28c0" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>name</name></member>
      <member refid="class_q_c_p_statistical_box_1aef92e38fcb8e5041a44c2e01886e3b66" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>outlierStyle</name></member>
      <member refid="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>parentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1a36ed5b292b90934b524a4e5866a3526c" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layerable_1ab20b7dbd8e0249ed61adb9622c427382" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>parentPlotInitialized</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ad5972efc31344e5a7a78ab4f8864b2d3" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>pen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3903c1120ab5c27e7fa46b597ef267bd" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>pixelsToCoords</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a28d32c0062b9450847851ffdee1c5f69" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>pixelsToCoords</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af78a036e40db6f53a31abadc5323715a" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>QCPAbstractPlottable</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a30b2e50ab0afce65f104ea7a95440315" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>QCPAbstractPlottable1D</name></member>
      <member refid="class_q_c_p_layerable_1a4f87f420cb2597e2b393aab934d2f099" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_statistical_box_1a8429035e7adfbd7f05805a6530ad5e3b" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>QCPLegend</name></member>
      <member refid="class_q_c_p_statistical_box_1a75c2b3e7fcd0741cc981693a2ba63b27" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>QCPStatisticalBox</name></member>
      <member refid="class_q_c_p_statistical_box_1a1cdf9df76adcfae45261690aa0ca2198" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>QCustomPlot</name></member>
      <member refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>realVisibility</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3cc235007e2343a65ad4f463767e0e20" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>removeFromLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac95fb2604d9106d0852ad9ceb326fe8c" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>removeFromLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>rescaleAxes</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ae96b83c961e257da116c6acf9c7da308" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>rescaleKeyAxis</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a714eaf36b12434cd71846215504db82e" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>rescaleValueAxis</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a016653741033bd332d1d4c3c725cc284" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>selectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a663b1a44123c8340ac041a29d1e2c973" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>selectableChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a0b3b514474fe93354fc74cfc144184b4" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>selected</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>selectEvent</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a040bf09f41d456284cfd39cc37aa068f" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>selection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af80ad8531642e786b6f4fad551c203c4" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>selectionCategory</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3af66432b1dca93b28e00e78a8c7c1d9" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>selectionChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a787a9c39421059006891744b731fa473" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>selectionChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7861518e47ca0c6a0c386032c2db075e" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>selectionDecorator</name></member>
      <member refid="class_q_c_p_statistical_box_1abefd8d3e0adf21c198cfc9615ddc8df1" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>selectTest</name></member>
      <member refid="class_q_c_p_statistical_box_1a42febad6ad5e924a151434cc434b4ffc" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>selectTestRect</name></member>
      <member refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setAntialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a089d6b5577120239b55c39ed27c39536" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setAntialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2f03f067ede2ed4da6f7d0e4777a3f02" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setAntialiasedScatters</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setBrush</name></member>
      <member refid="class_q_c_p_statistical_box_1a08a6da55822bad825ee25a8069b9b52f" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setData</name></member>
      <member refid="class_q_c_p_statistical_box_1a4ae198e66243d8cc57ad8893c37bf9d4" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setData</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a8524fa2994c63c0913ebd9bb2ffa3920" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setKeyAxis</name></member>
      <member refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_statistical_box_1a7260ac55b669f5d0a74f16d5ca84c52c" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setMedianPen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ab79c7ba76bc7fa89a4b3580e12149f1f" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setName</name></member>
      <member refid="class_q_c_p_statistical_box_1ad5241943422eb8e58360a97e99ad6aa7" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setOutlierStyle</name></member>
      <member refid="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a" prot="protected" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setParentLayerable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setPen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setSelectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setSelection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a20e266ad646f8c4a7e4631040510e5d9" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setSelectionDecorator</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a71626a07367e241ec62ad2c34baf21cb" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setValueAxis</name></member>
      <member refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_statistical_box_1a61bcd458fba002f72304d11319051843" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setWhiskerAntialiased</name></member>
      <member refid="class_q_c_p_statistical_box_1aa8d3e503897788e1abf68dc74b5f147f" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setWhiskerBarPen</name></member>
      <member refid="class_q_c_p_statistical_box_1a4a5034cb3b9b040444df05ab1684620b" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setWhiskerPen</name></member>
      <member refid="class_q_c_p_statistical_box_1adf378812446bd66f34d1f7f293d991cd" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setWhiskerWidth</name></member>
      <member refid="class_q_c_p_statistical_box_1a0b62775bd67301b1eba5c785f2b26f14" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>setWidth</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1afe0d56e39cc076032922f059b304c092" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>sortKeyIsMainKey</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a842b3831660d3e33b73863fd133889dd" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>valueAxis</name></member>
      <member refid="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>visible</name></member>
      <member refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022" prot="protected" virt="virtual"><scope>QCPStatisticalBox</scope><name>wheelEvent</name></member>
      <member refid="class_q_c_p_statistical_box_1a2015a8ea758cf65a41d4a6c52a20696b" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>whiskerAntialiased</name></member>
      <member refid="class_q_c_p_statistical_box_1a47ed9ad9d2ca65640319a2f071982ed4" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>whiskerBarPen</name></member>
      <member refid="class_q_c_p_statistical_box_1a67e5144f07645fe25c31001c460817fc" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>whiskerPen</name></member>
      <member refid="class_q_c_p_statistical_box_1aacfa6686c7cf4af18794ec02354f4782" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>whiskerWidth</name></member>
      <member refid="class_q_c_p_statistical_box_1ae589b7481dec6ef8e50ebb6492d296f1" prot="public" virt="non-virtual"><scope>QCPStatisticalBox</scope><name>width</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3223d1e2073bd1d3516863a1dce554b0" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>~QCPAbstractPlottable</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ae4d821dbdc530b6910321e53599ec39b" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>~QCPAbstractPlottable1D</name></member>
      <member refid="class_q_c_p_layerable_1a4231cf5b3601d6d3a5781283e7a9735b" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>~QCPLayerable</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1a97508cd3c61b9e8580b9f0d9964f7fb1" prot="public" virt="virtual"><scope>QCPStatisticalBox</scope><name>~QCPPlottableInterface1D</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
