<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classrcsc_1_1_vector2_d" kind="class" language="C++" prot="public">
    <compoundname>rcsc::Vector2D</compoundname>
    <includes refid="geom_2vector__2d_8h" local="no">vector_2d.h</includes>
    <innerclass refid="classrcsc_1_1_vector2_d_1_1_abs_x_cmp" prot="public">rcsc::Vector2D::AbsXCmp</innerclass>
    <innerclass refid="classrcsc_1_1_vector2_d_1_1_abs_y_cmp" prot="public">rcsc::Vector2D::AbsYCmp</innerclass>
    <innerclass refid="classrcsc_1_1_vector2_d_1_1_equal" prot="public">rcsc::Vector2D::Equal</innerclass>
    <innerclass refid="classrcsc_1_1_vector2_d_1_1_is_within" prot="public">rcsc::Vector2D::IsWithin</innerclass>
    <innerclass refid="classrcsc_1_1_vector2_d_1_1_x_cmp" prot="public">rcsc::Vector2D::XCmp</innerclass>
    <innerclass refid="classrcsc_1_1_vector2_d_1_1_x_y_cmp" prot="public">rcsc::Vector2D::XYCmp</innerclass>
    <innerclass refid="classrcsc_1_1_vector2_d_1_1_y_cmp" prot="public">rcsc::Vector2D::YCmp</innerclass>
    <innerclass refid="classrcsc_1_1_vector2_d_1_1_y_x_cmp" prot="public">rcsc::Vector2D::YXCmp</innerclass>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classrcsc_1_1_vector2_d_1ac7acc47ce6d1711b965e761b8657f08f" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>static const double rcsc::Vector2D::EPSILON</definition>
        <argsstring></argsstring>
        <name>EPSILON</name>
        <qualifiedname>rcsc::Vector2D::EPSILON</qualifiedname>
        <briefdescription>
<para>constant threshold value for calculation error </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="56" column="25" bodyfile="ui/geom/vector_2d.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcsc_1_1_vector2_d_1a18594f90dfd518dc086c4b113bae0473" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>static const double rcsc::Vector2D::ERROR_VALUE</definition>
        <argsstring></argsstring>
        <name>ERROR_VALUE</name>
        <qualifiedname>rcsc::Vector2D::ERROR_VALUE</qualifiedname>
        <briefdescription>
<para>constant error value for XY (= std::numeric_limits&lt; doulble &gt;::max()). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="59" column="25" bodyfile="ui/geom/vector_2d.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcsc_1_1_vector2_d_1a75349ff72ea6f94b8c9f1b1039d0143f" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>static const Vector2D rcsc::Vector2D::INVALIDATED</definition>
        <argsstring></argsstring>
        <name>INVALIDATED</name>
        <qualifiedname>rcsc::Vector2D::INVALIDATED</qualifiedname>
        <briefdescription>
<para>invalidated value vector </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="62" column="27" bodyfile="ui/geom/vector_2d.h" bodystart="62" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classrcsc_1_1_vector2_d_1ac02743c785aa86b6e252ed58bf34cb92" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double rcsc::Vector2D::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <qualifiedname>rcsc::Vector2D::x</qualifiedname>
        <briefdescription>
<para>X coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="64" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrcsc_1_1_vector2_d_1a79060507ebe8839850961e00c24d89ef" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double rcsc::Vector2D::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <qualifiedname>rcsc::Vector2D::y</qualifiedname>
        <briefdescription>
<para>Y coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="65" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="65" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a981b85536f58e2f7e94b2350e9b50abc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rcsc::Vector2D::Vector2D</definition>
        <argsstring>()</argsstring>
        <name>Vector2D</name>
        <qualifiedname>rcsc::Vector2D::Vector2D</qualifiedname>
        <briefdescription>
<para>default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="70" column="5" bodyfile="ui/geom/vector_2d.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1afd3781fdc7e415c671e484b4490c2e2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rcsc::Vector2D::Vector2D</definition>
        <argsstring>(const double &amp;xx, const double &amp;yy)</argsstring>
        <name>Vector2D</name>
        <qualifiedname>rcsc::Vector2D::Vector2D</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>xx</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yy</declname>
        </param>
        <briefdescription>
<para>create Vector with XY value directly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xx</parametername>
</parameternamelist>
<parameterdescription>
<para>assigned x value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yy</parametername>
</parameternamelist>
<parameterdescription>
<para>assigned x value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="80" column="5" bodyfile="ui/geom/vector_2d.h" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad06e2da06e025d17a097027dc8c71637" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Vector2D::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <qualifiedname>rcsc::Vector2D::isValid</qualifiedname>
        <briefdescription>
<para>check if this vector is valid or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if component values are validate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="90" column="10" bodyfile="ui/geom/vector_2d.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad238ed0eb9bab0f1058e5acd703def7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::assign</definition>
        <argsstring>(const double &amp;xx, const double &amp;yy)</argsstring>
        <name>assign</name>
        <qualifiedname>rcsc::Vector2D::assign</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>xx</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yy</declname>
        </param>
        <briefdescription>
<para>assign XY value directly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xx</parametername>
</parameternamelist>
<parameterdescription>
<para>assigned x value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yy</parametername>
</parameternamelist>
<parameterdescription>
<para>assigned y value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="101" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="101" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad5850c4e93994149b7474049f1d3d1dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::setPolar</definition>
        <argsstring>(const double &amp;radius, const AngleDeg &amp;dir)</argsstring>
        <name>setPolar</name>
        <qualifiedname>rcsc::Vector2D::setPolar</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>assign XY value from POLAR value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&apos;s radius </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&apos;s angle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="115" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a28e50a6f0efe3f0cb4538569cea41115" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::invalidate</definition>
        <argsstring>()</argsstring>
        <name>invalidate</name>
        <qualifiedname>rcsc::Vector2D::invalidate</qualifiedname>
        <briefdescription>
<para>invalidate this object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="128" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="128" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad681a9e9a550c8e45a38baf3028d6c95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::r2</definition>
        <argsstring>() const</argsstring>
        <name>r2</name>
        <qualifiedname>rcsc::Vector2D::r2</qualifiedname>
        <briefdescription>
<para>get the squared length of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>squared length </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="139" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a403fda959d31351e279fb1899f9919c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::r</definition>
        <argsstring>() const</argsstring>
        <name>r</name>
        <qualifiedname>rcsc::Vector2D::r</qualifiedname>
        <briefdescription>
<para>get the length of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="148" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a932756b8eed06831de559bb79a5b70c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::norm</definition>
        <argsstring>() const</argsstring>
        <name>norm</name>
        <qualifiedname>rcsc::Vector2D::norm</qualifiedname>
        <briefdescription>
<para>get the norm value. this method is equivalent to <ref refid="classrcsc_1_1_vector2_d_1a403fda959d31351e279fb1899f9919c1" kindref="member">r()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>norm value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="158" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a5b918c8f78a205e2d3558c84df6c294e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::norm2</definition>
        <argsstring>() const</argsstring>
        <name>norm2</name>
        <qualifiedname>rcsc::Vector2D::norm2</qualifiedname>
        <briefdescription>
<para>get the squared norm value. this method is equivalent to <ref refid="classrcsc_1_1_vector2_d_1ad681a9e9a550c8e45a38baf3028d6c95" kindref="member">r2()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>squared norm value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="167" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aa91806c085862c17b963495b2bb05e51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <qualifiedname>rcsc::Vector2D::length</qualifiedname>
        <briefdescription>
<para>get the length of vector. this method is equivalent to <ref refid="classrcsc_1_1_vector2_d_1a403fda959d31351e279fb1899f9919c1" kindref="member">r()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="176" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad5dd81b4dcad673086779f1a70a6cc7b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::length2</definition>
        <argsstring>() const</argsstring>
        <name>length2</name>
        <qualifiedname>rcsc::Vector2D::length2</qualifiedname>
        <briefdescription>
<para>get the squared length value. this method is equivalent to <ref refid="classrcsc_1_1_vector2_d_1ad681a9e9a550c8e45a38baf3028d6c95" kindref="member">r2()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>squared length value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="185" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a1b93ccd6f00f7608d912e7ec5ecc640f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref></type>
        <definition>AngleDeg rcsc::Vector2D::th</definition>
        <argsstring>() const</argsstring>
        <name>th</name>
        <qualifiedname>rcsc::Vector2D::th</qualifiedname>
        <briefdescription>
<para>get the angle of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>angle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="194" column="14" bodyfile="ui/geom/vector_2d.h" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aaf8070266a35c0418bda71d8a4de63c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref></type>
        <definition>AngleDeg rcsc::Vector2D::dir</definition>
        <argsstring>() const</argsstring>
        <name>dir</name>
        <qualifiedname>rcsc::Vector2D::dir</qualifiedname>
        <briefdescription>
<para>get the angle of vector. this method is equivalent to <ref refid="classrcsc_1_1_vector2_d_1a1b93ccd6f00f7608d912e7ec5ecc640f" kindref="member">th()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>angle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="203" column="14" bodyfile="ui/geom/vector_2d.h" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a05feb06e87ab9e0810c04c487003cdef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <qualifiedname>rcsc::Vector2D::abs</qualifiedname>
        <briefdescription>
<para>get new vector that XY values were set to absolute value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new vector that all values are absolute. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="212" column="14" bodyfile="ui/geom/vector_2d.h" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aed2114671ef5b13348bc423cdc84bd51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::absX</definition>
        <argsstring>() const</argsstring>
        <name>absX</name>
        <qualifiedname>rcsc::Vector2D::absX</qualifiedname>
        <briefdescription>
<para>get absolute x value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>absolute x value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="221" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a732e6543891c9a0970ef1255487b6bee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::absY</definition>
        <argsstring>() const</argsstring>
        <name>absY</name>
        <qualifiedname>rcsc::Vector2D::absY</qualifiedname>
        <briefdescription>
<para>get absolute y value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>absolute y value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="230" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a40a21f48011a717f2f12f5868e1b977e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::add</definition>
        <argsstring>(const Vector2D &amp;v)</argsstring>
        <name>add</name>
        <qualifiedname>rcsc::Vector2D::add</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>add vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>added vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="240" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="240" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a4f9f980408accd3309a00bdf71eeb12b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::add</definition>
        <argsstring>(const double &amp;xx, const double &amp;yy)</argsstring>
        <name>add</name>
        <qualifiedname>rcsc::Vector2D::add</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>xx</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yy</declname>
        </param>
        <briefdescription>
<para>add XY values respectively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xx</parametername>
</parameternamelist>
<parameterdescription>
<para>added x value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yy</parametername>
</parameternamelist>
<parameterdescription>
<para>added y value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="253" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ab2a425641a0d0ded8b3435bde053f5b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::scale</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>scale</name>
        <qualifiedname>rcsc::Vector2D::scale</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>scale this vector </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>scaling factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>*this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="266" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="266" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aa01307b74ff3e896b7db6b5e99d93fab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::operator+</definition>
        <argsstring>() const</argsstring>
        <name>operator+</name>
        <qualifiedname>rcsc::Vector2D::operator+</qualifiedname>
        <briefdescription>
<para>return this vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference of this vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="278" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a5ccf90d1ad4e0927195eb276a8ff4050" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <qualifiedname>rcsc::Vector2D::operator-</qualifiedname>
        <briefdescription>
<para>create reversed vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new vector that XY values are reversed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="287" column="14" bodyfile="ui/geom/vector_2d.h" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad4a96c5358df59c4703042735addf2df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::operator+=</definition>
        <argsstring>(const Vector2D &amp;v)</argsstring>
        <name>operator+=</name>
        <qualifiedname>rcsc::Vector2D::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>add vector to itself </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>added vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="298" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="298" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a8d71fa5c4bf1ca6e60b0bba090afaaea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::operator-=</definition>
        <argsstring>(const Vector2D &amp;v)</argsstring>
        <name>operator-=</name>
        <qualifiedname>rcsc::Vector2D::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>subtract vector to itself </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>subtract argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="311" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="311" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1abb8bfab9a39d61c2da8170a7e881907d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::operator*=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator*=</name>
        <qualifiedname>rcsc::Vector2D::operator*=</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>multiplied by &apos;scalar&apos; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplication argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="324" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="324" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1af4a06d4c3af631dd4d4ef1d121b78cac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::operator/=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator/=</name>
        <qualifiedname>rcsc::Vector2D::operator/=</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>divided by &apos;scalar&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>division argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="338" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="338" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a9d943eb93298d15f23228cddf3ed909b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::dist2</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>dist2</name>
        <qualifiedname>rcsc::Vector2D::dist2</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>get the squared distance from this to &apos;p&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>target point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>squared distance to &apos;p&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="354" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="354" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a66be32ad63e4915218fb0c98e7f4f10e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::dist</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>dist</name>
        <qualifiedname>rcsc::Vector2D::dist</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>get the distance from this to &apos;p&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>target point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>distance to &apos;p&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="366" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="366" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a3d5bc01819785a8de4058248506a2fc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::reverse</definition>
        <argsstring>()</argsstring>
        <name>reverse</name>
        <qualifiedname>rcsc::Vector2D::reverse</qualifiedname>
        <briefdescription>
<para>reverse vector components </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>*this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="377" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="377" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1af01fdc788e673e338c5748f09e691d68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::reversedVector</definition>
        <argsstring>() const</argsstring>
        <name>reversedVector</name>
        <qualifiedname>rcsc::Vector2D::reversedVector</qualifiedname>
        <briefdescription>
<para>get reversed vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new vector object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="388" column="14" bodyfile="ui/geom/vector_2d.h" bodystart="388" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1acb2fcc4ba42e1d7a57a364b4e8f7994c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::setLength</definition>
        <argsstring>(const double &amp;len)</argsstring>
        <name>setLength</name>
        <qualifiedname>rcsc::Vector2D::setLength</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>set vector length to &apos;len&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>new length to be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="398" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="398" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a731a35a47cd50ee511bfdc71b5fe5ecb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::setLengthVector</definition>
        <argsstring>(const double &amp;len) const</argsstring>
        <name>setLengthVector</name>
        <qualifiedname>rcsc::Vector2D::setLengthVector</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>get new vector that the length is set to &apos;len&apos; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>new length to be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new vector that the length is set to &apos;len&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="415" column="14" bodyfile="ui/geom/vector_2d.h" bodystart="415" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a662f375faff4965656ce8ea06f162831" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <qualifiedname>rcsc::Vector2D::normalize</qualifiedname>
        <briefdescription>
<para>normalize vector. length is set to 1.0. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="424" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="424" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a06ecd9fdbd8faca29a16c459143c2948" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::normalizedVector</definition>
        <argsstring>() const</argsstring>
        <name>normalizedVector</name>
        <qualifiedname>rcsc::Vector2D::normalizedVector</qualifiedname>
        <briefdescription>
<para>get new normalized vector that the length is set to 1.0 but angle is same </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new normalized vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="434" column="14" bodyfile="ui/geom/vector_2d.h" bodystart="434" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a6bb764c9533f5a6efa468368fccc9753" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::rotate</definition>
        <argsstring>(const double &amp;deg)</argsstring>
        <name>rotate</name>
        <qualifiedname>rcsc::Vector2D::rotate</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>deg</declname>
        </param>
        <briefdescription>
<para>rotate this vector with &apos;deg&apos; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deg</parametername>
</parameternamelist>
<parameterdescription>
<para>rotated angle by double type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="444" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="444" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a25ce1d15fb00e92ed9ab3be5dc8d8525" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::rotate</definition>
        <argsstring>(const AngleDeg &amp;angle)</argsstring>
        <name>rotate</name>
        <qualifiedname>rcsc::Vector2D::rotate</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>rotate this vector with &apos;angle&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>rotated angle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="457" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="457" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a79e008cf38a72e8326b7b2c2581fe490" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::rotatedVector</definition>
        <argsstring>(const double &amp;deg) const</argsstring>
        <name>rotatedVector</name>
        <qualifiedname>rcsc::Vector2D::rotatedVector</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>deg</declname>
        </param>
        <briefdescription>
<para>get new vector that is rotated by &apos;deg&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deg</parametername>
</parameternamelist>
<parameterdescription>
<para>rotated angle. double type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new vector rotated by &apos;deg&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="467" column="14" bodyfile="ui/geom/vector_2d.h" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a896f8cee24043c9dd82377de07462214" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::rotatedVector</definition>
        <argsstring>(const AngleDeg &amp;angle) const</argsstring>
        <name>rotatedVector</name>
        <qualifiedname>rcsc::Vector2D::rotatedVector</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>get new vector that is rotated by &apos;angle&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>rotated angle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new vector rotated by &apos;angle&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="477" column="14" bodyfile="ui/geom/vector_2d.h" bodystart="477" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a36809c0cceffc586a34ccec3a742b027" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::setDir</definition>
        <argsstring>(const AngleDeg &amp;dir)</argsstring>
        <name>setDir</name>
        <qualifiedname>rcsc::Vector2D::setDir</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>set vector&apos;s angle to &apos;angle&apos; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>new angle to be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="487" column="15" bodyfile="ui/geom/vector_2d.h" bodystart="487" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aacf2dad96549492a1ed54d84b67fb54f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::innerProduct</definition>
        <argsstring>(const Vector2D &amp;v) const</argsstring>
        <name>innerProduct</name>
        <qualifiedname>rcsc::Vector2D::innerProduct</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>get inner(dot) product with &apos;v&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>target vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of inner product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="500" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="500" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aee2ced93f96e42c758a9a89debc17a2c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::outerProduct</definition>
        <argsstring>(const Vector2D &amp;v) const</argsstring>
        <name>outerProduct</name>
        <qualifiedname>rcsc::Vector2D::outerProduct</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>get virtal outer(cross) product with &apos;v&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>target vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of outer product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="511" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="511" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad872e0c3d54b9b428212a84666fa4707" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Vector2D::equals</definition>
        <argsstring>(const Vector2D &amp;other) const</argsstring>
        <name>equals</name>
        <qualifiedname>rcsc::Vector2D::equals</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if this vector is strictly same as given vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>compared vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if strictly same, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="531" column="10" bodyfile="ui/geom/vector_2d.h" bodystart="531" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1af32636acd667f54e57ea86dc28c9de4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Vector2D::equalsWeakly</definition>
        <argsstring>(const Vector2D &amp;other) const</argsstring>
        <name>equalsWeakly</name>
        <qualifiedname>rcsc::Vector2D::equalsWeakly</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if this vector is weakly same as given vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>compared vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if weakly same, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="542" column="10" bodyfile="ui/geom/vector_2d.h" bodystart="542" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a14ab39cd5943677c79aa43283484cf81" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rcsc::Vector2D::print</definition>
        <argsstring>(std::ostream &amp;os) const</argsstring>
        <name>print</name>
        <qualifiedname>rcsc::Vector2D::print</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>output XY values to ostream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to ostream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to ostream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="616" column="19" bodyfile="ui/geom/vector_2d.h" bodystart="616" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a92aa50f206bb35f0f601d18c4b39ca8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rcsc::Vector2D::printRound</definition>
        <argsstring>(std::ostream &amp;os, const double &amp;prec=0.1) const</argsstring>
        <name>printRound</name>
        <qualifiedname>rcsc::Vector2D::printRound</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>prec</declname>
          <defval>0.1</defval>
        </param>
        <briefdescription>
<para>output rounded XY values to ostream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to ostream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prec</parametername>
</parameternamelist>
<parameterdescription>
<para>precision of output value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to ostream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="628" column="19" bodyfile="ui/geom/vector_2d.h" bodystart="628" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a981b85536f58e2f7e94b2350e9b50abc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rcsc::Vector2D::Vector2D</definition>
        <argsstring>()</argsstring>
        <name>Vector2D</name>
        <qualifiedname>rcsc::Vector2D::Vector2D</qualifiedname>
        <briefdescription>
<para>default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="70" column="5" bodyfile="ui/vector_2d.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1afd3781fdc7e415c671e484b4490c2e2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rcsc::Vector2D::Vector2D</definition>
        <argsstring>(const double &amp;xx, const double &amp;yy)</argsstring>
        <name>Vector2D</name>
        <qualifiedname>rcsc::Vector2D::Vector2D</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>xx</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yy</declname>
        </param>
        <briefdescription>
<para>create Vector with XY value directly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xx</parametername>
</parameternamelist>
<parameterdescription>
<para>assigned x value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yy</parametername>
</parameternamelist>
<parameterdescription>
<para>assigned x value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="80" column="5" bodyfile="ui/vector_2d.h" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad06e2da06e025d17a097027dc8c71637" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Vector2D::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <qualifiedname>rcsc::Vector2D::isValid</qualifiedname>
        <briefdescription>
<para>check if this vector is valid or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if component values are validate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="90" column="10" bodyfile="ui/vector_2d.h" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad238ed0eb9bab0f1058e5acd703def7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::assign</definition>
        <argsstring>(const double &amp;xx, const double &amp;yy)</argsstring>
        <name>assign</name>
        <qualifiedname>rcsc::Vector2D::assign</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>xx</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yy</declname>
        </param>
        <briefdescription>
<para>assign XY value directly. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xx</parametername>
</parameternamelist>
<parameterdescription>
<para>assigned x value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yy</parametername>
</parameternamelist>
<parameterdescription>
<para>assigned y value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="101" column="15" bodyfile="ui/vector_2d.h" bodystart="101" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad5850c4e93994149b7474049f1d3d1dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::setPolar</definition>
        <argsstring>(const double &amp;radius, const AngleDeg &amp;dir)</argsstring>
        <name>setPolar</name>
        <qualifiedname>rcsc::Vector2D::setPolar</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>assign XY value from POLAR value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&apos;s radius </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&apos;s angle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="115" column="15" bodyfile="ui/vector_2d.h" bodystart="115" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a28e50a6f0efe3f0cb4538569cea41115" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::invalidate</definition>
        <argsstring>()</argsstring>
        <name>invalidate</name>
        <qualifiedname>rcsc::Vector2D::invalidate</qualifiedname>
        <briefdescription>
<para>invalidate this object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="128" column="15" bodyfile="ui/vector_2d.h" bodystart="128" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad681a9e9a550c8e45a38baf3028d6c95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::r2</definition>
        <argsstring>() const</argsstring>
        <name>r2</name>
        <qualifiedname>rcsc::Vector2D::r2</qualifiedname>
        <briefdescription>
<para>get the squared length of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>squared length </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="139" column="12" bodyfile="ui/vector_2d.h" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a403fda959d31351e279fb1899f9919c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::r</definition>
        <argsstring>() const</argsstring>
        <name>r</name>
        <qualifiedname>rcsc::Vector2D::r</qualifiedname>
        <briefdescription>
<para>get the length of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="148" column="12" bodyfile="ui/vector_2d.h" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a932756b8eed06831de559bb79a5b70c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::norm</definition>
        <argsstring>() const</argsstring>
        <name>norm</name>
        <qualifiedname>rcsc::Vector2D::norm</qualifiedname>
        <briefdescription>
<para>get the norm value. this method is equivalent to <ref refid="classrcsc_1_1_vector2_d_1a403fda959d31351e279fb1899f9919c1" kindref="member">r()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>norm value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="158" column="12" bodyfile="ui/vector_2d.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a5b918c8f78a205e2d3558c84df6c294e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::norm2</definition>
        <argsstring>() const</argsstring>
        <name>norm2</name>
        <qualifiedname>rcsc::Vector2D::norm2</qualifiedname>
        <briefdescription>
<para>get the squared norm value. this method is equivalent to <ref refid="classrcsc_1_1_vector2_d_1ad681a9e9a550c8e45a38baf3028d6c95" kindref="member">r2()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>squared norm value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="167" column="12" bodyfile="ui/vector_2d.h" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aa91806c085862c17b963495b2bb05e51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <qualifiedname>rcsc::Vector2D::length</qualifiedname>
        <briefdescription>
<para>get the length of vector. this method is equivalent to <ref refid="classrcsc_1_1_vector2_d_1a403fda959d31351e279fb1899f9919c1" kindref="member">r()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>length value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="176" column="12" bodyfile="ui/vector_2d.h" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad5dd81b4dcad673086779f1a70a6cc7b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::length2</definition>
        <argsstring>() const</argsstring>
        <name>length2</name>
        <qualifiedname>rcsc::Vector2D::length2</qualifiedname>
        <briefdescription>
<para>get the squared length value. this method is equivalent to <ref refid="classrcsc_1_1_vector2_d_1ad681a9e9a550c8e45a38baf3028d6c95" kindref="member">r2()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>squared length value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="185" column="12" bodyfile="ui/vector_2d.h" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a1b93ccd6f00f7608d912e7ec5ecc640f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref></type>
        <definition>AngleDeg rcsc::Vector2D::th</definition>
        <argsstring>() const</argsstring>
        <name>th</name>
        <qualifiedname>rcsc::Vector2D::th</qualifiedname>
        <briefdescription>
<para>get the angle of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>angle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="194" column="14" bodyfile="ui/vector_2d.h" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aaf8070266a35c0418bda71d8a4de63c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref></type>
        <definition>AngleDeg rcsc::Vector2D::dir</definition>
        <argsstring>() const</argsstring>
        <name>dir</name>
        <qualifiedname>rcsc::Vector2D::dir</qualifiedname>
        <briefdescription>
<para>get the angle of vector. this method is equivalent to <ref refid="classrcsc_1_1_vector2_d_1a1b93ccd6f00f7608d912e7ec5ecc640f" kindref="member">th()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>angle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="203" column="14" bodyfile="ui/vector_2d.h" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a05feb06e87ab9e0810c04c487003cdef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <qualifiedname>rcsc::Vector2D::abs</qualifiedname>
        <briefdescription>
<para>get new vector that XY values were set to absolute value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new vector that all values are absolute. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="212" column="14" bodyfile="ui/vector_2d.h" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aed2114671ef5b13348bc423cdc84bd51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::absX</definition>
        <argsstring>() const</argsstring>
        <name>absX</name>
        <qualifiedname>rcsc::Vector2D::absX</qualifiedname>
        <briefdescription>
<para>get absolute x value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>absolute x value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="221" column="12" bodyfile="ui/vector_2d.h" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a732e6543891c9a0970ef1255487b6bee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::absY</definition>
        <argsstring>() const</argsstring>
        <name>absY</name>
        <qualifiedname>rcsc::Vector2D::absY</qualifiedname>
        <briefdescription>
<para>get absolute y value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>absolute y value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="230" column="12" bodyfile="ui/vector_2d.h" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a40a21f48011a717f2f12f5868e1b977e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::add</definition>
        <argsstring>(const Vector2D &amp;v)</argsstring>
        <name>add</name>
        <qualifiedname>rcsc::Vector2D::add</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>add vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>added vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="240" column="15" bodyfile="ui/vector_2d.h" bodystart="240" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a4f9f980408accd3309a00bdf71eeb12b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::add</definition>
        <argsstring>(const double &amp;xx, const double &amp;yy)</argsstring>
        <name>add</name>
        <qualifiedname>rcsc::Vector2D::add</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>xx</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>yy</declname>
        </param>
        <briefdescription>
<para>add XY values respectively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xx</parametername>
</parameternamelist>
<parameterdescription>
<para>added x value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yy</parametername>
</parameternamelist>
<parameterdescription>
<para>added y value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="253" column="15" bodyfile="ui/vector_2d.h" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ab2a425641a0d0ded8b3435bde053f5b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::scale</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>scale</name>
        <qualifiedname>rcsc::Vector2D::scale</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>scale this vector </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>scaling factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>*this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="266" column="15" bodyfile="ui/vector_2d.h" bodystart="266" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aa01307b74ff3e896b7db6b5e99d93fab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::operator+</definition>
        <argsstring>() const</argsstring>
        <name>operator+</name>
        <qualifiedname>rcsc::Vector2D::operator+</qualifiedname>
        <briefdescription>
<para>return this vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference of this vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="278" column="15" bodyfile="ui/vector_2d.h" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a5ccf90d1ad4e0927195eb276a8ff4050" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <qualifiedname>rcsc::Vector2D::operator-</qualifiedname>
        <briefdescription>
<para>create reversed vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new vector that XY values are reversed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="287" column="14" bodyfile="ui/vector_2d.h" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad4a96c5358df59c4703042735addf2df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::operator+=</definition>
        <argsstring>(const Vector2D &amp;v)</argsstring>
        <name>operator+=</name>
        <qualifiedname>rcsc::Vector2D::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>add vector to itself </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>added vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="298" column="15" bodyfile="ui/vector_2d.h" bodystart="298" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a8d71fa5c4bf1ca6e60b0bba090afaaea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::operator-=</definition>
        <argsstring>(const Vector2D &amp;v)</argsstring>
        <name>operator-=</name>
        <qualifiedname>rcsc::Vector2D::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>subtract vector to itself </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>subtract argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="311" column="15" bodyfile="ui/vector_2d.h" bodystart="311" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1abb8bfab9a39d61c2da8170a7e881907d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::operator*=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator*=</name>
        <qualifiedname>rcsc::Vector2D::operator*=</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>multiplied by &apos;scalar&apos; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>multiplication argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="324" column="15" bodyfile="ui/vector_2d.h" bodystart="324" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1af4a06d4c3af631dd4d4ef1d121b78cac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>const Vector2D &amp; rcsc::Vector2D::operator/=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator/=</name>
        <qualifiedname>rcsc::Vector2D::operator/=</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>divided by &apos;scalar&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>division argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="338" column="15" bodyfile="ui/vector_2d.h" bodystart="338" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a9d943eb93298d15f23228cddf3ed909b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::dist2</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>dist2</name>
        <qualifiedname>rcsc::Vector2D::dist2</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>get the squared distance from this to &apos;p&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>target point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>squared distance to &apos;p&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="354" column="12" bodyfile="ui/vector_2d.h" bodystart="354" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a66be32ad63e4915218fb0c98e7f4f10e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::dist</definition>
        <argsstring>(const Vector2D &amp;p) const</argsstring>
        <name>dist</name>
        <qualifiedname>rcsc::Vector2D::dist</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>get the distance from this to &apos;p&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>target point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>distance to &apos;p&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="366" column="12" bodyfile="ui/vector_2d.h" bodystart="366" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a3d5bc01819785a8de4058248506a2fc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::reverse</definition>
        <argsstring>()</argsstring>
        <name>reverse</name>
        <qualifiedname>rcsc::Vector2D::reverse</qualifiedname>
        <briefdescription>
<para>reverse vector components </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>*this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="377" column="15" bodyfile="ui/vector_2d.h" bodystart="377" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1af01fdc788e673e338c5748f09e691d68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::reversedVector</definition>
        <argsstring>() const</argsstring>
        <name>reversedVector</name>
        <qualifiedname>rcsc::Vector2D::reversedVector</qualifiedname>
        <briefdescription>
<para>get reversed vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new vector object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="388" column="14" bodyfile="ui/vector_2d.h" bodystart="388" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1acb2fcc4ba42e1d7a57a364b4e8f7994c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::setLength</definition>
        <argsstring>(const double &amp;len)</argsstring>
        <name>setLength</name>
        <qualifiedname>rcsc::Vector2D::setLength</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>set vector length to &apos;len&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>new length to be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="398" column="15" bodyfile="ui/vector_2d.h" bodystart="398" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a731a35a47cd50ee511bfdc71b5fe5ecb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::setLengthVector</definition>
        <argsstring>(const double &amp;len) const</argsstring>
        <name>setLengthVector</name>
        <qualifiedname>rcsc::Vector2D::setLengthVector</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>get new vector that the length is set to &apos;len&apos; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>new length to be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new vector that the length is set to &apos;len&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="415" column="14" bodyfile="ui/vector_2d.h" bodystart="415" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a662f375faff4965656ce8ea06f162831" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <qualifiedname>rcsc::Vector2D::normalize</qualifiedname>
        <briefdescription>
<para>normalize vector. length is set to 1.0. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="424" column="15" bodyfile="ui/vector_2d.h" bodystart="424" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a06ecd9fdbd8faca29a16c459143c2948" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::normalizedVector</definition>
        <argsstring>() const</argsstring>
        <name>normalizedVector</name>
        <qualifiedname>rcsc::Vector2D::normalizedVector</qualifiedname>
        <briefdescription>
<para>get new normalized vector that the length is set to 1.0 but angle is same </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>new normalized vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="434" column="14" bodyfile="ui/vector_2d.h" bodystart="434" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a6bb764c9533f5a6efa468368fccc9753" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::rotate</definition>
        <argsstring>(const double &amp;deg)</argsstring>
        <name>rotate</name>
        <qualifiedname>rcsc::Vector2D::rotate</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>deg</declname>
        </param>
        <briefdescription>
<para>rotate this vector with &apos;deg&apos; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deg</parametername>
</parameternamelist>
<parameterdescription>
<para>rotated angle by double type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="444" column="15" bodyfile="ui/vector_2d.h" bodystart="444" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a25ce1d15fb00e92ed9ab3be5dc8d8525" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::rotate</definition>
        <argsstring>(const AngleDeg &amp;angle)</argsstring>
        <name>rotate</name>
        <qualifiedname>rcsc::Vector2D::rotate</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>rotate this vector with &apos;angle&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>rotated angle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="457" column="15" bodyfile="ui/vector_2d.h" bodystart="457" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a79e008cf38a72e8326b7b2c2581fe490" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::rotatedVector</definition>
        <argsstring>(const double &amp;deg) const</argsstring>
        <name>rotatedVector</name>
        <qualifiedname>rcsc::Vector2D::rotatedVector</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>deg</declname>
        </param>
        <briefdescription>
<para>get new vector that is rotated by &apos;deg&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deg</parametername>
</parameternamelist>
<parameterdescription>
<para>rotated angle. double type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new vector rotated by &apos;deg&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="467" column="14" bodyfile="ui/vector_2d.h" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a896f8cee24043c9dd82377de07462214" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>Vector2D rcsc::Vector2D::rotatedVector</definition>
        <argsstring>(const AngleDeg &amp;angle) const</argsstring>
        <name>rotatedVector</name>
        <qualifiedname>rcsc::Vector2D::rotatedVector</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>get new vector that is rotated by &apos;angle&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>rotated angle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new vector rotated by &apos;angle&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="477" column="14" bodyfile="ui/vector_2d.h" bodystart="477" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a36809c0cceffc586a34ccec3a742b027" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
        <definition>Vector2D &amp; rcsc::Vector2D::setDir</definition>
        <argsstring>(const AngleDeg &amp;dir)</argsstring>
        <name>setDir</name>
        <qualifiedname>rcsc::Vector2D::setDir</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>set vector&apos;s angle to &apos;angle&apos; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>new angle to be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="487" column="15" bodyfile="ui/vector_2d.h" bodystart="487" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aacf2dad96549492a1ed54d84b67fb54f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::innerProduct</definition>
        <argsstring>(const Vector2D &amp;v) const</argsstring>
        <name>innerProduct</name>
        <qualifiedname>rcsc::Vector2D::innerProduct</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>get inner(dot) product with &apos;v&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>target vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of inner product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="500" column="12" bodyfile="ui/vector_2d.h" bodystart="500" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1aee2ced93f96e42c758a9a89debc17a2c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rcsc::Vector2D::outerProduct</definition>
        <argsstring>(const Vector2D &amp;v) const</argsstring>
        <name>outerProduct</name>
        <qualifiedname>rcsc::Vector2D::outerProduct</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>get virtal outer(cross) product with &apos;v&apos;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>target vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of outer product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="511" column="12" bodyfile="ui/vector_2d.h" bodystart="511" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ad872e0c3d54b9b428212a84666fa4707" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Vector2D::equals</definition>
        <argsstring>(const Vector2D &amp;other) const</argsstring>
        <name>equals</name>
        <qualifiedname>rcsc::Vector2D::equals</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if this vector is strictly same as given vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>compared vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if strictly same, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="531" column="10" bodyfile="ui/vector_2d.h" bodystart="531" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1af32636acd667f54e57ea86dc28c9de4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rcsc::Vector2D::equalsWeakly</definition>
        <argsstring>(const Vector2D &amp;other) const</argsstring>
        <name>equalsWeakly</name>
        <qualifiedname>rcsc::Vector2D::equalsWeakly</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if this vector is weakly same as given vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>compared vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if weakly same, otherwise false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="542" column="10" bodyfile="ui/vector_2d.h" bodystart="542" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a14ab39cd5943677c79aa43283484cf81" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rcsc::Vector2D::print</definition>
        <argsstring>(std::ostream &amp;os) const</argsstring>
        <name>print</name>
        <qualifiedname>rcsc::Vector2D::print</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>output XY values to ostream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to ostream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to ostream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="616" column="19" bodyfile="ui/vector_2d.h" bodystart="616" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a92aa50f206bb35f0f601d18c4b39ca8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; rcsc::Vector2D::printRound</definition>
        <argsstring>(std::ostream &amp;os, const double &amp;prec=0.1) const</argsstring>
        <name>printRound</name>
        <qualifiedname>rcsc::Vector2D::printRound</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>prec</declname>
          <defval>0.1</defval>
        </param>
        <briefdescription>
<para>output rounded XY values to ostream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to ostream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prec</parametername>
</parameternamelist>
<parameterdescription>
<para>precision of output value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to ostream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="628" column="19" bodyfile="ui/vector_2d.h" bodystart="628" bodyend="634"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a772264ae704612257f62b68df2a0546a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>static Vector2D rcsc::Vector2D::polar2vector</definition>
        <argsstring>(const double &amp;mag, const AngleDeg &amp;theta)</argsstring>
        <name>polar2vector</name>
        <qualifiedname>rcsc::Vector2D::polar2vector</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>mag</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>get new Vector created by POLAR value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mag</parametername>
</parameternamelist>
<parameterdescription>
<para>length of vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>angle of vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new vector object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="560" column="14" bodyfile="ui/geom/vector_2d.h" bodystart="560" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a110bdabfab62710278d400c534caaefa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>static Vector2D rcsc::Vector2D::from_polar</definition>
        <argsstring>(const double &amp;mag, const AngleDeg &amp;theta)</argsstring>
        <name>from_polar</name>
        <qualifiedname>rcsc::Vector2D::from_polar</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>mag</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>get new Vector created by POLAR value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mag</parametername>
</parameternamelist>
<parameterdescription>
<para>length of vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>angle of vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new vector object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="574" column="14" bodyfile="ui/geom/vector_2d.h" bodystart="574" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a93f36d20bd981c328ddc649547c1adcc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double rcsc::Vector2D::inner_product</definition>
        <argsstring>(const Vector2D &amp;v1, const Vector2D &amp;v2)</argsstring>
        <name>inner_product</name>
        <qualifiedname>rcsc::Vector2D::inner_product</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>get inner(dot) product for v1 and v2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>input 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>input 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of inner product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="588" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="588" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ac4533f9764d39483adf4d88e7f649ddb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double rcsc::Vector2D::outer_product</definition>
        <argsstring>(const Vector2D &amp;v1, const Vector2D &amp;v2)</argsstring>
        <name>outer_product</name>
        <qualifiedname>rcsc::Vector2D::outer_product</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>get outer(cross) product for v1 and v2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>input 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>input 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of outer product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/geom/vector_2d.h" line="602" column="12" bodyfile="ui/geom/vector_2d.h" bodystart="602" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a772264ae704612257f62b68df2a0546a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>static Vector2D rcsc::Vector2D::polar2vector</definition>
        <argsstring>(const double &amp;mag, const AngleDeg &amp;theta)</argsstring>
        <name>polar2vector</name>
        <qualifiedname>rcsc::Vector2D::polar2vector</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>mag</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>get new Vector created by POLAR value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mag</parametername>
</parameternamelist>
<parameterdescription>
<para>length of vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>angle of vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new vector object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="560" column="14" bodyfile="ui/vector_2d.h" bodystart="560" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a110bdabfab62710278d400c534caaefa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref></type>
        <definition>static Vector2D rcsc::Vector2D::from_polar</definition>
        <argsstring>(const double &amp;mag, const AngleDeg &amp;theta)</argsstring>
        <name>from_polar</name>
        <qualifiedname>rcsc::Vector2D::from_polar</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>mag</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_angle_deg" kindref="compound">AngleDeg</ref> &amp;</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>get new Vector created by POLAR value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mag</parametername>
</parameternamelist>
<parameterdescription>
<para>length of vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>angle of vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new vector object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="574" column="14" bodyfile="ui/vector_2d.h" bodystart="574" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1a93f36d20bd981c328ddc649547c1adcc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double rcsc::Vector2D::inner_product</definition>
        <argsstring>(const Vector2D &amp;v1, const Vector2D &amp;v2)</argsstring>
        <name>inner_product</name>
        <qualifiedname>rcsc::Vector2D::inner_product</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>get inner(dot) product for v1 and v2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>input 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>input 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of inner product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="588" column="12" bodyfile="ui/vector_2d.h" bodystart="588" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classrcsc_1_1_vector2_d_1ac4533f9764d39483adf4d88e7f649ddb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double rcsc::Vector2D::outer_product</definition>
        <argsstring>(const Vector2D &amp;v1, const Vector2D &amp;v2)</argsstring>
        <name>outer_product</name>
        <qualifiedname>rcsc::Vector2D::outer_product</qualifiedname>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classrcsc_1_1_vector2_d" kindref="compound">Vector2D</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>get outer(cross) product for v1 and v2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>input 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>input 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of outer product </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ui/vector_2d.h" line="602" column="12" bodyfile="ui/vector_2d.h" bodystart="602" bodyend="606"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>2D point vector class </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>rcsc::Vector2D</label>
        <link refid="classrcsc_1_1_vector2_d"/>
        <childnode refid="1" relation="usage">
          <edgelabel>INVALIDATED</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ui/geom/vector_2d.h" line="47" column="1" bodyfile="ui/geom/vector_2d.h" bodystart="47" bodyend="812"/>
    <listofallmembers>
      <member refid="classrcsc_1_1_vector2_d_1a05feb06e87ab9e0810c04c487003cdef" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>abs</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a05feb06e87ab9e0810c04c487003cdef" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>abs</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aed2114671ef5b13348bc423cdc84bd51" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>absX</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aed2114671ef5b13348bc423cdc84bd51" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>absX</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a732e6543891c9a0970ef1255487b6bee" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>absY</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a732e6543891c9a0970ef1255487b6bee" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>absY</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a40a21f48011a717f2f12f5868e1b977e" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>add</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a4f9f980408accd3309a00bdf71eeb12b" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>add</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a40a21f48011a717f2f12f5868e1b977e" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>add</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a4f9f980408accd3309a00bdf71eeb12b" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>add</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad238ed0eb9bab0f1058e5acd703def7d" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>assign</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad238ed0eb9bab0f1058e5acd703def7d" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>assign</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aaf8070266a35c0418bda71d8a4de63c9" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>dir</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aaf8070266a35c0418bda71d8a4de63c9" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>dir</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a66be32ad63e4915218fb0c98e7f4f10e" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>dist</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a66be32ad63e4915218fb0c98e7f4f10e" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>dist</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a9d943eb93298d15f23228cddf3ed909b" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>dist2</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a9d943eb93298d15f23228cddf3ed909b" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>dist2</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ac7acc47ce6d1711b965e761b8657f08f" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>EPSILON</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad872e0c3d54b9b428212a84666fa4707" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>equals</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad872e0c3d54b9b428212a84666fa4707" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>equals</name></member>
      <member refid="classrcsc_1_1_vector2_d_1af32636acd667f54e57ea86dc28c9de4f" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>equalsWeakly</name></member>
      <member refid="classrcsc_1_1_vector2_d_1af32636acd667f54e57ea86dc28c9de4f" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>equalsWeakly</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a18594f90dfd518dc086c4b113bae0473" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>ERROR_VALUE</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a110bdabfab62710278d400c534caaefa" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>from_polar</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a110bdabfab62710278d400c534caaefa" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>from_polar</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a93f36d20bd981c328ddc649547c1adcc" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>inner_product</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a93f36d20bd981c328ddc649547c1adcc" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>inner_product</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aacf2dad96549492a1ed54d84b67fb54f" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>innerProduct</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aacf2dad96549492a1ed54d84b67fb54f" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>innerProduct</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a28e50a6f0efe3f0cb4538569cea41115" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>invalidate</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a28e50a6f0efe3f0cb4538569cea41115" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>invalidate</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a75349ff72ea6f94b8c9f1b1039d0143f" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>INVALIDATED</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad06e2da06e025d17a097027dc8c71637" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>isValid</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad06e2da06e025d17a097027dc8c71637" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>isValid</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aa91806c085862c17b963495b2bb05e51" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>length</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aa91806c085862c17b963495b2bb05e51" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>length</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad5dd81b4dcad673086779f1a70a6cc7b" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>length2</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad5dd81b4dcad673086779f1a70a6cc7b" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>length2</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a932756b8eed06831de559bb79a5b70c2" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>norm</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a932756b8eed06831de559bb79a5b70c2" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>norm</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a5b918c8f78a205e2d3558c84df6c294e" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>norm2</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a5b918c8f78a205e2d3558c84df6c294e" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>norm2</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a662f375faff4965656ce8ea06f162831" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>normalize</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a662f375faff4965656ce8ea06f162831" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>normalize</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a06ecd9fdbd8faca29a16c459143c2948" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>normalizedVector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a06ecd9fdbd8faca29a16c459143c2948" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>normalizedVector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1abb8bfab9a39d61c2da8170a7e881907d" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator*=</name></member>
      <member refid="classrcsc_1_1_vector2_d_1abb8bfab9a39d61c2da8170a7e881907d" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator*=</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aa01307b74ff3e896b7db6b5e99d93fab" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator+</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aa01307b74ff3e896b7db6b5e99d93fab" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator+</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad4a96c5358df59c4703042735addf2df" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator+=</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad4a96c5358df59c4703042735addf2df" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator+=</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a5ccf90d1ad4e0927195eb276a8ff4050" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator-</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a5ccf90d1ad4e0927195eb276a8ff4050" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator-</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a8d71fa5c4bf1ca6e60b0bba090afaaea" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator-=</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a8d71fa5c4bf1ca6e60b0bba090afaaea" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator-=</name></member>
      <member refid="classrcsc_1_1_vector2_d_1af4a06d4c3af631dd4d4ef1d121b78cac" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator/=</name></member>
      <member refid="classrcsc_1_1_vector2_d_1af4a06d4c3af631dd4d4ef1d121b78cac" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>operator/=</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ac4533f9764d39483adf4d88e7f649ddb" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>outer_product</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ac4533f9764d39483adf4d88e7f649ddb" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>outer_product</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aee2ced93f96e42c758a9a89debc17a2c" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>outerProduct</name></member>
      <member refid="classrcsc_1_1_vector2_d_1aee2ced93f96e42c758a9a89debc17a2c" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>outerProduct</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a772264ae704612257f62b68df2a0546a" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>polar2vector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a772264ae704612257f62b68df2a0546a" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>polar2vector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a14ab39cd5943677c79aa43283484cf81" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>print</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a14ab39cd5943677c79aa43283484cf81" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>print</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a92aa50f206bb35f0f601d18c4b39ca8d" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>printRound</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a92aa50f206bb35f0f601d18c4b39ca8d" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>printRound</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a403fda959d31351e279fb1899f9919c1" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>r</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a403fda959d31351e279fb1899f9919c1" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>r</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad681a9e9a550c8e45a38baf3028d6c95" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>r2</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad681a9e9a550c8e45a38baf3028d6c95" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>r2</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a3d5bc01819785a8de4058248506a2fc0" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>reverse</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a3d5bc01819785a8de4058248506a2fc0" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>reverse</name></member>
      <member refid="classrcsc_1_1_vector2_d_1af01fdc788e673e338c5748f09e691d68" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>reversedVector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1af01fdc788e673e338c5748f09e691d68" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>reversedVector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a6bb764c9533f5a6efa468368fccc9753" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>rotate</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a25ce1d15fb00e92ed9ab3be5dc8d8525" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>rotate</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a6bb764c9533f5a6efa468368fccc9753" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>rotate</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a25ce1d15fb00e92ed9ab3be5dc8d8525" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>rotate</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a79e008cf38a72e8326b7b2c2581fe490" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>rotatedVector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a896f8cee24043c9dd82377de07462214" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>rotatedVector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a79e008cf38a72e8326b7b2c2581fe490" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>rotatedVector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a896f8cee24043c9dd82377de07462214" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>rotatedVector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ab2a425641a0d0ded8b3435bde053f5b0" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>scale</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ab2a425641a0d0ded8b3435bde053f5b0" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>scale</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a36809c0cceffc586a34ccec3a742b027" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>setDir</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a36809c0cceffc586a34ccec3a742b027" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>setDir</name></member>
      <member refid="classrcsc_1_1_vector2_d_1acb2fcc4ba42e1d7a57a364b4e8f7994c" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>setLength</name></member>
      <member refid="classrcsc_1_1_vector2_d_1acb2fcc4ba42e1d7a57a364b4e8f7994c" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>setLength</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a731a35a47cd50ee511bfdc71b5fe5ecb" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>setLengthVector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a731a35a47cd50ee511bfdc71b5fe5ecb" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>setLengthVector</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad5850c4e93994149b7474049f1d3d1dc" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>setPolar</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ad5850c4e93994149b7474049f1d3d1dc" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>setPolar</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a1b93ccd6f00f7608d912e7ec5ecc640f" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>th</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a1b93ccd6f00f7608d912e7ec5ecc640f" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>th</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a981b85536f58e2f7e94b2350e9b50abc" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>Vector2D</name></member>
      <member refid="classrcsc_1_1_vector2_d_1afd3781fdc7e415c671e484b4490c2e2c" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>Vector2D</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a981b85536f58e2f7e94b2350e9b50abc" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>Vector2D</name></member>
      <member refid="classrcsc_1_1_vector2_d_1afd3781fdc7e415c671e484b4490c2e2c" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>Vector2D</name></member>
      <member refid="classrcsc_1_1_vector2_d_1ac02743c785aa86b6e252ed58bf34cb92" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>x</name></member>
      <member refid="classrcsc_1_1_vector2_d_1a79060507ebe8839850961e00c24d89ef" prot="public" virt="non-virtual"><scope>rcsc::Vector2D</scope><name>y</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
