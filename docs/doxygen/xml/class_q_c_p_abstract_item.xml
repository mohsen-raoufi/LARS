<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_abstract_item" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QCPAbstractItem</compoundname>
    <basecompoundref refid="class_q_c_p_layerable" prot="public" virt="non-virtual">QCPLayerable</basecompoundref>
    <derivedcompoundref refid="class_q_c_p_item_bracket" prot="public" virt="non-virtual">QCPItemBracket</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_item_curve" prot="public" virt="non-virtual">QCPItemCurve</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_item_ellipse" prot="public" virt="non-virtual">QCPItemEllipse</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_item_line" prot="public" virt="non-virtual">QCPItemLine</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_item_pixmap" prot="public" virt="non-virtual">QCPItemPixmap</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_item_rect" prot="public" virt="non-virtual">QCPItemRect</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_item_straight_line" prot="public" virt="non-virtual">QCPItemStraightLine</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_item_text" prot="public" virt="non-virtual">QCPItemText</derivedcompoundref>
    <derivedcompoundref refid="class_q_c_p_item_tracer" prot="public" virt="non-virtual">QCPItemTracer</derivedcompoundref>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_abstract_item_1ad2a70ff6b658fcb84a9427f69d3f587d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPAbstractItem::mClipToAxisRect</definition>
        <argsstring></argsstring>
        <name>mClipToAxisRect</name>
        <qualifiedname>QCPAbstractItem::mClipToAxisRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3717" column="8" bodyfile="qcustomplot.h" bodystart="3717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_item_1a3e57cfe7da4b1ac3d6fa7281ea437361" prot="protected" static="no" mutable="no">
        <type>QPointer&lt; <ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> &gt;</type>
        <definition>QPointer&lt;QCPAxisRect&gt; QCPAbstractItem::mClipAxisRect</definition>
        <argsstring></argsstring>
        <name>mClipAxisRect</name>
        <qualifiedname>QCPAbstractItem::mClipAxisRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3718" column="12" bodyfile="qcustomplot.h" bodystart="3718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_item_1af94ff71b6a15ea6d028ab8bd8eccd012" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> * &gt;</type>
        <definition>QList&lt;QCPItemPosition*&gt; QCPAbstractItem::mPositions</definition>
        <argsstring></argsstring>
        <name>mPositions</name>
        <qualifiedname>QCPAbstractItem::mPositions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3719" column="9" bodyfile="qcustomplot.h" bodystart="3719" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_item_1a909a3abab783de302ebf0a0e6f2bbc15" prot="protected" static="no" mutable="no">
        <type>QList&lt; <ref refid="class_q_c_p_item_anchor" kindref="compound">QCPItemAnchor</ref> * &gt;</type>
        <definition>QList&lt;QCPItemAnchor*&gt; QCPAbstractItem::mAnchors</definition>
        <argsstring></argsstring>
        <name>mAnchors</name>
        <qualifiedname>QCPAbstractItem::mAnchors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3720" column="9" bodyfile="qcustomplot.h" bodystart="3720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_item_1ad81eb35c8726a0f458db9df9732e0e41" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPAbstractItem::mSelectable</definition>
        <argsstring></argsstring>
        <name>mSelectable</name>
        <qualifiedname>QCPAbstractItem::mSelectable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3721" column="8" bodyfile="qcustomplot.h" bodystart="3721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_abstract_item_1a4bdb3457dad1d268c0f78a44152b9645" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPAbstractItem::mSelected</definition>
        <argsstring></argsstring>
        <name>mSelected</name>
        <qualifiedname>QCPAbstractItem::mSelected</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3721" column="20" bodyfile="qcustomplot.h" bodystart="3721" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_c_p_abstract_item_1a1cdf9df76adcfae45261690aa0ca2198" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCustomPlot</definition>
        <argsstring></argsstring>
        <name>QCustomPlot</name>
        <qualifiedname>QCPAbstractItem::QCustomPlot</qualifiedname>
        <param>
          <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3743" column="16" bodyfile="qcustomplot.h" bodystart="3743" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_abstract_item_1a61767d414fd57af9eb1741b34268c7fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPItemAnchor</definition>
        <argsstring></argsstring>
        <name>QCPItemAnchor</name>
        <qualifiedname>QCPAbstractItem::QCPItemAnchor</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_item_anchor" kindref="compound">QCPItemAnchor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3744" column="16" bodyfile="qcustomplot.h" bodystart="3744" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a9922507d8b4503a1fe1ed0b1030e23b6" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPAbstractItem::QCPAbstractItem</definition>
        <argsstring>(QCustomPlot *parentPlot)</argsstring>
        <name>QCPAbstractItem</name>
        <qualifiedname>QCPAbstractItem::QCPAbstractItem</qualifiedname>
        <param>
          <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> *</type>
          <declname>parentPlot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Base class constructor which initializes base class members. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3686" column="12" bodyfile="qcustomplot.cpp" bodystart="12927" bodyend="12941"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a5120698bef63cbaa8544e9f47a2f4abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPAbstractItem::~QCPAbstractItem</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>~QCPAbstractItem</name>
        <qualifiedname>QCPAbstractItem::~QCPAbstractItem</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3687" column="11" bodyfile="qcustomplot.cpp" bodystart="12943" bodyend="12947"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a42715ad5f3d7fca6854025fa5636f436" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractItem::clipToAxisRect</definition>
        <argsstring>() const</argsstring>
        <name>clipToAxisRect</name>
        <qualifiedname>QCPAbstractItem::clipToAxisRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3690" column="8" bodyfile="qcustomplot.h" bodystart="3690" bodyend="3690"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1ae162314efd3fe1a6d4df11da1d275d52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> *</type>
        <definition>QCPAxisRect * QCPAbstractItem::clipAxisRect</definition>
        <argsstring>() const</argsstring>
        <name>clipAxisRect</name>
        <qualifiedname>QCPAbstractItem::clipAxisRect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3691" column="15" bodyfile="qcustomplot.cpp" bodystart="12950" bodyend="12953"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1ae29aa489767352b40c4aaa7ea50c5582" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractItem::selectable</definition>
        <argsstring>() const</argsstring>
        <name>selectable</name>
        <qualifiedname>QCPAbstractItem::selectable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3692" column="8" bodyfile="qcustomplot.h" bodystart="3692" bodyend="3692"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1aa069fba320a13639f119f82ad29ead96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractItem::selected</definition>
        <argsstring>() const</argsstring>
        <name>selected</name>
        <qualifiedname>QCPAbstractItem::selected</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3693" column="8" bodyfile="qcustomplot.h" bodystart="3693" bodyend="3693"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a39e05b9d4176b9accafc746d16ca6a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractItem::setClipToAxisRect</definition>
        <argsstring>(bool clip)</argsstring>
        <name>setClipToAxisRect</name>
        <qualifiedname>QCPAbstractItem::setClipToAxisRect</qualifiedname>
        <param>
          <type>bool</type>
          <declname>clip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the item shall be clipped to an axis rect or whether it shall be visible on the entire <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>. The axis rect can be set with <ref refid="class_q_c_p_abstract_item_1a7dc75fcbcd10206fe0b75d757ea7a347" kindref="member">setClipAxisRect</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_item_1a7dc75fcbcd10206fe0b75d757ea7a347" kindref="member">setClipAxisRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3696" column="8" bodyfile="qcustomplot.cpp" bodystart="12961" bodyend="12966"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a7dc75fcbcd10206fe0b75d757ea7a347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractItem::setClipAxisRect</definition>
        <argsstring>(QCPAxisRect *rect)</argsstring>
        <name>setClipAxisRect</name>
        <qualifiedname>QCPAbstractItem::setClipAxisRect</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis_rect" kindref="compound">QCPAxisRect</ref> *</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the clip axis rect. It defines the rect that will be used to clip the item when <ref refid="class_q_c_p_abstract_item_1a39e05b9d4176b9accafc746d16ca6a06" kindref="member">setClipToAxisRect</ref> is set to true.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_item_1a39e05b9d4176b9accafc746d16ca6a06" kindref="member">setClipToAxisRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3697" column="8" bodyfile="qcustomplot.cpp" bodystart="12974" bodyend="12979"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SLOT void</type>
        <definition>void QCPAbstractItem::setSelectable</definition>
        <argsstring>(bool selectable)</argsstring>
        <name>setSelectable</name>
        <qualifiedname>QCPAbstractItem::setSelectable</qualifiedname>
        <param>
          <type>bool</type>
          <declname>selectable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether the user can (de-)select this item by clicking on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> surface. (When <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref> contains QCustomPlot::iSelectItems.)</para>
<para>However, even when <emphasis>selectable</emphasis> was set to false, it is possible to set the selection manually, by calling <ref refid="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378" kindref="member">setSelected</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref>, <ref refid="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378" kindref="member">setSelected</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3698" column="15" bodyfile="qcustomplot.cpp" bodystart="12990" bodyend="12997"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Q_SLOT void</type>
        <definition>void QCPAbstractItem::setSelected</definition>
        <argsstring>(bool selected)</argsstring>
        <name>setSelected</name>
        <qualifiedname>QCPAbstractItem::setSelected</qualifiedname>
        <param>
          <type>bool</type>
          <declname>selected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether this item is selected or not. When selected, it might use a different visual appearance (e.g. pen and brush), this depends on the specific item though.</para>
<para>The entire selection mechanism for items is handled automatically when <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref> contains QCustomPlot::iSelectItems. You only need to call this function when you wish to change the selection state manually.</para>
<para>This function can change the selection state even when <ref refid="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2" kindref="member">setSelectable</ref> was set to false.</para>
<para>emits the <ref refid="class_q_c_p_abstract_item_1aa5cffb034fc65dbb91c77e02c1c14251" kindref="member">selectionChanged</ref> signal when <emphasis>selected</emphasis> is different from the previous selection state.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2" kindref="member">setSelectable</ref>, <ref refid="class_q_c_p_abstract_item_1ac75a4bdcba0ce51ae22eacebb16a9dcd" kindref="member">selectTest</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3699" column="15" bodyfile="qcustomplot.cpp" bodystart="13013" bodyend="13020"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1ac75a4bdcba0ce51ae22eacebb16a9dcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double QCPAbstractItem::selectTest</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable, QVariant *details=nullptr) const Q_DECL_OVERRIDE=0</argsstring>
        <name>selectTest</name>
        <qualifiedname>QCPAbstractItem::selectTest</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a272989087fc8c4357b4ba614f9922336">selectTest</reimplements>
        <reimplementedby refid="class_q_c_p_item_bracket_1a8c3bc895c9db93e97a291a1199f6f8c6">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_curve_1ae5b09ad4ea7ec2d9f08190c73c39e9b9">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_ellipse_1a1037a6c39ad70aabcb1b552a8b4eff97">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_line_1aae15b3ca3fdad76e6aed9c4e01fd5e94">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_pixmap_1a35f4da350e37f4d7ac8c837ad160967f">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_rect_1a40786d237a1f8f22a90627068940ec08">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_straight_line_1a0b10bec4746760cc99d210ba040cb8f7">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_text_1a9345ae04cb0e06b77c76381ca45c9717">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_tracer_1a01d8814404e3f0910b84029016ef73b2">selectTest</reimplementedby>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <param>
          <type>QVariant *</type>
          <declname>details</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used to decide whether a click hits a layerable object or not.</para>
<para><emphasis>pos</emphasis> is a point in pixel coordinates on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> surface. This function returns the shortest pixel distance of this point to the object. If the object is either invisible or the distance couldn&apos;t be determined, -1.0 is returned. Further, if <emphasis>onlySelectable</emphasis> is true and the object is not selectable, -1.0 is returned, too.</para>
<para>If the object is represented not by single lines but by an area like a <ref refid="class_q_c_p_item_text" kindref="compound">QCPItemText</ref> or the bars of a <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref> plottable, a click inside the area should also be considered a hit. In these cases this function thus returns a constant value greater zero but still below the parent plot&apos;s selection tolerance. (typically the selectionTolerance multiplied by 0.99).</para>
<para>Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i.e. closer than 0.99*selectionTolerance).</para>
<para>The actual setting of the selection state is not done by this function. This is handled by the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> when the mouseReleaseEvent occurs, and the finally selected object is notified via the selectEvent/ deselectEvent methods.</para>
<para><emphasis>details</emphasis> is an optional output parameter. Every layerable subclass may place any information in <emphasis>details</emphasis>. This information will be passed to selectEvent when the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> decides on the basis of this selectTest call, that the object was successfully selected. The subsequent call to selectEvent will carry the <emphasis>details</emphasis>. This is useful for multi-part objects (like <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref>). This way, a possibly complex calculation to decide which part was clicked is only done once in <ref refid="class_q_c_p_abstract_item_1ac75a4bdcba0ce51ae22eacebb16a9dcd" kindref="member">selectTest</ref>. The result (i.e. the actually clicked part) can then be placed in <emphasis>details</emphasis>. So in the subsequent selectEvent, the decision which part was selected doesn&apos;t have to be done a second time for a single selection operation.</para>
<para>In the case of 1D Plottables (<ref refid="class_q_c_p_abstract_plottable1_d" kindref="compound">QCPAbstractPlottable1D</ref>, like <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> or <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref>) <emphasis>details</emphasis> will be set to a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref>, describing the closest data point to <emphasis>pos</emphasis>.</para>
<para>You may pass <computeroutput>nullptr</computeroutput> as <emphasis>details</emphasis> to indicate that you are not interested in those selection details.</para>
<para><simplesect kind="see"><para>selectEvent, deselectEvent, <ref refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376" kindref="member">mousePressEvent</ref>, <ref refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022" kindref="member">wheelEvent</ref>, <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref>, <ref refid="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded" kindref="member">QCPAbstractPlottable1D::selectTestRect</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3702" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a709f655ac3f7f22d452714134662b454" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> * &gt;</type>
        <definition>QList&lt; QCPItemPosition * &gt; QCPAbstractItem::positions</definition>
        <argsstring>() const</argsstring>
        <name>positions</name>
        <qualifiedname>QCPAbstractItem::positions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all positions of the item in a list.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_item_1a81d1ecfea3368b836cf9675a0045e659" kindref="member">anchors</ref>, <ref refid="class_q_c_p_abstract_item_1a2589c3d298f9a576d77d9addb440a18d" kindref="member">position</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3705" column="9" bodyfile="qcustomplot.h" bodystart="3705" bodyend="3705"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a81d1ecfea3368b836cf9675a0045e659" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QList&lt; <ref refid="class_q_c_p_item_anchor" kindref="compound">QCPItemAnchor</ref> * &gt;</type>
        <definition>QList&lt; QCPItemAnchor * &gt; QCPAbstractItem::anchors</definition>
        <argsstring>() const</argsstring>
        <name>anchors</name>
        <qualifiedname>QCPAbstractItem::anchors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns all anchors of the item in a list. Note that since a position (<ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref>) is always also an anchor, the list will also contain the positions of this item.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_item_1a709f655ac3f7f22d452714134662b454" kindref="member">positions</ref>, <ref refid="class_q_c_p_abstract_item_1a139c255ea8831642fac91748e29a5adb" kindref="member">anchor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3706" column="9" bodyfile="qcustomplot.h" bodystart="3706" bodyend="3706"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a2589c3d298f9a576d77d9addb440a18d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> *</type>
        <definition>QCPItemPosition * QCPAbstractItem::position</definition>
        <argsstring>(const QString &amp;name) const</argsstring>
        <name>position</name>
        <qualifiedname>QCPAbstractItem::position</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> with the specified <emphasis>name</emphasis>. If this item doesn&apos;t have a position by that name, returns <computeroutput>nullptr</computeroutput>.</para>
<para>This function provides an alternative way to access item positions. Normally, you access positions direcly by their member pointers (which typically have the same variable name as <emphasis>name</emphasis>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_item_1a709f655ac3f7f22d452714134662b454" kindref="member">positions</ref>, <ref refid="class_q_c_p_abstract_item_1a139c255ea8831642fac91748e29a5adb" kindref="member">anchor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3707" column="19" bodyfile="qcustomplot.cpp" bodystart="13032" bodyend="13041"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a139c255ea8831642fac91748e29a5adb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_item_anchor" kindref="compound">QCPItemAnchor</ref> *</type>
        <definition>QCPItemAnchor * QCPAbstractItem::anchor</definition>
        <argsstring>(const QString &amp;name) const</argsstring>
        <name>anchor</name>
        <qualifiedname>QCPAbstractItem::anchor</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="class_q_c_p_item_anchor" kindref="compound">QCPItemAnchor</ref> with the specified <emphasis>name</emphasis>. If this item doesn&apos;t have an anchor by that name, returns <computeroutput>nullptr</computeroutput>.</para>
<para>This function provides an alternative way to access item anchors. Normally, you access anchors direcly by their member pointers (which typically have the same variable name as <emphasis>name</emphasis>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_item_1a81d1ecfea3368b836cf9675a0045e659" kindref="member">anchors</ref>, <ref refid="class_q_c_p_abstract_item_1a2589c3d298f9a576d77d9addb440a18d" kindref="member">position</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3708" column="17" bodyfile="qcustomplot.cpp" bodystart="13053" bodyend="13062"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a84914f4516f9b38ef0bd89eafe3dbda7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPAbstractItem::hasAnchor</definition>
        <argsstring>(const QString &amp;name) const</argsstring>
        <name>hasAnchor</name>
        <qualifiedname>QCPAbstractItem::hasAnchor</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether this item has an anchor with the specified <emphasis>name</emphasis>.</para>
<para>Note that you can check for positions with this function, too. This is because every position is also an anchor (<ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> inherits from <ref refid="class_q_c_p_item_anchor" kindref="compound">QCPItemAnchor</ref>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_item_1a139c255ea8831642fac91748e29a5adb" kindref="member">anchor</ref>, <ref refid="class_q_c_p_abstract_item_1a2589c3d298f9a576d77d9addb440a18d" kindref="member">position</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3709" column="8" bodyfile="qcustomplot.cpp" bodystart="13072" bodyend="13080"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="signal">
      <memberdef kind="signal" id="class_q_c_p_abstract_item_1aa5cffb034fc65dbb91c77e02c1c14251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractItem::selectionChanged</definition>
        <argsstring>(bool selected)</argsstring>
        <name>selectionChanged</name>
        <qualifiedname>QCPAbstractItem::selectionChanged</qualifiedname>
        <param>
          <type>bool</type>
          <declname>selected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This signal is emitted when the selection state of this item has changed, either by user interaction or by a direct call to <ref refid="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378" kindref="member">setSelected</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3712" column="8"/>
      </memberdef>
      <memberdef kind="signal" id="class_q_c_p_abstract_item_1a5b266c11aac61cb511901f3911dac2a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractItem::selectableChanged</definition>
        <argsstring>(bool selectable)</argsstring>
        <name>selectableChanged</name>
        <qualifiedname>QCPAbstractItem::selectableChanged</qualifiedname>
        <param>
          <type>bool</type>
          <declname>selectable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3713" column="8"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_abstract_item_1aceb5f99c361cf023c7cbe7339ea29571" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037" kindref="member">QCP::Interaction</ref></type>
        <definition>QCP::Interaction QCPAbstractItem::selectionCategory</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>selectionCategory</name>
        <qualifiedname>QCPAbstractItem::selectionCategory</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a908c9edda761886f33893be326dab77d">selectionCategory</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3724" column="28" bodyfile="qcustomplot.cpp" bodystart="13256" bodyend="13259"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a6ad60000f29afe11035e1f791dcbd45a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QRect</type>
        <definition>QRect QCPAbstractItem::clipRect</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>clipRect</name>
        <qualifiedname>QCPAbstractItem::clipRect</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1acbcfc9ecc75433747b1978a77b1864b3">clipRect</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3725" column="17" bodyfile="qcustomplot.cpp" bodystart="13091" bodyend="13097"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a5579ce9ec7cad202499886b042448b10" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAbstractItem::applyDefaultAntialiasingHint</definition>
        <argsstring>(QCPPainter *painter) const Q_DECL_OVERRIDE</argsstring>
        <name>applyDefaultAntialiasingHint</name>
        <qualifiedname>QCPAbstractItem::applyDefaultAntialiasingHint</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a1168944abbf9fa6731b0f4a2d0d67e8b">applyDefaultAntialiasingHint</reimplements>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3726" column="16" bodyfile="qcustomplot.cpp" bodystart="13112" bodyend="13115"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1afe12c077663d07233a1b06608783ae41" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QCPAbstractItem::draw</definition>
        <argsstring>(QCPPainter *painter) Q_DECL_OVERRIDE=0</argsstring>
        <name>draw</name>
        <qualifiedname>QCPAbstractItem::draw</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1adf62b4bac3ca934db80290792fc897e1">draw</reimplements>
        <reimplementedby refid="class_q_c_p_item_bracket_1a942a3978aea44a2fc7b4383f2bf6d417">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_curve_1a856ae61de18278847ba5e0e357bf68f2">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_ellipse_1a77eebd67a402fc496082a2e51356928c">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_line_1ae184140b61b2ef5b8edde76304447200">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_pixmap_1a9538a7d37fe20a4ff4bb2cb5bbbf2b48">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_rect_1a3c492960d0fc038cf1b60578b62b6cdc">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_straight_line_1acbc84ad219bf4845152e4e2202fcaa3c">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_text_1a8f8f075da83b6547c2b32e1f64cf0554">draw</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_tracer_1a11f187ffea436434f3b5cfc387811967">draw</reimplementedby>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3727" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1aa4b969c58797f39c9c0b6c07c7869d17" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAbstractItem::selectEvent</definition>
        <argsstring>(QMouseEvent *event, bool additive, const QVariant &amp;details, bool *selectionStateChanged) Q_DECL_OVERRIDE</argsstring>
        <name>selectEvent</name>
        <qualifiedname>QCPAbstractItem::selectEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1a7498c2d0d081cf7cad0fb3bb93aa0e91">selectEvent</reimplements>
        <param>
          <type>QMouseEvent *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>additive</declname>
        </param>
        <param>
          <type>const QVariant &amp;</type>
          <declname>details</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>selectionStateChanged</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3729" column="16" bodyfile="qcustomplot.cpp" bodystart="13230" bodyend="13241"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1af9093798cb07a861dcc73f93ca16c0c1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPAbstractItem::deselectEvent</definition>
        <argsstring>(bool *selectionStateChanged) Q_DECL_OVERRIDE</argsstring>
        <name>deselectEvent</name>
        <qualifiedname>QCPAbstractItem::deselectEvent</qualifiedname>
        <reimplements refid="class_q_c_p_layerable_1ae546370644a5551c76af739afc008bee">deselectEvent</reimplements>
        <param>
          <type>bool *</type>
          <declname>selectionStateChanged</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3730" column="16" bodyfile="qcustomplot.cpp" bodystart="13244" bodyend="13253"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1ada5bad4e1196c4fc0d0d12328e24b8f2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QPointF</type>
        <definition>QPointF QCPAbstractItem::anchorPixelPosition</definition>
        <argsstring>(int anchorId) const</argsstring>
        <name>anchorPixelPosition</name>
        <qualifiedname>QCPAbstractItem::anchorPixelPosition</qualifiedname>
        <reimplementedby refid="class_q_c_p_item_bracket_1a008d87325d26b6616d368cec06027cce">anchorPixelPosition</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_ellipse_1a35cd6983c61a16ac33c23f08dd2817cc">anchorPixelPosition</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_pixmap_1a5803d8e173bc4d48619fc43701db32e5">anchorPixelPosition</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_rect_1a844027325b33a3b7eef424128ee5109c">anchorPixelPosition</reimplementedby>
        <reimplementedby refid="class_q_c_p_item_text_1afcdb1724d88d561f65da95fb54b0acb7">anchorPixelPosition</reimplementedby>
        <param>
          <type>int</type>
          <declname>anchorId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3733" column="19" bodyfile="qcustomplot.cpp" bodystart="13166" bodyend="13170"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a7dfc2007e36d09b8b5c988a9f06d6a7e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QCPAbstractItem::rectDistance</definition>
        <argsstring>(const QRectF &amp;rect, const QPointF &amp;pos, bool filledRect) const</argsstring>
        <name>rectDistance</name>
        <qualifiedname>QCPAbstractItem::rectDistance</qualifiedname>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>filledRect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3736" column="10" bodyfile="qcustomplot.cpp" bodystart="13130" bodyend="13154"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1a75036d39c4d4e2e1a7dd145fff915d32" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> *</type>
        <definition>QCPItemPosition * QCPAbstractItem::createPosition</definition>
        <argsstring>(const QString &amp;name)</argsstring>
        <name>createPosition</name>
        <qualifiedname>QCPAbstractItem::createPosition</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3737" column="19" bodyfile="qcustomplot.cpp" bodystart="13186" bodyend="13199"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_item_1af3fc92527802078ca395138748b629a7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_item_anchor" kindref="compound">QCPItemAnchor</ref> *</type>
        <definition>QCPItemAnchor * QCPAbstractItem::createAnchor</definition>
        <argsstring>(const QString &amp;name, int anchorId)</argsstring>
        <name>createAnchor</name>
        <qualifiedname>QCPAbstractItem::createAnchor</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>anchorId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3738" column="17" bodyfile="qcustomplot.cpp" bodystart="13220" bodyend="13227"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The abstract base class for all items in a plot. </para>
    </briefdescription>
    <detaileddescription>
<para>In <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>, items are supplemental graphical elements that are neither plottables (<ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref>) nor axes (<ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref>). While plottables are always tied to two axes and thus plot coordinates, items can also be placed in absolute coordinates independent of any axes. Each specific item has at least one <ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> member which controls the positioning. Some items are defined by more than one coordinate and thus have two or more <ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> members (For example, <ref refid="class_q_c_p_item_rect" kindref="compound">QCPItemRect</ref> has <emphasis>topLeft</emphasis> and <emphasis>bottomRight</emphasis>).</para>
<para>This abstract base class defines a very basic interface like visibility and clipping. Since this class is abstract, it can&apos;t be instantiated. Use one of the subclasses or create a subclass yourself to create new items.</para>
<para>The built-in items are: <table rows="9" cols="2"><row>
<entry thead="no"><para><ref refid="class_q_c_p_item_line" kindref="compound">QCPItemLine</ref></para>
</entry><entry thead="no"><para>A line defined by a start and an end point. May have different ending styles on each side (e.g. arrows).</para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="class_q_c_p_item_straight_line" kindref="compound">QCPItemStraightLine</ref></para>
</entry><entry thead="no"><para>A straight line defined by a start and a direction point. Unlike <ref refid="class_q_c_p_item_line" kindref="compound">QCPItemLine</ref>, the straight line is infinitely long and has no endings.</para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="class_q_c_p_item_curve" kindref="compound">QCPItemCurve</ref></para>
</entry><entry thead="no"><para>A curve defined by start, end and two intermediate control points. May have different ending styles on each side (e.g. arrows).</para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="class_q_c_p_item_rect" kindref="compound">QCPItemRect</ref></para>
</entry><entry thead="no"><para>A rectangle</para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="class_q_c_p_item_ellipse" kindref="compound">QCPItemEllipse</ref></para>
</entry><entry thead="no"><para>An ellipse</para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="class_q_c_p_item_pixmap" kindref="compound">QCPItemPixmap</ref></para>
</entry><entry thead="no"><para>An arbitrary pixmap</para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="class_q_c_p_item_text" kindref="compound">QCPItemText</ref></para>
</entry><entry thead="no"><para>A text label</para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="class_q_c_p_item_bracket" kindref="compound">QCPItemBracket</ref></para>
</entry><entry thead="no"><para>A bracket which may be used to reference/highlight certain parts in the plot.</para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="class_q_c_p_item_tracer" kindref="compound">QCPItemTracer</ref></para>
</entry><entry thead="no"><para>An item that can be attached to a <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> and sticks to its data points, given a key coordinate.</para>
</entry></row>
</table>
</para>
<sect1 id="class_q_c_p_abstract_item_1items-clipping">
<title>Clipping</title><para>Items are by default clipped to the main axis rect (they are only visible inside the axis rect). To make an item visible outside that axis rect, disable clipping via <ref refid="class_q_c_p_abstract_item_1a39e05b9d4176b9accafc746d16ca6a06" kindref="member">setClipToAxisRect(false)</ref>.</para>
<para>On the other hand if you want the item to be clipped to a different axis rect, specify it via <ref refid="class_q_c_p_abstract_item_1a7dc75fcbcd10206fe0b75d757ea7a347" kindref="member">setClipAxisRect</ref>. This clipAxisRect property of an item is only used for clipping behaviour, and in principle is independent of the coordinate axes the item might be tied to via its position members (<ref refid="class_q_c_p_item_position_1a2185f45c75ac8cb9be89daeaaad50e37" kindref="member">QCPItemPosition::setAxes</ref>). However, it is common that the axis rect for clipping also contains the axes used for the item positions.</para>
</sect1>
<sect1 id="class_q_c_p_abstract_item_1items-using">
<title>Using items</title><para>First you instantiate the item you want to use and add it to the plot: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting> by default, the positions of the item are bound to the x- and y-Axis of the plot. So we can just set the plot coordinates where the line should start/end: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting> If we don&apos;t want the line to be positioned in plot coordinates but a different coordinate system, e.g. absolute pixel positions on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> surface, we need to change the position type like this: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting> Then we can set the coordinates, this time in pixels: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting> and make the line visible on the entire <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>, by disabling clipping to the axis rect: <programlisting filename="documentation/doc-code-snippets/mainwindow.cpp"></programlisting></para>
<para>For more advanced plots, it is even possible to set different types and parent anchors per X/Y coordinate of an item position, using for example <ref refid="class_q_c_p_item_position_1a2113b2351d6d00457fb3559a4e20c3ea" kindref="member">QCPItemPosition::setTypeX</ref> or <ref refid="class_q_c_p_item_position_1add71461a973927c74e42179480916d9c" kindref="member">QCPItemPosition::setParentAnchorX</ref>. For details, see the documentation of <ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref>.</para>
</sect1>
<sect1 id="class_q_c_p_abstract_item_1items-subclassing">
<title>Creating own items</title><para>To create an own item, you implement a subclass of <ref refid="class_q_c_p_abstract_item" kindref="compound">QCPAbstractItem</ref>. These are the pure virtual functions, you must implement: <itemizedlist>
<listitem><para><ref refid="class_q_c_p_abstract_item_1ac75a4bdcba0ce51ae22eacebb16a9dcd" kindref="member">selectTest</ref> </para>
</listitem>
<listitem><para>draw</para>
</listitem>
</itemizedlist>
See the documentation of those functions for what they need to do.</para>
<sect2 id="class_q_c_p_abstract_item_1items-positioning">
<title>Allowing the item to be positioned</title><para>As mentioned, item positions are represented by <ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> members. Let&apos;s assume the new item shall have only one point as its position (as opposed to two like a rect or multiple like a polygon). You then add a public member of type <ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> like so:</para>
<para><programlisting><codeline><highlight class="normal">QCPItemPosition<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>myPosition;</highlight></codeline>
</programlisting></para>
<para>the const makes sure the pointer itself can&apos;t be modified from the user of your new item (the <ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> instance it points to, can be modified, of course). The initialization of this pointer is made easy with the createPosition function. Just assign the return value of this function to each <ref refid="class_q_c_p_item_position" kindref="compound">QCPItemPosition</ref> in the constructor of your item. createPosition takes a string which is the name of the position, typically this is identical to the variable name. For example, the constructor of QCPItemExample could look like this:</para>
<para><programlisting><codeline><highlight class="normal">QCPItemExample::QCPItemExample(QCustomPlot<sp/>*parentPlot)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="class_q_c_p_abstract_item_1a9922507d8b4503a1fe1ed0b1030e23b6" kindref="member">QCPAbstractItem</ref>(parentPlot),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>myPosition(createPosition(</highlight><highlight class="stringliteral">&quot;myPosition&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>constructor<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="class_q_c_p_abstract_item_1items-drawing">
<title>The draw function</title><para>To give your item a visual representation, reimplement the draw function and use the passed <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> to draw the item. You can retrieve the item position in pixel coordinates from the position member(s) via <ref refid="class_q_c_p_item_position_1a8be9a4787635433edecc75164beb748d" kindref="member">QCPItemPosition::pixelPosition</ref>.</para>
<para>To optimize performance you should calculate a bounding rect first (don&apos;t forget to take the pen width into account), check whether it intersects the clipRect, and only draw the item at all if this is the case.</para>
</sect2>
<sect2 id="class_q_c_p_abstract_item_1items-selection">
<title>The selectTest function</title><para>Your implementation of the <ref refid="class_q_c_p_abstract_item_1ac75a4bdcba0ce51ae22eacebb16a9dcd" kindref="member">selectTest</ref> function may use the helpers <ref refid="class_q_c_p_vector2_d_1a14840cd3da80cfee4eb3f8977cab89ab" kindref="member">QCPVector2D::distanceSquaredToLine</ref> and rectDistance. With these, the implementation of the selection test becomes significantly simpler for most items. See the documentation of <ref refid="class_q_c_p_abstract_item_1ac75a4bdcba0ce51ae22eacebb16a9dcd" kindref="member">selectTest</ref> for what the function parameters mean and what the function should return.</para>
</sect2>
<sect2 id="class_q_c_p_abstract_item_1anchors">
<title>Providing anchors</title><para>Providing anchors (<ref refid="class_q_c_p_item_anchor" kindref="compound">QCPItemAnchor</ref>) starts off like adding a position. First you create a public member, e.g.</para>
<para><programlisting><codeline><highlight class="normal">QCPItemAnchor<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bottom;</highlight></codeline>
</programlisting></para>
<para>and create it in the constructor with the createAnchor function, assigning it a name and an anchor id (an integer enumerating all anchors on the item, you may create an own enum for this). Since anchors can be placed anywhere, relative to the item&apos;s position(s), your item needs to provide the position of every anchor with the reimplementation of the anchorPixelPosition(int
anchorId) function.</para>
<para>In essence the <ref refid="class_q_c_p_item_anchor" kindref="compound">QCPItemAnchor</ref> is merely an intermediary that itself asks your item for the pixel position when anything attached to the anchor needs to know the coordinates. </para>
</sect2>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QCPAbstractItem</label>
        <link refid="class_q_c_p_abstract_item"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QCPItemBracket</label>
        <link refid="class_q_c_p_item_bracket"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QCPItemCurve</label>
        <link refid="class_q_c_p_item_curve"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QCPItemEllipse</label>
        <link refid="class_q_c_p_item_ellipse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QCPItemLine</label>
        <link refid="class_q_c_p_item_line"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QCPItemPixmap</label>
        <link refid="class_q_c_p_item_pixmap"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QCPItemRect</label>
        <link refid="class_q_c_p_item_rect"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QCPItemStraightLine</label>
        <link refid="class_q_c_p_item_straight_line"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QCPItemText</label>
        <link refid="class_q_c_p_item_text"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QCPItemTracer</label>
        <link refid="class_q_c_p_item_tracer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QCPAbstractItem</label>
        <link refid="class_q_c_p_abstract_item"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="14" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="11">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="18">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QObject</label>
      </node>
      <node id="5">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="3676" column="1" bodyfile="qcustomplot.h" bodystart="3677" bodyend="3745"/>
    <listofallmembers>
      <member refid="class_q_c_p_abstract_item_1a139c255ea8831642fac91748e29a5adb" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>anchor</name></member>
      <member refid="class_q_c_p_abstract_item_1ada5bad4e1196c4fc0d0d12328e24b8f2" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>anchorPixelPosition</name></member>
      <member refid="class_q_c_p_abstract_item_1a81d1ecfea3368b836cf9675a0045e659" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>anchors</name></member>
      <member refid="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>antialiased</name></member>
      <member refid="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>applyAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_item_1a5579ce9ec7cad202499886b042448b10" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>applyDefaultAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_item_1ae162314efd3fe1a6d4df11da1d275d52" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>clipAxisRect</name></member>
      <member refid="class_q_c_p_abstract_item_1a6ad60000f29afe11035e1f791dcbd45a" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>clipRect</name></member>
      <member refid="class_q_c_p_abstract_item_1a42715ad5f3d7fca6854025fa5636f436" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>clipToAxisRect</name></member>
      <member refid="class_q_c_p_abstract_item_1af3fc92527802078ca395138748b629a7" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>createAnchor</name></member>
      <member refid="class_q_c_p_abstract_item_1a75036d39c4d4e2e1a7dd145fff915d32" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>createPosition</name></member>
      <member refid="class_q_c_p_abstract_item_1af9093798cb07a861dcc73f93ca16c0c1" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>deselectEvent</name></member>
      <member refid="class_q_c_p_abstract_item_1afe12c077663d07233a1b06608783ae41" prot="protected" virt="pure-virtual"><scope>QCPAbstractItem</scope><name>draw</name></member>
      <member refid="class_q_c_p_abstract_item_1a84914f4516f9b38ef0bd89eafe3dbda7" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>hasAnchor</name></member>
      <member refid="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>initializeParentPlot</name></member>
      <member refid="class_q_c_p_layerable_1a9d4e121a7f1d2314f906fe698209cac9" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>layer</name></member>
      <member refid="class_q_c_p_layerable_1abbf8657cedea73ac1c3499b521c90eba" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>layerChanged</name></member>
      <member refid="class_q_c_p_abstract_item_1a909a3abab783de302ebf0a0e6f2bbc15" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>mAnchors</name></member>
      <member refid="class_q_c_p_layerable_1a3ab45a4c76a3333ce42eb217a81733ec" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>mAntialiased</name></member>
      <member refid="class_q_c_p_abstract_item_1a3e57cfe7da4b1ac3d6fa7281ea437361" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>mClipAxisRect</name></member>
      <member refid="class_q_c_p_abstract_item_1ad2a70ff6b658fcb84a9427f69d3f587d" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>mClipToAxisRect</name></member>
      <member refid="class_q_c_p_layerable_1aa38ec5891aff0f50b36fd63e9372a0cd" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>mLayer</name></member>
      <member refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>mouseDoubleClickEvent</name></member>
      <member refid="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>mouseMoveEvent</name></member>
      <member refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>mousePressEvent</name></member>
      <member refid="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>mouseReleaseEvent</name></member>
      <member refid="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>moveToLayer</name></member>
      <member refid="class_q_c_p_layerable_1a3291445a980053e2d17a21d15957624e" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>mParentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_abstract_item_1af94ff71b6a15ea6d028ab8bd8eccd012" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>mPositions</name></member>
      <member refid="class_q_c_p_abstract_item_1ad81eb35c8726a0f458db9df9732e0e41" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>mSelectable</name></member>
      <member refid="class_q_c_p_abstract_item_1a4bdb3457dad1d268c0f78a44152b9645" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>mSelected</name></member>
      <member refid="class_q_c_p_layerable_1a62e3aed8427d6ce3ccf716f285106cb3" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>parentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1a36ed5b292b90934b524a4e5866a3526c" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layerable_1ab20b7dbd8e0249ed61adb9622c427382" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>parentPlotInitialized</name></member>
      <member refid="class_q_c_p_abstract_item_1a2589c3d298f9a576d77d9addb440a18d" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>position</name></member>
      <member refid="class_q_c_p_abstract_item_1a709f655ac3f7f22d452714134662b454" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>positions</name></member>
      <member refid="class_q_c_p_abstract_item_1a9922507d8b4503a1fe1ed0b1030e23b6" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>QCPAbstractItem</name></member>
      <member refid="class_q_c_p_abstract_item_1a61767d414fd57af9eb1741b34268c7fc" prot="private" virt="non-virtual"><scope>QCPAbstractItem</scope><name>QCPItemAnchor</name></member>
      <member refid="class_q_c_p_layerable_1a4f87f420cb2597e2b393aab934d2f099" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_abstract_item_1a1cdf9df76adcfae45261690aa0ca2198" prot="private" virt="non-virtual"><scope>QCPAbstractItem</scope><name>QCustomPlot</name></member>
      <member refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>realVisibility</name></member>
      <member refid="class_q_c_p_abstract_item_1a7dfc2007e36d09b8b5c988a9f06d6a7e" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>rectDistance</name></member>
      <member refid="class_q_c_p_abstract_item_1ae29aa489767352b40c4aaa7ea50c5582" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>selectable</name></member>
      <member refid="class_q_c_p_abstract_item_1a5b266c11aac61cb511901f3911dac2a3" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>selectableChanged</name></member>
      <member refid="class_q_c_p_abstract_item_1aa069fba320a13639f119f82ad29ead96" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>selected</name></member>
      <member refid="class_q_c_p_abstract_item_1aa4b969c58797f39c9c0b6c07c7869d17" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>selectEvent</name></member>
      <member refid="class_q_c_p_abstract_item_1aceb5f99c361cf023c7cbe7339ea29571" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>selectionCategory</name></member>
      <member refid="class_q_c_p_abstract_item_1aa5cffb034fc65dbb91c77e02c1c14251" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>selectionChanged</name></member>
      <member refid="class_q_c_p_abstract_item_1ac75a4bdcba0ce51ae22eacebb16a9dcd" prot="public" virt="pure-virtual"><scope>QCPAbstractItem</scope><name>selectTest</name></member>
      <member refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>setAntialiased</name></member>
      <member refid="class_q_c_p_abstract_item_1a7dc75fcbcd10206fe0b75d757ea7a347" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>setClipAxisRect</name></member>
      <member refid="class_q_c_p_abstract_item_1a39e05b9d4176b9accafc746d16ca6a06" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>setClipToAxisRect</name></member>
      <member refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a" prot="protected" virt="non-virtual"><scope>QCPAbstractItem</scope><name>setParentLayerable</name></member>
      <member refid="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>setSelectable</name></member>
      <member refid="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>setSelected</name></member>
      <member refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70" prot="public" virt="non-virtual"><scope>QCPAbstractItem</scope><name>visible</name></member>
      <member refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022" prot="protected" virt="virtual"><scope>QCPAbstractItem</scope><name>wheelEvent</name></member>
      <member refid="class_q_c_p_abstract_item_1a5120698bef63cbaa8544e9f47a2f4abc" prot="public" virt="virtual"><scope>QCPAbstractItem</scope><name>~QCPAbstractItem</name></member>
      <member refid="class_q_c_p_layerable_1a4231cf5b3601d6d3a5781283e7a9735b" prot="public" virt="virtual"><scope>QCPAbstractItem</scope><name>~QCPLayerable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
