<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_env_brain" kind="class" language="C++" prot="public">
    <compoundname>EnvBrain</compoundname>
    <basecompoundref prot="public" virt="non-virtual">QObject</basecompoundref>
    <includes refid="envbrain_8h" local="no">envbrain.h</includes>
    <sectiondef kind="user-defined">
      <header>Environment update and utility slots</header>
      <memberdef kind="slot" id="class_env_brain_1a73a0f2f932651b3f4f6850a4fce53bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EnvBrain::refresh</definition>
        <argsstring>()</argsstring>
        <name>refresh</name>
        <qualifiedname>EnvBrain::refresh</qualifiedname>
        <briefdescription>
<para>Periodically refreshes environment state and visualization. </para>
        </briefdescription>
        <detaileddescription>
<para>Periodically refreshes environment state, heatmap, and visualization objects.</para>
<para>Called on a timer, updates robot positions, heatmap accumulation, centroid, and visualization elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="79" column="10" bodyfile="envbrain.cpp" bodystart="261" bodyend="364"/>
      </memberdef>
      <memberdef kind="slot" id="class_env_brain_1ad556128c5a4aeef5c114cbfc54ed12ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EnvBrain::addNoise</definition>
        <argsstring>()</argsstring>
        <name>addNoise</name>
        <qualifiedname>EnvBrain::addNoise</qualifiedname>
        <briefdescription>
<para>Adds spatial noise to the arena image and updates the visualization. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds spatial noise to the arena image.</para>
<para>Applies random noise to each tile of the arena image and updates the processed image for visualization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="83" column="10" bodyfile="envbrain.cpp" bodystart="371" bodyend="394"/>
      </memberdef>
      <memberdef kind="slot" id="class_env_brain_1a90234e0f769792007ce84557cf70ac4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EnvBrain::resetHeatMap</definition>
        <argsstring>()</argsstring>
        <name>resetHeatMap</name>
        <qualifiedname>EnvBrain::resetHeatMap</qualifiedname>
        <briefdescription>
<para>Resets the heatmap to its initial state. </para>
        </briefdescription>
        <detaileddescription>
<para>Resets the heatmap to an initial (zeroed) state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="87" column="10" bodyfile="envbrain.cpp" bodystart="108" bodyend="118"/>
      </memberdef>
      <memberdef kind="slot" id="class_env_brain_1a1db4d734dc7e60d5d7dbd56047b20638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EnvBrain::updateNoiseProps</definition>
        <argsstring>(int time_interval)</argsstring>
        <name>updateNoiseProps</name>
        <qualifiedname>EnvBrain::updateNoiseProps</qualifiedname>
        <param>
          <type>int</type>
          <declname>time_interval</declname>
        </param>
        <briefdescription>
<para>Updates the noise timer interval based on a slider/time parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates the noise timer interval exponentially with respect to a slider/time parameter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>User-defined time interval (slider value). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="92" column="10" bodyfile="envbrain.cpp" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="slot" id="class_env_brain_1a14d5ffaccf919599339db4302085f51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EnvBrain::connect_disconnect_add_noise</definition>
        <argsstring>(bool connect_bool)</argsstring>
        <name>connect_disconnect_add_noise</name>
        <qualifiedname>EnvBrain::connect_disconnect_add_noise</qualifiedname>
        <param>
          <type>bool</type>
          <declname>connect_bool</declname>
        </param>
        <briefdescription>
<para>Connects or disconnects the timer for adding noise to the environment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connect_bool</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, connect; else disconnect. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="97" column="10" bodyfile="envbrain.cpp" bodystart="139" bodyend="149"/>
      </memberdef>
      <memberdef kind="slot" id="class_env_brain_1a367687e98c7370631c8e716170c57592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EnvBrain::update_centroid</definition>
        <argsstring>()</argsstring>
        <name>update_centroid</name>
        <qualifiedname>EnvBrain::update_centroid</qualifiedname>
        <briefdescription>
<para>Updates centroid of robot distribution. (Empty or placeholder) </para>
        </briefdescription>
        <detaileddescription>
<para>(Placeholder) Updates centroid of robot distribution. [Empty function] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="101" column="10" bodyfile="envbrain.cpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="slot" id="class_env_brain_1a6be60ae154270d7f12b57c2999331d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EnvBrain::update_objects_to_draw</definition>
        <argsstring>()</argsstring>
        <name>update_objects_to_draw</name>
        <qualifiedname>EnvBrain::update_objects_to_draw</qualifiedname>
        <briefdescription>
<para>Updates arena objects (e.g. ball, robots) to be drawn. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates objects (e.g., the ball) to be drawn in the environment.</para>
<para>Handles movement, collision with arena bounds, and collisions with robot circles. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="105" column="10" bodyfile="envbrain.cpp" bodystart="164" bodyend="215"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_env_brain_1a8856272e323eb77fe872647a6314d617" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int EnvBrain::listInd</definition>
        <argsstring></argsstring>
        <name>listInd</name>
        <qualifiedname>EnvBrain::listInd</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="55" column="9" bodyfile="envbrain.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_env_brain_1af2050bed63d6ed8abf60c45883f2d57a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int EnvBrain::nList</definition>
        <argsstring></argsstring>
        <name>nList</name>
        <qualifiedname>EnvBrain::nList</qualifiedname>
        <initializer>= 500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="55" column="18" bodyfile="envbrain.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_env_brain_1a849715538277ee5c93f623e90c728463" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int EnvBrain::trace_rad</definition>
        <argsstring></argsstring>
        <name>trace_rad</name>
        <qualifiedname>EnvBrain::trace_rad</qualifiedname>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="56" column="9" bodyfile="envbrain.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_env_brain_1ac6f0b024f7c866d1e6d453bdb89800e1" prot="private" static="no" mutable="no">
        <type><ref refid="class_world_model" kindref="compound">WorldModel</ref> *</type>
        <definition>WorldModel* EnvBrain::_wm</definition>
        <argsstring></argsstring>
        <name>_wm</name>
        <qualifiedname>EnvBrain::_wm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="57" column="16" bodyfile="envbrain.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_env_brain_1a0df53171600297b3a3aa2b25a86bae85" prot="private" static="no" mutable="no">
        <type>QTimer</type>
        <definition>QTimer EnvBrain::_timer</definition>
        <argsstring></argsstring>
        <name>_timer</name>
        <qualifiedname>EnvBrain::_timer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="58" column="12" bodyfile="envbrain.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_env_brain_1afcf4bc86bf4090bd16e5940e9e076707" prot="private" static="no" mutable="no">
        <type>QTimer</type>
        <definition>QTimer EnvBrain::_timerNoise</definition>
        <argsstring></argsstring>
        <name>_timerNoise</name>
        <qualifiedname>EnvBrain::_timerNoise</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="58" column="19" bodyfile="envbrain.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_env_brain_1a078061ce6b6c03d85ed1998eddb5c8c4" prot="private" static="no" mutable="no">
        <type>cv::Mat</type>
        <definition>cv::Mat EnvBrain::heatMap</definition>
        <argsstring></argsstring>
        <name>heatMap</name>
        <qualifiedname>EnvBrain::heatMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="61" column="13" bodyfile="envbrain.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_env_brain_1a172c4ec0beca404ba5e402d99194a306" prot="private" static="no" mutable="no">
        <type>cv::Mat</type>
        <definition>cv::Mat EnvBrain::heatMapOnFrame</definition>
        <argsstring></argsstring>
        <name>heatMapOnFrame</name>
        <qualifiedname>EnvBrain::heatMapOnFrame</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="61" column="21" bodyfile="envbrain.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_env_brain_1af42a99f385fa47a6c55fd06b433f75a8" prot="private" static="no" mutable="no">
        <type>cv::Mat</type>
        <definition>cv::Mat EnvBrain::circTemp</definition>
        <argsstring></argsstring>
        <name>circTemp</name>
        <qualifiedname>EnvBrain::circTemp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="61" column="36" bodyfile="envbrain.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_env_brain_1adc85f7135e8d60e5177234578a88a726" prot="private" static="no" mutable="no">
        <type>QImage</type>
        <definition>QImage EnvBrain::arenaImage</definition>
        <argsstring></argsstring>
        <name>arenaImage</name>
        <qualifiedname>EnvBrain::arenaImage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="67" column="12" bodyfile="envbrain.h" bodystart="67" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_env_brain_1a7d800111d2410a56b09a7e6682296e90" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>EnvBrain::EnvBrain</definition>
        <argsstring>(WorldModel *wm=nullptr)</argsstring>
        <name>EnvBrain</name>
        <qualifiedname>EnvBrain::EnvBrain</qualifiedname>
        <param>
          <type><ref refid="class_world_model" kindref="compound">WorldModel</ref> *</type>
          <declname>wm</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Constructs the <ref refid="class_env_brain" kindref="compound">EnvBrain</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the world model.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Initializes environment logic, heatmaps, ball velocity, and timers for periodic updates. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the world model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="32" column="14" bodyfile="envbrain.cpp" bodystart="19" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_env_brain_1ab2f7fcfa5617d92525e0f1dead43ba49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QPoint &gt;</type>
        <definition>QList&lt; QPoint &gt; EnvBrain::makeGridPoints</definition>
        <argsstring>(int nRows=1, int nCols=1, int dx=10, int dy=10, QPoint origin=QPoint(0, 0))</argsstring>
        <name>makeGridPoints</name>
        <qualifiedname>EnvBrain::makeGridPoints</qualifiedname>
        <param>
          <type>int</type>
          <declname>nRows</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nCols</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>dx</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>dy</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>QPoint</type>
          <declname>origin</declname>
          <defval>QPoint(0, 0)</defval>
        </param>
        <briefdescription>
<para>Generates a grid of points within the arena. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates a grid of points within the arena, helpful for initialization of an experiment.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nRows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nCols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Horizontal spacing between points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dy</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertical spacing between points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>Top-left origin for the grid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of grid points. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="43" column="11" bodyfile="envbrain.cpp" bodystart="65" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_env_brain_1a6bda35f9f16d138f4c82c3b9ba8dbc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QList&lt; QPoint &gt;</type>
        <definition>QList&lt; QPoint &gt; EnvBrain::makeStarPoints</definition>
        <argsstring>(int nArms=5, int nLayers=10, int d=10, QPoint origin=QPoint(0, 0))</argsstring>
        <name>makeStarPoints</name>
        <qualifiedname>EnvBrain::makeStarPoints</qualifiedname>
        <param>
          <type>int</type>
          <declname>nArms</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nLayers</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>QPoint</type>
          <declname>origin</declname>
          <defval>QPoint(0, 0)</defval>
        </param>
        <briefdescription>
<para>Generates star-shaped point arrangements centered at a given origin. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates star-shaped point arrangements centered at a given origin, helpful for initialization of an experiment.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nArms</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of star arms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nLayers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of layers (distance steps) on each arm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance between layers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>Center of the star. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of star points. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="envbrain.h" line="52" column="11" bodyfile="envbrain.cpp" bodystart="88" bodyend="103"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Environment logic and utility class for the robot arena. </para>
    </briefdescription>
    <detaileddescription>
<para>Handles collective environment updates, heatmap operations, spatial noise, and geometry generation. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>EnvBrain</label>
        <link refid="class_env_brain"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>EnvBrain</label>
        <link refid="class_env_brain"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QObject</label>
      </node>
    </collaborationgraph>
    <location file="envbrain.h" line="24" column="1" bodyfile="envbrain.h" bodystart="25" bodyend="111"/>
    <listofallmembers>
      <member refid="class_env_brain_1a0df53171600297b3a3aa2b25a86bae85" prot="private" virt="non-virtual"><scope>EnvBrain</scope><name>_timer</name></member>
      <member refid="class_env_brain_1afcf4bc86bf4090bd16e5940e9e076707" prot="private" virt="non-virtual"><scope>EnvBrain</scope><name>_timerNoise</name></member>
      <member refid="class_env_brain_1ac6f0b024f7c866d1e6d453bdb89800e1" prot="private" virt="non-virtual"><scope>EnvBrain</scope><name>_wm</name></member>
      <member refid="class_env_brain_1ad556128c5a4aeef5c114cbfc54ed12ae" prot="public" virt="non-virtual"><scope>EnvBrain</scope><name>addNoise</name></member>
      <member refid="class_env_brain_1adc85f7135e8d60e5177234578a88a726" prot="private" virt="non-virtual"><scope>EnvBrain</scope><name>arenaImage</name></member>
      <member refid="class_env_brain_1af42a99f385fa47a6c55fd06b433f75a8" prot="private" virt="non-virtual"><scope>EnvBrain</scope><name>circTemp</name></member>
      <member refid="class_env_brain_1a14d5ffaccf919599339db4302085f51b" prot="public" virt="non-virtual"><scope>EnvBrain</scope><name>connect_disconnect_add_noise</name></member>
      <member refid="class_env_brain_1a7d800111d2410a56b09a7e6682296e90" prot="public" virt="non-virtual"><scope>EnvBrain</scope><name>EnvBrain</name></member>
      <member refid="class_env_brain_1a078061ce6b6c03d85ed1998eddb5c8c4" prot="private" virt="non-virtual"><scope>EnvBrain</scope><name>heatMap</name></member>
      <member refid="class_env_brain_1a172c4ec0beca404ba5e402d99194a306" prot="private" virt="non-virtual"><scope>EnvBrain</scope><name>heatMapOnFrame</name></member>
      <member refid="class_env_brain_1a8856272e323eb77fe872647a6314d617" prot="private" virt="non-virtual"><scope>EnvBrain</scope><name>listInd</name></member>
      <member refid="class_env_brain_1ab2f7fcfa5617d92525e0f1dead43ba49" prot="public" virt="non-virtual"><scope>EnvBrain</scope><name>makeGridPoints</name></member>
      <member refid="class_env_brain_1a6bda35f9f16d138f4c82c3b9ba8dbc77" prot="public" virt="non-virtual"><scope>EnvBrain</scope><name>makeStarPoints</name></member>
      <member refid="class_env_brain_1af2050bed63d6ed8abf60c45883f2d57a" prot="private" virt="non-virtual"><scope>EnvBrain</scope><name>nList</name></member>
      <member refid="class_env_brain_1a73a0f2f932651b3f4f6850a4fce53bfb" prot="public" virt="non-virtual"><scope>EnvBrain</scope><name>refresh</name></member>
      <member refid="class_env_brain_1a90234e0f769792007ce84557cf70ac4a" prot="public" virt="non-virtual"><scope>EnvBrain</scope><name>resetHeatMap</name></member>
      <member refid="class_env_brain_1a849715538277ee5c93f623e90c728463" prot="private" virt="non-virtual"><scope>EnvBrain</scope><name>trace_rad</name></member>
      <member refid="class_env_brain_1a367687e98c7370631c8e716170c57592" prot="public" virt="non-virtual"><scope>EnvBrain</scope><name>update_centroid</name></member>
      <member refid="class_env_brain_1a6be60ae154270d7f12b57c2999331d9b" prot="public" virt="non-virtual"><scope>EnvBrain</scope><name>update_objects_to_draw</name></member>
      <member refid="class_env_brain_1a1db4d734dc7e60d5d7dbd56047b20638" prot="public" virt="non-virtual"><scope>EnvBrain</scope><name>updateNoiseProps</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
