<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_abstract_plottable1_d" kind="class" language="C++" prot="public">
    <compoundname>QCPAbstractPlottable1D</compoundname>
    <basecompoundref refid="class_q_c_p_abstract_plottable" prot="public" virt="non-virtual">QCPAbstractPlottable</basecompoundref>
    <basecompoundref refid="class_q_c_p_plottable_interface1_d" prot="public" virt="non-virtual">QCPPlottableInterface1D</basecompoundref>
    <includes refid="qcustomplot_8h" local="no">qcustomplot.h</includes>
    <templateparamlist>
      <param>
        <type>class DataType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_abstract_plottable1_d_1ac139cf70590707a1fb40eabe97fac246" prot="protected" static="no" mutable="no">
        <type>QSharedPointer&lt; <ref refid="class_q_c_p_data_container" kindref="compound">QCPDataContainer</ref>&lt; DataType &gt; &gt;</type>
        <definition>QSharedPointer&lt;QCPDataContainer&lt;DataType&gt; &gt; QCPAbstractPlottable1D&lt; DataType &gt;::mDataContainer</definition>
        <argsstring></argsstring>
        <name>mDataContainer</name>
        <qualifiedname>QCPAbstractPlottable1D::mDataContainer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4167" column="18" bodyfile="qcustomplot.h" bodystart="4167" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1a30b2e50ab0afce65f104ea7a95440315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPAbstractPlottable1D&lt; DataType &gt;::QCPAbstractPlottable1D</definition>
        <argsstring>(QCPAxis *keyAxis, QCPAxis *valueAxis)</argsstring>
        <name>QCPAbstractPlottable1D</name>
        <qualifiedname>QCPAbstractPlottable1D::QCPAbstractPlottable1D</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>keyAxis</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>valueAxis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forwards <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> to the <ref refid="class_q_c_p_abstract_plottable_1af78a036e40db6f53a31abadc5323715a" kindref="member">QCPAbstractPlottable</ref> constructor and allocates the <emphasis>mDataContainer</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4146" column="3" bodyfile="qcustomplot.h" bodystart="4367" bodyend="4371"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1ae4d821dbdc530b6910321e53599ec39b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPAbstractPlottable1D&lt; DataType &gt;::~QCPAbstractPlottable1D</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>~QCPAbstractPlottable1D</name>
        <qualifiedname>QCPAbstractPlottable1D::~QCPAbstractPlottable1D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4147" column="11" bodyfile="qcustomplot.h" bodystart="4374" bodyend="4376"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1ab5dd99e4f1621e7dbd63438e0b02984e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int QCPAbstractPlottable1D&lt; DataType &gt;::dataCount</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>dataCount</name>
        <qualifiedname>QCPAbstractPlottable1D::dataCount</qualifiedname>
        <reimplements refid="class_q_c_p_plottable_interface1_d_1adf4ce17d263b506df80d0ac37e497432">dataCount</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of data points of the plottable.    </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4150" column="15" bodyfile="qcustomplot.h" bodystart="4382" bodyend="4385"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1aeb156ebf5d3c8de906b428be30733ad8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double QCPAbstractPlottable1D&lt; DataType &gt;::dataMainKey</definition>
        <argsstring>(int index) const Q_DECL_OVERRIDE</argsstring>
        <name>dataMainKey</name>
        <qualifiedname>QCPAbstractPlottable1D::dataMainKey</qualifiedname>
        <reimplements refid="class_q_c_p_plottable_interface1_d_1a572ed2583cb6a2bb590a265c3fc2b004">dataMainKey</reimplements>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the main key of the data point at the given <emphasis>index</emphasis>.</para>
<para>What the main key is, is defined by the plottable&apos;s data type. See the <ref refid="class_q_c_p_data_container_1qcpdatacontainer-datatype" kindref="member">QCPDataContainer DataType</ref> documentation for details about this naming convention.    </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4151" column="18" bodyfile="qcustomplot.h" bodystart="4391" bodyend="4401"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1aa8277da921b009bce474437d50b4a2d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double QCPAbstractPlottable1D&lt; DataType &gt;::dataSortKey</definition>
        <argsstring>(int index) const Q_DECL_OVERRIDE</argsstring>
        <name>dataSortKey</name>
        <qualifiedname>QCPAbstractPlottable1D::dataSortKey</qualifiedname>
        <reimplements refid="class_q_c_p_plottable_interface1_d_1aa21351ab3d6edbcf8d95f9c377e5003b">dataSortKey</reimplements>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the sort key of the data point at the given <emphasis>index</emphasis>.</para>
<para>What the sort key is, is defined by the plottable&apos;s data type. See the <ref refid="class_q_c_p_data_container_1qcpdatacontainer-datatype" kindref="member">QCPDataContainer DataType</ref> documentation for details about this naming convention.    </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4152" column="18" bodyfile="qcustomplot.h" bodystart="4407" bodyend="4417"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1a6be0f657ba85a1688336d76ad649ecf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double QCPAbstractPlottable1D&lt; DataType &gt;::dataMainValue</definition>
        <argsstring>(int index) const Q_DECL_OVERRIDE</argsstring>
        <name>dataMainValue</name>
        <qualifiedname>QCPAbstractPlottable1D::dataMainValue</qualifiedname>
        <reimplements refid="class_q_c_p_plottable_interface1_d_1a17f6fbd78e004b6f3c8257fea50f9808">dataMainValue</reimplements>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the main value of the data point at the given <emphasis>index</emphasis>.</para>
<para>What the main value is, is defined by the plottable&apos;s data type. See the <ref refid="class_q_c_p_data_container_1qcpdatacontainer-datatype" kindref="member">QCPDataContainer DataType</ref> documentation for details about this naming convention.    </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4153" column="18" bodyfile="qcustomplot.h" bodystart="4423" bodyend="4433"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1a55f937ba6a63e56e57f0b1a6e85a333a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>QCPRange QCPAbstractPlottable1D&lt; DataType &gt;::dataValueRange</definition>
        <argsstring>(int index) const Q_DECL_OVERRIDE</argsstring>
        <name>dataValueRange</name>
        <qualifiedname>QCPAbstractPlottable1D::dataValueRange</qualifiedname>
        <reimplements refid="class_q_c_p_plottable_interface1_d_1af9a720ace6499337406a5e65d4823f57">dataValueRange</reimplements>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value range of the data point at the given <emphasis>index</emphasis>.</para>
<para>What the value range is, is defined by the plottable&apos;s data type. See the <ref refid="class_q_c_p_data_container_1qcpdatacontainer-datatype" kindref="member">QCPDataContainer DataType</ref> documentation for details about this naming convention.    </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4154" column="20" bodyfile="qcustomplot.h" bodystart="4439" bodyend="4449"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1a6ca0699a6af5f25a7565de7c50ce13b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>QPointF</type>
        <definition>QPointF QCPAbstractPlottable1D&lt; DataType &gt;::dataPixelPosition</definition>
        <argsstring>(int index) const Q_DECL_OVERRIDE</argsstring>
        <name>dataPixelPosition</name>
        <qualifiedname>QCPAbstractPlottable1D::dataPixelPosition</qualifiedname>
        <reimplements refid="class_q_c_p_plottable_interface1_d_1a35fd032c6e5226ff7b50e0f37c57922b">dataPixelPosition</reimplements>
        <reimplementedby refid="class_q_c_p_bars_1a55cdaf565cd3384158d1f7f89533bc2d">dataPixelPosition</reimplementedby>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pixel position on the widget surface at which the data point at the given <emphasis>index</emphasis> appears.</para>
<para>Usually this corresponds to the point of dataMainKey/ dataMainValue, in pixel coordinates. However, depending on the plottable, this might be a different apparent position than just a coord-to-pixel transform of those values. For example, <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref> apparent data values can be shifted depending on their stacking, bar grouping or configured base value.    </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4155" column="19" bodyfile="qcustomplot.h" bodystart="4455" bodyend="4466"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1afe0d56e39cc076032922f059b304c092" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QCPAbstractPlottable1D&lt; DataType &gt;::sortKeyIsMainKey</definition>
        <argsstring>() const Q_DECL_OVERRIDE</argsstring>
        <name>sortKeyIsMainKey</name>
        <qualifiedname>QCPAbstractPlottable1D::sortKeyIsMainKey</qualifiedname>
        <reimplements refid="class_q_c_p_plottable_interface1_d_1acec8492c49e051aaec5ca5267900a98e">sortKeyIsMainKey</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether the sort key (<ref refid="class_q_c_p_abstract_plottable1_d_1aa8277da921b009bce474437d50b4a2d8" kindref="member">dataSortKey</ref>) is identical to the main key (<ref refid="class_q_c_p_abstract_plottable1_d_1aeb156ebf5d3c8de906b428be30733ad8" kindref="member">dataMainKey</ref>).</para>
<para>What the sort and main keys are, is defined by the plottable&apos;s data type. See the <ref refid="class_q_c_p_data_container_1qcpdatacontainer-datatype" kindref="member">QCPDataContainer DataType</ref> documentation for details about this naming convention.    </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4156" column="16" bodyfile="qcustomplot.h" bodystart="4472" bodyend="4475"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref></type>
        <definition>QCPDataSelection QCPAbstractPlottable1D&lt; DataType &gt;::selectTestRect</definition>
        <argsstring>(const QRectF &amp;rect, bool onlySelectable) const Q_DECL_OVERRIDE</argsstring>
        <name>selectTestRect</name>
        <qualifiedname>QCPAbstractPlottable1D::selectTestRect</qualifiedname>
        <reimplements refid="class_q_c_p_plottable_interface1_d_1a05874ade11a735bb290bb96ccf7fdac1">selectTestRect</reimplements>
        <reimplementedby refid="class_q_c_p_bars_1ab03bb6125c3e983b89d694f75ce6b3d5">selectTestRect</reimplementedby>
        <reimplementedby refid="class_q_c_p_financial_1a3c5beb1ab028a1dba845fc9dcffc7cf4">selectTestRect</reimplementedby>
        <reimplementedby refid="class_q_c_p_statistical_box_1a42febad6ad5e924a151434cc434b4ffc">selectTestRect</reimplementedby>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implements a rect-selection algorithm assuming the data (accessed via the 1D data interface) is point-like. Most subclasses will want to reimplement this method again, to provide a more accurate hit test based on the true data visualization geometry.</para>
<para>\seebaseclassmethod </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4157" column="28" bodyfile="qcustomplot.h" bodystart="4485" bodyend="4528"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int QCPAbstractPlottable1D&lt; DataType &gt;::findBegin</definition>
        <argsstring>(double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE</argsstring>
        <name>findBegin</name>
        <qualifiedname>QCPAbstractPlottable1D::findBegin</qualifiedname>
        <reimplements refid="class_q_c_p_plottable_interface1_d_1ac8f224af7f2afeed46d82368344d8d9e">findBegin</reimplements>
        <param>
          <type>double</type>
          <declname>sortKey</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expandedRange</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the data point with a (sort-)key that is equal to, just below, or just above <emphasis>sortKey</emphasis>. If <emphasis>expandedRange</emphasis> is true, the data point just below <emphasis>sortKey</emphasis> will be considered, otherwise the one just above.</para>
<para>This can be used in conjunction with <ref refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a" kindref="member">findEnd</ref> to iterate over data points within a given key range, including or excluding the bounding data points that are just beyond the specified range.</para>
<para>If <emphasis>expandedRange</emphasis> is true but there are no data points below <emphasis>sortKey</emphasis>, 0 is returned.</para>
<para>If the container is empty, returns 0 (in that case, <ref refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a" kindref="member">findEnd</ref> will also return 0, so a loop using these methods will not iterate over the index 0).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a" kindref="member">findEnd</ref>, <ref refid="class_q_c_p_data_container_1a2ad8a5399072d99a242d3a6d2d7e278a" kindref="member">QCPDataContainer::findBegin</ref>    </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4158" column="15" bodyfile="qcustomplot.h" bodystart="4534" bodyend="4537"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int QCPAbstractPlottable1D&lt; DataType &gt;::findEnd</definition>
        <argsstring>(double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE</argsstring>
        <name>findEnd</name>
        <qualifiedname>QCPAbstractPlottable1D::findEnd</qualifiedname>
        <reimplements refid="class_q_c_p_plottable_interface1_d_1a2a6f8cad846ea18d3ab46a95047de681">findEnd</reimplements>
        <param>
          <type>double</type>
          <declname>sortKey</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expandedRange</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index one after the data point with a (sort-)key that is equal to, just above, or just below <emphasis>sortKey</emphasis>. If <emphasis>expandedRange</emphasis> is true, the data point just above <emphasis>sortKey</emphasis> will be considered, otherwise the one just below.</para>
<para>This can be used in conjunction with <ref refid="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6" kindref="member">findBegin</ref> to iterate over data points within a given key range, including the bounding data points that are just below and above the specified range.</para>
<para>If <emphasis>expandedRange</emphasis> is true but there are no data points above <emphasis>sortKey</emphasis>, the index just above the highest data point is returned.</para>
<para>If the container is empty, returns 0.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6" kindref="member">findBegin</ref>, <ref refid="class_q_c_p_data_container_1afb8b8f23cc2b7234a793a25ce79fe48f" kindref="member">QCPDataContainer::findEnd</ref>    </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4159" column="15" bodyfile="qcustomplot.h" bodystart="4543" bodyend="4546"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1a2f169c3c2989e5d08ec7a9e3eb56a261" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double QCPAbstractPlottable1D&lt; DataType &gt;::selectTest</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable, QVariant *details=nullptr) const Q_DECL_OVERRIDE</argsstring>
        <name>selectTest</name>
        <qualifiedname>QCPAbstractPlottable1D::selectTest</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable_1a8e4964b629802ce50e1427c7fb21d35b">selectTest</reimplements>
        <reimplementedby refid="class_q_c_p_bars_1ae490d8589b7e5f5d7e2e5ee88ce3e6c2">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_curve_1a6717367381d420607fae5c98b4eba022">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_financial_1a8114a6d3ab6bea0a93d4b85401f29b52">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_graph_1af524307eacb919827b88233ef7449ce3">selectTest</reimplementedby>
        <reimplementedby refid="class_q_c_p_statistical_box_1abefd8d3e0adf21c198cfc9615ddc8df1">selectTest</reimplementedby>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <param>
          <type>QVariant *</type>
          <declname>details</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implements a point-selection algorithm assuming the data (accessed via the 1D data interface) is point-like. Most subclasses will want to reimplement this method again, to provide a more accurate hit test based on the true data visualization geometry.</para>
<para>If <emphasis>details</emphasis> is not 0, it will be set to a <ref refid="class_q_c_p_data_selection" kindref="compound">QCPDataSelection</ref>, describing the closest data point to <emphasis>pos</emphasis>.</para>
<para>\seebaseclassmethod </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4162" column="18" bodyfile="qcustomplot.h" bodystart="4559" bodyend="4608"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1acb01f095cfb292f2cce2257e074554c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_q_c_p_plottable_interface1_d" kindref="compound">QCPPlottableInterface1D</ref> *</type>
        <definition>virtual QCPPlottableInterface1D * QCPAbstractPlottable1D&lt; DataType &gt;::interface1D</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>interface1D</name>
        <qualifiedname>QCPAbstractPlottable1D::interface1D</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_plottable_1a53c8b30779771f2c743104e652e74ab1">interface1D</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="class_q_c_p_plottable_interface1_d" kindref="compound">QCPPlottableInterface1D</ref> pointer to this plottable, providing access to its 1D interface.</para>
<para>\seebaseclassmethod </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4163" column="35" bodyfile="qcustomplot.h" bodystart="4163" bodyend="4163"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1ae890e62ce403c54f575c73b9529f1af8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable1D&lt; DataType &gt;::getDataSegments</definition>
        <argsstring>(QList&lt; QCPDataRange &gt; &amp;selectedSegments, QList&lt; QCPDataRange &gt; &amp;unselectedSegments) const</argsstring>
        <name>getDataSegments</name>
        <qualifiedname>QCPAbstractPlottable1D::getDataSegments</qualifiedname>
        <param>
          <type>QList&lt; <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &gt; &amp;</type>
          <declname>selectedSegments</declname>
        </param>
        <param>
          <type>QList&lt; <ref refid="class_q_c_p_data_range" kindref="compound">QCPDataRange</ref> &gt; &amp;</type>
          <declname>unselectedSegments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splits all data into selected and unselected segments and outputs them via <emphasis>selectedSegments</emphasis> and <emphasis>unselectedSegments</emphasis>, respectively.</para>
<para>This is useful when subclasses implement their draw method and need to draw selected segments with a different pen/brush than unselected segments (also see <ref refid="class_q_c_p_selection_decorator" kindref="compound">QCPSelectionDecorator</ref>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" kindref="member">setSelection</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4170" column="8" bodyfile="qcustomplot.h" bodystart="4621" bodyend="4638"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_abstract_plottable1_d_1a7adc6c3cccebb5341f11e0c2b7d54206" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAbstractPlottable1D&lt; DataType &gt;::drawPolyline</definition>
        <argsstring>(QCPPainter *painter, const QVector&lt; QPointF &gt; &amp;lineData) const</argsstring>
        <name>drawPolyline</name>
        <qualifiedname>QCPAbstractPlottable1D::drawPolyline</qualifiedname>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <param>
          <type>const QVector&lt; QPointF &gt; &amp;</type>
          <declname>lineData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A helper method which draws a line with the passed <emphasis>painter</emphasis>, according to the pixel data in <emphasis>lineData</emphasis>. NaN points create gaps in the line, as expected from <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref>&apos;s plottables (this is the main difference to QPainter&apos;s regular drawPolyline, which handles NaNs by lagging or crashing).</para>
<para>Further it uses a faster line drawing technique based on <ref refid="class_q_c_p_painter_1a0b4b1b9bd495e182c731774dc800e6e0" kindref="member">QCPPainter::drawLine</ref> rather than <computeroutput>QPainter::drawPolyline</computeroutput> if the configured <ref refid="class_q_custom_plot_1a94a33cbdadbbac5934843508bcfc210d" kindref="member">QCustomPlot::setPlottingHints()</ref> and <emphasis>painter</emphasis> style allows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="4171" column="8" bodyfile="qcustomplot.h" bodystart="4651" bodyend="4706"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A template base class for plottables with one-dimensional data. </para>
    </briefdescription>
    <detaileddescription>
<para>This template class derives from <ref refid="class_q_c_p_abstract_plottable" kindref="compound">QCPAbstractPlottable</ref> and from the abstract interface <ref refid="class_q_c_p_plottable_interface1_d" kindref="compound">QCPPlottableInterface1D</ref>. It serves as a base class for all one-dimensional data (i.e. data with one key dimension), such as <ref refid="class_q_c_p_graph" kindref="compound">QCPGraph</ref> and <ref refid="class_q_c_p_curve" kindref="compound">QCPCurve</ref>.</para>
<para>The template parameter <emphasis>DataType</emphasis> is the type of the data points of this plottable (e.g. <ref refid="class_q_c_p_graph_data" kindref="compound">QCPGraphData</ref> or <ref refid="class_q_c_p_curve_data" kindref="compound">QCPCurveData</ref>). The main purpose of this base class is to provide the member <emphasis>mDataContainer</emphasis> (a shared pointer to a <ref refid="class_q_c_p_data_container" kindref="compound">QCPDataContainer&lt;DataType&gt;</ref>) and implement the according virtual methods of the <ref refid="class_q_c_p_plottable_interface1_d" kindref="compound">QCPPlottableInterface1D</ref>, such that most subclassed plottables don&apos;t need to worry about this anymore.</para>
<para>Further, it provides a convenience method for retrieving selected/unselected data segments via <ref refid="class_q_c_p_abstract_plottable1_d_1ae890e62ce403c54f575c73b9529f1af8" kindref="member">getDataSegments</ref>. This is useful when subclasses implement their draw method and need to draw selected segments with a different pen/brush than unselected segments (also see <ref refid="class_q_c_p_selection_decorator" kindref="compound">QCPSelectionDecorator</ref>).</para>
<para>This class implements basic functionality of <ref refid="class_q_c_p_abstract_plottable_1a8e4964b629802ce50e1427c7fb21d35b" kindref="member">QCPAbstractPlottable::selectTest</ref> and <ref refid="class_q_c_p_plottable_interface1_d_1a05874ade11a735bb290bb96ccf7fdac1" kindref="member">QCPPlottableInterface1D::selectTestRect</ref>, assuming point-like data points, based on the 1D data interface. In spite of that, most plottable subclasses will want to reimplement those methods again, to provide a more accurate hit test based on their specific data visualization geometry. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QCPAbstractPlottable</label>
        <link refid="class_q_c_p_abstract_plottable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QCPAbstractPlottable1D&lt; DataType &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QCPPlottableInterface1D</label>
        <link refid="class_q_c_p_plottable_interface1_d"/>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QCPAbstractPlottable</label>
        <link refid="class_q_c_p_abstract_plottable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>mSelection</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>mSelectionDecorator</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>QCPAbstractPlottable1D&lt; DataType &gt;</label>
        <link refid="class_q_c_p_abstract_plottable1_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>mAxisRect</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mDragStartRange</edgelabel>
          <edgelabel>mRange</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>mGrid</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mAxisPainter</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="15" relation="usage">
          <edgelabel>lowerEnding</edgelabel>
          <edgelabel>upperEnding</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>mInsetLayout</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>QCPDataSelection</label>
        <link refid="class_q_c_p_data_selection"/>
      </node>
      <node id="13">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mParentPlot</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>mLayer</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="23">
        <label>QCPPlottableInterface1D</label>
        <link refid="class_q_c_p_plottable_interface1_d"/>
      </node>
      <node id="12">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="22">
        <label>QCPScatterStyle</label>
        <link refid="class_q_c_p_scatter_style"/>
      </node>
      <node id="21">
        <label>QCPSelectionDecorator</label>
        <link refid="class_q_c_p_selection_decorator"/>
        <childnode refid="22" relation="usage">
          <edgelabel>mScatterStyle</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>mPlottable</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>QCPSelectionRect</label>
        <link refid="class_q_c_p_selection_rect"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>xAxis</edgelabel>
          <edgelabel>xAxis2</edgelabel>
          <edgelabel>yAxis</edgelabel>
          <edgelabel>yAxis2</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>legend</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>mSelectionRect</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
      <node id="6">
        <label>QWidget</label>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="4141" column="1" bodyfile="qcustomplot.h" bodystart="4142" bodyend="4176"/>
    <listofallmembers>
      <member refid="class_q_c_p_abstract_plottable_1aa64e93cb5b606d8110d2cc0a349bb30f" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>addToLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a70f8cabfd808f7d5204b9f18c45c13f5" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>addToLegend</name></member>
      <member refid="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>antialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a022717896dc57b638a7b5a7be7212ba9" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>antialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a795370db6b1309de0ab60b633efb5ec2" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>antialiasedScatters</name></member>
      <member refid="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>applyAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac032077fb0db93d6faa3273d02363398" prot="protected" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>applyDefaultAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a8d06a59ea23324cce6330ebf2262c0ed" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>applyFillAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac95f26b15a1e5d9c7bd2c0a46d760fc9" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>applyScattersAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a893b4896dfd92b68b05b2600b80f5826" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>brush</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a635cee3effc07ad421414c76fd83548c" prot="protected" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>clipRect</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>coordsToPixels</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a5acb50ae984eef09a7ab92315d2ad708" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>coordsToPixels</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ab5dd99e4f1621e7dbd63438e0b02984e" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>dataCount</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1aeb156ebf5d3c8de906b428be30733ad8" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>dataMainKey</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a6be0f657ba85a1688336d76ad649ecf2" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>dataMainValue</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a6ca0699a6af5f25a7565de7c50ce13b2" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>dataPixelPosition</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1aa8277da921b009bce474437d50b4a2d8" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>dataSortKey</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a55f937ba6a63e56e57f0b1a6e85a333a" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>dataValueRange</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a9b104d9da4f38f934363945c313bf82e" prot="protected" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>deselectEvent</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a453f676a5cee7bf846c5f0fa05ea84b3" prot="protected" virt="pure-virtual"><scope>QCPAbstractPlottable1D</scope><name>draw</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a71c259f4f96533d12df152c446b17425" prot="protected" virt="pure-virtual"><scope>QCPAbstractPlottable1D</scope><name>drawLegendIcon</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a7adc6c3cccebb5341f11e0c2b7d54206" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>drawPolyline</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ad0b46d25cde3d035b180fb8f10c056e6" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>findBegin</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a6e3ba20c9160d7361e58070390d10b1a" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>findEnd</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ae890e62ce403c54f575c73b9529f1af8" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>getDataSegments</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a56b4d9000f4de0de86c566c84eb05a21" prot="public" virt="pure-virtual"><scope>QCPAbstractPlottable1D</scope><name>getKeyRange</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa81c95aec08d86cdd5407e48b83ab186" prot="public" virt="pure-virtual"><scope>QCPAbstractPlottable1D</scope><name>getValueRange</name></member>
      <member refid="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>initializeParentPlot</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1acb01f095cfb292f2cce2257e074554c4" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>interface1D</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa6f25b97ee99988fe352f17cb9ed962b" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>keyAxis</name></member>
      <member refid="class_q_c_p_layerable_1a9d4e121a7f1d2314f906fe698209cac9" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>layer</name></member>
      <member refid="class_q_c_p_layerable_1abbf8657cedea73ac1c3499b521c90eba" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>layerChanged</name></member>
      <member refid="class_q_c_p_layerable_1a3ab45a4c76a3333ce42eb217a81733ec" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mAntialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a152ac765bedf927fb240545d11d453ea" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mAntialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa115755e525a8e3a86dc683f9cab755b" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mAntialiasedScatters</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a33f00674c0161c13315ab9da0895418e" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mBrush</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ac139cf70590707a1fb40eabe97fac246" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mDataContainer</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mKeyAxis</name></member>
      <member refid="class_q_c_p_layerable_1aa38ec5891aff0f50b36fd63e9372a0cd" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mLayer</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac29ffef424e2488675930de18cde612a" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mName</name></member>
      <member refid="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81" prot="protected" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>mouseDoubleClickEvent</name></member>
      <member refid="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4" prot="protected" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>mouseMoveEvent</name></member>
      <member refid="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376" prot="protected" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>mousePressEvent</name></member>
      <member refid="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c" prot="protected" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>mouseReleaseEvent</name></member>
      <member refid="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>moveToLayer</name></member>
      <member refid="class_q_c_p_layerable_1a3291445a980053e2d17a21d15957624e" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mParentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a67bc0622fd1b9fa14e54c14922dcec66" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mPen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3944521f7bec90974737c9d192fc57ba" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mSelectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a206aa62c9eba32c82e892b29cdbf6314" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mSelection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a0dbc731cab717f4ff67b4ca100c74046" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mSelectionDecorator</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2901452ca4aea911a1827717934a4bda" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mValueAxis</name></member>
      <member refid="class_q_c_p_layerable_1a62e3aed8427d6ce3ccf716f285106cb3" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a52c226eefcb1920240eeabae574d28c0" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>name</name></member>
      <member refid="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>parentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1a36ed5b292b90934b524a4e5866a3526c" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layerable_1ab20b7dbd8e0249ed61adb9622c427382" prot="protected" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>parentPlotInitialized</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ad5972efc31344e5a7a78ab4f8864b2d3" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>pen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3903c1120ab5c27e7fa46b597ef267bd" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>pixelsToCoords</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a28d32c0062b9450847851ffdee1c5f69" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>pixelsToCoords</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af78a036e40db6f53a31abadc5323715a" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>QCPAbstractPlottable</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a30b2e50ab0afce65f104ea7a95440315" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>QCPAbstractPlottable1D</name></member>
      <member refid="class_q_c_p_layerable_1a4f87f420cb2597e2b393aab934d2f099" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>realVisibility</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3cc235007e2343a65ad4f463767e0e20" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>removeFromLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac95fb2604d9106d0852ad9ceb326fe8c" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>removeFromLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>rescaleAxes</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ae96b83c961e257da116c6acf9c7da308" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>rescaleKeyAxis</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a714eaf36b12434cd71846215504db82e" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>rescaleValueAxis</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a016653741033bd332d1d4c3c725cc284" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>selectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a663b1a44123c8340ac041a29d1e2c973" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>selectableChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a0b3b514474fe93354fc74cfc144184b4" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>selected</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829" prot="protected" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>selectEvent</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a040bf09f41d456284cfd39cc37aa068f" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>selection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af80ad8531642e786b6f4fad551c203c4" prot="protected" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>selectionCategory</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3af66432b1dca93b28e00e78a8c7c1d9" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>selectionChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a787a9c39421059006891744b731fa473" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>selectionChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7861518e47ca0c6a0c386032c2db075e" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>selectionDecorator</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a2f169c3c2989e5d08ec7a9e3eb56a261" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>selectTest</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1a22377bf6e57ab7eedbc9e489250c6ded" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>selectTestRect</name></member>
      <member refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setAntialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a089d6b5577120239b55c39ed27c39536" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setAntialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2f03f067ede2ed4da6f7d0e4777a3f02" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setAntialiasedScatters</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setBrush</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a8524fa2994c63c0913ebd9bb2ffa3920" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setKeyAxis</name></member>
      <member refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ab79c7ba76bc7fa89a4b3580e12149f1f" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setName</name></member>
      <member refid="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a" prot="protected" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setParentLayerable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setPen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setSelectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setSelection</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a20e266ad646f8c4a7e4631040510e5d9" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setSelectionDecorator</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a71626a07367e241ec62ad2c34baf21cb" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setValueAxis</name></member>
      <member refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1afe0d56e39cc076032922f059b304c092" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>sortKeyIsMainKey</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a842b3831660d3e33b73863fd133889dd" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>valueAxis</name></member>
      <member refid="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70" prot="public" virt="non-virtual"><scope>QCPAbstractPlottable1D</scope><name>visible</name></member>
      <member refid="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022" prot="protected" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>wheelEvent</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3223d1e2073bd1d3516863a1dce554b0" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>~QCPAbstractPlottable</name></member>
      <member refid="class_q_c_p_abstract_plottable1_d_1ae4d821dbdc530b6910321e53599ec39b" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>~QCPAbstractPlottable1D</name></member>
      <member refid="class_q_c_p_layerable_1a4231cf5b3601d6d3a5781283e7a9735b" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>~QCPLayerable</name></member>
      <member refid="class_q_c_p_plottable_interface1_d_1a97508cd3c61b9e8580b9f0d9964f7fb1" prot="public" virt="virtual"><scope>QCPAbstractPlottable1D</scope><name>~QCPPlottableInterface1D</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
