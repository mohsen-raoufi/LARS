<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_axis_ticker_date_time" kind="class" language="C++" prot="public">
    <compoundname>QCPAxisTickerDateTime</compoundname>
    <basecompoundref refid="class_q_c_p_axis_ticker" prot="public" virt="non-virtual">QCPAxisTicker</basecompoundref>
    <sectiondef kind="protected-type">
      <memberdef kind="enum" id="class_q_c_p_axis_ticker_date_time_1af2c7c60821a6234ca7a172f42ef7f1d8" prot="protected" static="no" strong="no">
        <type></type>
        <name>DateStrategy</name>
        <qualifiedname>QCPAxisTickerDateTime::DateStrategy</qualifiedname>
        <enumvalue id="class_q_c_p_axis_ticker_date_time_1af2c7c60821a6234ca7a172f42ef7f1d8a02076ab726129e1ab9e0f999d4314309" prot="protected">
          <name>dsNone</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_c_p_axis_ticker_date_time_1af2c7c60821a6234ca7a172f42ef7f1d8a39644957223102224f35662da3ab1a14" prot="protected">
          <name>dsUniformTimeInDay</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_c_p_axis_ticker_date_time_1af2c7c60821a6234ca7a172f42ef7f1d8a7889e1531db9ce1c5d8957b4f0de58ad" prot="protected">
          <name>dsUniformDayInMonth</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1796" column="3" bodyfile="qcustomplot.h" bodystart="1796" bodyend="1796"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_axis_ticker_date_time_1adbbb25add598377998c0c57dbd29adaf" prot="protected" static="no" mutable="no">
        <type>QString</type>
        <definition>QString QCPAxisTickerDateTime::mDateTimeFormat</definition>
        <argsstring></argsstring>
        <name>mDateTimeFormat</name>
        <qualifiedname>QCPAxisTickerDateTime::mDateTimeFormat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1790" column="11" bodyfile="qcustomplot.h" bodystart="1790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_ticker_date_time_1a5f5abe83c371f13eb3415585e638dba9" prot="protected" static="no" mutable="no">
        <type>Qt::TimeSpec</type>
        <definition>Qt::TimeSpec QCPAxisTickerDateTime::mDateTimeSpec</definition>
        <argsstring></argsstring>
        <name>mDateTimeSpec</name>
        <qualifiedname>QCPAxisTickerDateTime::mDateTimeSpec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1791" column="16" bodyfile="qcustomplot.h" bodystart="1791" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_ticker_date_time_1af83bcfe53294702b6c9199616744f6b5" prot="protected" static="no" mutable="no">
        <type>QTimeZone</type>
        <definition>QTimeZone QCPAxisTickerDateTime::mTimeZone</definition>
        <argsstring></argsstring>
        <name>mTimeZone</name>
        <qualifiedname>QCPAxisTickerDateTime::mTimeZone</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1793" column="13" bodyfile="qcustomplot.h" bodystart="1793" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_axis_ticker_date_time_1a7be1477443d73fef8dd25a07d9fe4b20" prot="protected" static="no" mutable="no">
        <type>enum QCPAxisTickerDateTime::DateStrategy</type>
        <definition>enum QCPAxisTickerDateTime::DateStrategy QCPAxisTickerDateTime::mDateStrategy</definition>
        <argsstring></argsstring>
        <name>mDateStrategy</name>
        <qualifiedname>QCPAxisTickerDateTime::mDateStrategy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1796" column="34"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a84cc5c6bbc7c99c1f9bd4b3a392e1b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPAxisTickerDateTime::QCPAxisTickerDateTime</definition>
        <argsstring>()</argsstring>
        <name>QCPAxisTickerDateTime</name>
        <qualifiedname>QCPAxisTickerDateTime::QCPAxisTickerDateTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs the ticker and sets reasonable default values. Axis tickers are commonly created managed by a QSharedPointer, which then can be passed to <ref refid="class_q_c_p_axis_1a4ee03fcd2c74d05cd1a419b9af5cfbdc" kindref="member">QCPAxis::setTicker</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1765" column="3" bodyfile="qcustomplot.cpp" bodystart="6523" bodyend="6529"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1aac8e2bb32ca8ff1394c42d2d62390718" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QString</type>
        <definition>QString QCPAxisTickerDateTime::dateTimeFormat</definition>
        <argsstring>() const</argsstring>
        <name>dateTimeFormat</name>
        <qualifiedname>QCPAxisTickerDateTime::dateTimeFormat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1768" column="11" bodyfile="qcustomplot.h" bodystart="1768" bodyend="1768"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1ae688e69ba55c9247af26b6db85cf9573" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Qt::TimeSpec</type>
        <definition>Qt::TimeSpec QCPAxisTickerDateTime::dateTimeSpec</definition>
        <argsstring>() const</argsstring>
        <name>dateTimeSpec</name>
        <qualifiedname>QCPAxisTickerDateTime::dateTimeSpec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1769" column="16" bodyfile="qcustomplot.h" bodystart="1769" bodyend="1769"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a64a8f7751d9d6deb0d9fd7513696f7b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QTimeZone</type>
        <definition>QTimeZone QCPAxisTickerDateTime::timeZone</definition>
        <argsstring>() const</argsstring>
        <name>timeZone</name>
        <qualifiedname>QCPAxisTickerDateTime::timeZone</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1771" column="13" bodyfile="qcustomplot.h" bodystart="1771" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1ad52660a82f688395468674d555f6a86b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisTickerDateTime::setDateTimeFormat</definition>
        <argsstring>(const QString &amp;format)</argsstring>
        <name>setDateTimeFormat</name>
        <qualifiedname>QCPAxisTickerDateTime::setDateTimeFormat</qualifiedname>
        <param>
          <type>const QString &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the format in which dates and times are displayed as tick labels. For details about the <emphasis>format</emphasis> string, see the documentation of QDateTime::toString().</para>
<para>Typical expressions are <table rows="23" cols="2"><row>
<entry thead="no"><para><computeroutput>d</computeroutput> </para>
</entry><entry thead="no"><para>The day as a number without a leading zero (1 to 31)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>dd</computeroutput> </para>
</entry><entry thead="no"><para>The day as a number with a leading zero (01 to 31)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>ddd</computeroutput> </para>
</entry><entry thead="no"><para>The abbreviated localized day name (e.g. &apos;Mon&apos; to &apos;Sun&apos;). Uses the system locale to localize the name, i.e. QLocale::system().</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>dddd</computeroutput> </para>
</entry><entry thead="no"><para>The long localized day name (e.g. &apos;Monday&apos; to &apos;Sunday&apos;). Uses the system locale to localize the name, i.e. QLocale::system().</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>M</computeroutput> </para>
</entry><entry thead="no"><para>The month as a number without a leading zero (1 to 12)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>MM</computeroutput> </para>
</entry><entry thead="no"><para>The month as a number with a leading zero (01 to 12)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>MMM</computeroutput> </para>
</entry><entry thead="no"><para>The abbreviated localized month name (e.g. &apos;Jan&apos; to &apos;Dec&apos;). Uses the system locale to localize the name, i.e. QLocale::system().</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>MMMM</computeroutput> </para>
</entry><entry thead="no"><para>The long localized month name (e.g. &apos;January&apos; to &apos;December&apos;). Uses the system locale to localize the name, i.e. QLocale::system().</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>yy</computeroutput> </para>
</entry><entry thead="no"><para>The year as a two digit number (00 to 99)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>yyyy</computeroutput> </para>
</entry><entry thead="no"><para>The year as a four digit number. If the year is negative, a minus sign is prepended, making five characters.</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>h</computeroutput> </para>
</entry><entry thead="no"><para>The hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>hh</computeroutput> </para>
</entry><entry thead="no"><para>The hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>H</computeroutput> </para>
</entry><entry thead="no"><para>The hour without a leading zero (0 to 23, even with AM/PM display)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>HH</computeroutput> </para>
</entry><entry thead="no"><para>The hour with a leading zero (00 to 23, even with AM/PM display)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>m</computeroutput> </para>
</entry><entry thead="no"><para>The minute without a leading zero (0 to 59)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>mm</computeroutput> </para>
</entry><entry thead="no"><para>The minute with a leading zero (00 to 59)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>s</computeroutput> </para>
</entry><entry thead="no"><para>The whole second, without any leading zero (0 to 59)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>ss</computeroutput> </para>
</entry><entry thead="no"><para>The whole second, with a leading zero where applicable (00 to 59)</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>z</computeroutput> </para>
</entry><entry thead="no"><para>The fractional part of the second, to go after a decimal point, without trailing zeroes (0 to 999). Thus &quot;s.z&quot; reports the seconds to full available (millisecond) precision without trailing zeroes.</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>zzz</computeroutput> </para>
</entry><entry thead="no"><para>The fractional part of the second, to millisecond precision, including trailing zeroes where applicable (000 to 999).</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>AP</computeroutput> or <computeroutput>A</computeroutput> </para>
</entry><entry thead="no"><para>Use AM/PM display. A/AP will be replaced by an upper-case version of either QLocale::amText() or QLocale::pmText().</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>ap</computeroutput> or <computeroutput>a</computeroutput> </para>
</entry><entry thead="no"><para>Use am/pm display. a/ap will be replaced by a lower-case version of either QLocale::amText() or QLocale::pmText().</para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>t</computeroutput> </para>
</entry><entry thead="no"><para>The timezone (for example &quot;CEST&quot;)</para>
</entry></row>
</table>
</para>
<para>Newlines can be inserted with <computeroutput>&quot;\n&quot;</computeroutput>, literal strings (even when containing above expressions) by encapsulating them using single-quotes. A literal single quote can be generated by using two consecutive single quotes in the format.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_ticker_date_time_1afbd987c7197e42ab61e67fb1c38abebc" kindref="member">setDateTimeSpec</ref>, <ref refid="class_q_c_p_axis_ticker_date_time_1a2e46bf56e771b08e1d344fd95f3dc405" kindref="member">setTimeZone</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1775" column="8" bodyfile="qcustomplot.cpp" bodystart="6568" bodyend="6571"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1afbd987c7197e42ab61e67fb1c38abebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisTickerDateTime::setDateTimeSpec</definition>
        <argsstring>(Qt::TimeSpec spec)</argsstring>
        <name>setDateTimeSpec</name>
        <qualifiedname>QCPAxisTickerDateTime::setDateTimeSpec</qualifiedname>
        <param>
          <type>Qt::TimeSpec</type>
          <declname>spec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the time spec that is used for creating the tick labels from corresponding dates/times.</para>
<para>The default value of QDateTime objects (and also <ref refid="class_q_c_p_axis_ticker_date_time" kindref="compound">QCPAxisTickerDateTime</ref>) is <computeroutput>Qt::LocalTime</computeroutput>. However, if the displayed tick labels shall be given in UTC, set <emphasis>spec</emphasis> to <computeroutput>Qt::UTC</computeroutput>.</para>
<para>Tick labels corresponding to other time zones can be achieved with <ref refid="class_q_c_p_axis_ticker_date_time_1a2e46bf56e771b08e1d344fd95f3dc405" kindref="member">setTimeZone</ref> (which sets <emphasis>spec</emphasis> to <computeroutput>Qt::TimeZone</computeroutput> internally). Note that if <emphasis>spec</emphasis> is afterwards set to not be <computeroutput>Qt::TimeZone</computeroutput> again, the <ref refid="class_q_c_p_axis_ticker_date_time_1a2e46bf56e771b08e1d344fd95f3dc405" kindref="member">setTimeZone</ref> setting will be ignored accordingly.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_ticker_date_time_1ad52660a82f688395468674d555f6a86b" kindref="member">setDateTimeFormat</ref>, <ref refid="class_q_c_p_axis_ticker_date_time_1a2e46bf56e771b08e1d344fd95f3dc405" kindref="member">setTimeZone</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1776" column="8" bodyfile="qcustomplot.cpp" bodystart="6586" bodyend="6589"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a2e46bf56e771b08e1d344fd95f3dc405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisTickerDateTime::setTimeZone</definition>
        <argsstring>(const QTimeZone &amp;zone)</argsstring>
        <name>setTimeZone</name>
        <qualifiedname>QCPAxisTickerDateTime::setTimeZone</qualifiedname>
        <param>
          <type>const QTimeZone &amp;</type>
          <declname>zone</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the time zone that is used for creating the tick labels from corresponding dates/times. The time spec (<ref refid="class_q_c_p_axis_ticker_date_time_1afbd987c7197e42ab61e67fb1c38abebc" kindref="member">setDateTimeSpec</ref>) is set to <computeroutput>Qt::TimeZone</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_ticker_date_time_1ad52660a82f688395468674d555f6a86b" kindref="member">setDateTimeFormat</ref>, <ref refid="class_q_c_p_axis_ticker_date_time_1a2e46bf56e771b08e1d344fd95f3dc405" kindref="member">setTimeZone</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1778" column="8" bodyfile="qcustomplot.cpp" bodystart="6598" bodyend="6602"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a5388e048cbd32cf1ba730b9f1859eb5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisTickerDateTime::setTickOrigin</definition>
        <argsstring>(double origin)</argsstring>
        <name>setTickOrigin</name>
        <qualifiedname>QCPAxisTickerDateTime::setTickOrigin</qualifiedname>
        <param>
          <type>double</type>
          <declname>origin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the tick origin (see <ref refid="class_q_c_p_axis_ticker_1ab509c7e500293bf66a8409f0d7c23943" kindref="member">QCPAxisTicker::setTickOrigin</ref>) in seconds since Epoch (1. Jan 1970, 00:00 UTC). For the date time ticker it might be more intuitive to use the overload which directly takes a QDateTime, see <ref refid="class_q_c_p_axis_ticker_date_time_1a2ea905872b8171847a49a5e093fb0c48" kindref="member">setTickOrigin(const QDateTime &amp;origin)</ref>.</para>
<para>This is useful to define the month/day/time recurring at greater tick interval steps. For example, If you pass 15. July, 9:45 to this method and the tick interval happens to be one tick per year, the ticks will end up on 15. July at 9:45 of every year. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1780" column="8" bodyfile="qcustomplot.cpp" bodystart="6614" bodyend="6617"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a2ea905872b8171847a49a5e093fb0c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPAxisTickerDateTime::setTickOrigin</definition>
        <argsstring>(const QDateTime &amp;origin)</argsstring>
        <name>setTickOrigin</name>
        <qualifiedname>QCPAxisTickerDateTime::setTickOrigin</qualifiedname>
        <param>
          <type>const QDateTime &amp;</type>
          <declname>origin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the tick origin (see <ref refid="class_q_c_p_axis_ticker_1ab509c7e500293bf66a8409f0d7c23943" kindref="member">QCPAxisTicker::setTickOrigin</ref>) as a QDateTime <emphasis>origin</emphasis>.</para>
<para>This is useful to define the month/day/time recurring at greater tick interval steps. For example, If you pass 15. July, 9:45 to this method and the tick interval happens to be one tick per year, the ticks will end up on 15. July at 9:45 of every year. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1781" column="8" bodyfile="qcustomplot.cpp" bodystart="6626" bodyend="6629"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a4c1761ad057f5564804a53f942629b53" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QDateTime</type>
        <definition>QDateTime QCPAxisTickerDateTime::keyToDateTime</definition>
        <argsstring>(double key)</argsstring>
        <name>keyToDateTime</name>
        <qualifiedname>QCPAxisTickerDateTime::keyToDateTime</qualifiedname>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience method which turns <emphasis>key</emphasis> (in seconds since Epoch 1. Jan 1970, 00:00 UTC) into a QDateTime object. This can be used to turn axis coordinates to actual QDateTimes.</para>
<para>The accuracy achieved by this method is one millisecond, irrespective of the used Qt version (it works around the lack of a QDateTime::fromMSecsSinceEpoch in Qt 4.6)</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_ticker_date_time_1a23705013d5f289de98667bd46950ac8c" kindref="member">dateTimeToKey</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1784" column="20" bodyfile="qcustomplot.cpp" bodystart="6780" bodyend="6787"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a23705013d5f289de98667bd46950ac8c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QCPAxisTickerDateTime::dateTimeToKey</definition>
        <argsstring>(const QDateTime &amp;dateTime)</argsstring>
        <name>dateTimeToKey</name>
        <qualifiedname>QCPAxisTickerDateTime::dateTimeToKey</qualifiedname>
        <param>
          <type>const QDateTime &amp;</type>
          <declname>dateTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>A convenience method which turns a QDateTime object into a double value that corresponds to seconds since Epoch (1. Jan 1970, 00:00 UTC). This is the format used as axis coordinates by <ref refid="class_q_c_p_axis_ticker_date_time" kindref="compound">QCPAxisTickerDateTime</ref>.</para>
<para>The accuracy achieved by this method is one millisecond, irrespective of the used Qt version (it works around the lack of a QDateTime::toMSecsSinceEpoch in Qt 4.6)</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_ticker_date_time_1a4c1761ad057f5564804a53f942629b53" kindref="member">keyToDateTime</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1785" column="17" bodyfile="qcustomplot.cpp" bodystart="6800" bodyend="6807"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a4498f59a228a2300dff67525a6c4c250" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QCPAxisTickerDateTime::dateTimeToKey</definition>
        <argsstring>(const QDate &amp;date, Qt::TimeSpec timeSpec=Qt::LocalTime)</argsstring>
        <name>dateTimeToKey</name>
        <qualifiedname>QCPAxisTickerDateTime::dateTimeToKey</qualifiedname>
        <param>
          <type>const QDate &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>Qt::TimeSpec</type>
          <declname>timeSpec</declname>
          <defval>Qt::LocalTime</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>A convenience method which turns a QDate object into a double value that corresponds to seconds since Epoch (1. Jan 1970, 00:00 UTC). This is the format used as axis coordinates by <ref refid="class_q_c_p_axis_ticker_date_time" kindref="compound">QCPAxisTickerDateTime</ref>.</para>
<para>The returned value will be the start of the passed day of <emphasis>date</emphasis>, interpreted in the given <emphasis>timeSpec</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_axis_ticker_date_time_1a4c1761ad057f5564804a53f942629b53" kindref="member">keyToDateTime</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1786" column="17" bodyfile="qcustomplot.cpp" bodystart="6820" bodyend="6829"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a0560c14a3f87bb99ab136aca8321b32a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double QCPAxisTickerDateTime::getTickStep</definition>
        <argsstring>(const QCPRange &amp;range) Q_DECL_OVERRIDE</argsstring>
        <name>getTickStep</name>
        <qualifiedname>QCPAxisTickerDateTime::getTickStep</qualifiedname>
        <reimplements refid="class_q_c_p_axis_ticker_1a910d69bcec2de37e92d8d4e1ecf201e2">getTickStep</reimplements>
        <param>
          <type>const <ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1799" column="18" bodyfile="qcustomplot.cpp" bodystart="6644" bodyend="6669"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a78dece0d51426a3c310528d413e09193" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int QCPAxisTickerDateTime::getSubTickCount</definition>
        <argsstring>(double tickStep) Q_DECL_OVERRIDE</argsstring>
        <name>getSubTickCount</name>
        <qualifiedname>QCPAxisTickerDateTime::getSubTickCount</qualifiedname>
        <reimplements refid="class_q_c_p_axis_ticker_1a4ccc403ced7a1457ce6ba293509933c8">getSubTickCount</reimplements>
        <param>
          <type>double</type>
          <declname>tickStep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1800" column="15" bodyfile="qcustomplot.cpp" bodystart="6678" bodyend="6704"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a4dc6a03f7ea5c619477528a683ed5c18" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>QString</type>
        <definition>QString QCPAxisTickerDateTime::getTickLabel</definition>
        <argsstring>(double tick, const QLocale &amp;locale, QChar formatChar, int precision) Q_DECL_OVERRIDE</argsstring>
        <name>getTickLabel</name>
        <qualifiedname>QCPAxisTickerDateTime::getTickLabel</qualifiedname>
        <reimplements refid="class_q_c_p_axis_ticker_1a8201eb4aa8be192bf786b126eb5ee089">getTickLabel</reimplements>
        <param>
          <type>double</type>
          <declname>tick</declname>
        </param>
        <param>
          <type>const QLocale &amp;</type>
          <declname>locale</declname>
        </param>
        <param>
          <type>QChar</type>
          <declname>formatChar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1801" column="19" bodyfile="qcustomplot.cpp" bodystart="6714" bodyend="6726"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_axis_ticker_date_time_1a44c2c09a303d281801b69226e243047d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>QVector&lt; double &gt;</type>
        <definition>QVector&lt; double &gt; QCPAxisTickerDateTime::createTickVector</definition>
        <argsstring>(double tickStep, const QCPRange &amp;range) Q_DECL_OVERRIDE</argsstring>
        <name>createTickVector</name>
        <qualifiedname>QCPAxisTickerDateTime::createTickVector</qualifiedname>
        <reimplements refid="class_q_c_p_axis_ticker_1af4645a824c7bd2ca8fc7e86ebf9055bd">createTickVector</reimplements>
        <param>
          <type>double</type>
          <declname>tickStep</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="1802" column="19" bodyfile="qcustomplot.cpp" bodystart="6735" bodyend="6769"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Specialized axis ticker for calendar dates and times as axis ticks. </para>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="axisticker-datetime.png"></image>
</para>
<para>This <ref refid="class_q_c_p_axis_ticker" kindref="compound">QCPAxisTicker</ref> subclass generates ticks that correspond to real calendar dates and times. The plot axis coordinate is interpreted as Unix Time, so seconds since Epoch (January 1, 1970, 00:00 UTC). This is also used for example by QDateTime in the <computeroutput>toTime_t()/setTime_t()</computeroutput> methods with a precision of one second. Since Qt 4.7, millisecond accuracy can be obtained from QDateTime by using <computeroutput>QDateTime::fromMSecsSinceEpoch()/1000.0</computeroutput>. The static methods <ref refid="class_q_c_p_axis_ticker_date_time_1a23705013d5f289de98667bd46950ac8c" kindref="member">dateTimeToKey</ref> and <ref refid="class_q_c_p_axis_ticker_date_time_1a4c1761ad057f5564804a53f942629b53" kindref="member">keyToDateTime</ref> conveniently perform this conversion achieving a precision of one millisecond on all Qt versions.</para>
<para>The format of the date/time display in the tick labels is controlled with <ref refid="class_q_c_p_axis_ticker_date_time_1ad52660a82f688395468674d555f6a86b" kindref="member">setDateTimeFormat</ref>. If a different time spec or time zone shall be used for the tick label appearance, see <ref refid="class_q_c_p_axis_ticker_date_time_1afbd987c7197e42ab61e67fb1c38abebc" kindref="member">setDateTimeSpec</ref> or <ref refid="class_q_c_p_axis_ticker_date_time_1a2e46bf56e771b08e1d344fd95f3dc405" kindref="member">setTimeZone</ref>, respectively.</para>
<para>This ticker produces unequal tick spacing in order to provide intuitive date and time-of-day ticks. For example, if the axis range spans a few years such that there is one tick per year, ticks will be positioned on 1. January of every year. This is intuitive but, due to leap years, will result in slightly unequal tick intervals (visually unnoticeable). The same can be seen in the image above: even though the number of days varies month by month, this ticker generates ticks on the same day of each month.</para>
<para>If you would like to change the date/time that is used as a (mathematical) starting date for the ticks, use the <ref refid="class_q_c_p_axis_ticker_date_time_1a2ea905872b8171847a49a5e093fb0c48" kindref="member">setTickOrigin(const QDateTime &amp;origin)</ref> method overload, which takes a QDateTime. If you pass 15. July, 9:45 to this method, the yearly ticks will end up on 15. July at 9:45 of every year.</para>
<para>The ticker can be created and assigned to an axis like this: <programlisting filename="documentation/doc-image-generator/mainwindow.cpp"></programlisting></para>
<para><simplesect kind="note"><para>If you rather wish to display relative times in terms of days, hours, minutes, seconds and milliseconds, and are not interested in the intricacies of real calendar dates with months and (leap) years, have a look at <ref refid="class_q_c_p_axis_ticker_time" kindref="compound">QCPAxisTickerTime</ref> instead. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QCPAxisTicker</label>
        <link refid="class_q_c_p_axis_ticker"/>
      </node>
      <node id="1">
        <label>QCPAxisTickerDateTime</label>
        <link refid="class_q_c_p_axis_ticker_date_time"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QCPAxisTicker</label>
        <link refid="class_q_c_p_axis_ticker"/>
      </node>
      <node id="1">
        <label>QCPAxisTickerDateTime</label>
        <link refid="class_q_c_p_axis_ticker_date_time"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="1762" column="1" bodyfile="qcustomplot.h" bodystart="1763" bodyend="1803"/>
    <listofallmembers>
      <member refid="class_q_c_p_axis_ticker_1ac7df6c72876b7abd67c932663a0b0f6a" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>cleanMantissa</name></member>
      <member refid="class_q_c_p_axis_ticker_1a804050e408f37a0b9770c6654ebe6aa7" prot="protected" virt="virtual"><scope>QCPAxisTickerDateTime</scope><name>createLabelVector</name></member>
      <member refid="class_q_c_p_axis_ticker_1a9a6435723fa0bd366d1ea4c2cff7c33f" prot="protected" virt="virtual"><scope>QCPAxisTickerDateTime</scope><name>createSubTickVector</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a44c2c09a303d281801b69226e243047d" prot="protected" virt="virtual"><scope>QCPAxisTickerDateTime</scope><name>createTickVector</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1af2c7c60821a6234ca7a172f42ef7f1d8" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>DateStrategy</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1aac8e2bb32ca8ff1394c42d2d62390718" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>dateTimeFormat</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1ae688e69ba55c9247af26b6db85cf9573" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>dateTimeSpec</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a23705013d5f289de98667bd46950ac8c" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>dateTimeToKey</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a4498f59a228a2300dff67525a6c4c250" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>dateTimeToKey</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1af2c7c60821a6234ca7a172f42ef7f1d8a02076ab726129e1ab9e0f999d4314309" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>dsNone</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1af2c7c60821a6234ca7a172f42ef7f1d8a7889e1531db9ce1c5d8957b4f0de58ad" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>dsUniformDayInMonth</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1af2c7c60821a6234ca7a172f42ef7f1d8a39644957223102224f35662da3ab1a14" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>dsUniformTimeInDay</name></member>
      <member refid="class_q_c_p_axis_ticker_1aefbd11725678ca824add8cf926cbc856" prot="public" virt="virtual"><scope>QCPAxisTickerDateTime</scope><name>generate</name></member>
      <member refid="class_q_c_p_axis_ticker_1abe99aaaf6c512812869b0a19937c76ff" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>getMantissa</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a78dece0d51426a3c310528d413e09193" prot="protected" virt="virtual"><scope>QCPAxisTickerDateTime</scope><name>getSubTickCount</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a4dc6a03f7ea5c619477528a683ed5c18" prot="protected" virt="virtual"><scope>QCPAxisTickerDateTime</scope><name>getTickLabel</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a0560c14a3f87bb99ab136aca8321b32a" prot="protected" virt="virtual"><scope>QCPAxisTickerDateTime</scope><name>getTickStep</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a4c1761ad057f5564804a53f942629b53" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>keyToDateTime</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a7be1477443d73fef8dd25a07d9fe4b20" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>mDateStrategy</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1adbbb25add598377998c0c57dbd29adaf" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>mDateTimeFormat</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a5f5abe83c371f13eb3415585e638dba9" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>mDateTimeSpec</name></member>
      <member refid="class_q_c_p_axis_ticker_1a14a35b47d1aad11b08d18ea0e25937b8" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>mTickCount</name></member>
      <member refid="class_q_c_p_axis_ticker_1a560ef9347b1aa599a9bf0e2f29d3ec16" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>mTickOrigin</name></member>
      <member refid="class_q_c_p_axis_ticker_1ac059d6d670b2f6132c593fb4de156701" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>mTickStepStrategy</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1af83bcfe53294702b6c9199616744f6b5" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>mTimeZone</name></member>
      <member refid="class_q_c_p_axis_ticker_1a4ea0a7c4ca1c610f92b9bd5944ab4260" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>pickClosest</name></member>
      <member refid="class_q_c_p_axis_ticker_1a8fcf23c79ebd72202fe79253f9f01ea8" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>QCPAxisTicker</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a84cc5c6bbc7c99c1f9bd4b3a392e1b9d" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>QCPAxisTickerDateTime</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1ad52660a82f688395468674d555f6a86b" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>setDateTimeFormat</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1afbd987c7197e42ab61e67fb1c38abebc" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>setDateTimeSpec</name></member>
      <member refid="class_q_c_p_axis_ticker_1a47752abba8293e6dc18491501ae34008" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>setTickCount</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a5388e048cbd32cf1ba730b9f1859eb5c" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>setTickOrigin</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a2ea905872b8171847a49a5e093fb0c48" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>setTickOrigin</name></member>
      <member refid="class_q_c_p_axis_ticker_1a73b1d847c1a12159af6bfda4ebebe7d5" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>setTickStepStrategy</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a2e46bf56e771b08e1d344fd95f3dc405" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>setTimeZone</name></member>
      <member refid="class_q_c_p_axis_ticker_1aaf9edbe4169ce55e216fd067cc139452" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>tickCount</name></member>
      <member refid="class_q_c_p_axis_ticker_1ac0c6e9587c36fdeefb5518c00fe7ab15" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>tickOrigin</name></member>
      <member refid="class_q_c_p_axis_ticker_1ab6d2f9d9477821623ac9bc4b21ddf49a" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>TickStepStrategy</name></member>
      <member refid="class_q_c_p_axis_ticker_1a58df76f2ec3eb48401bdd314b0e14ba1" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>tickStepStrategy</name></member>
      <member refid="class_q_c_p_axis_ticker_date_time_1a64a8f7751d9d6deb0d9fd7513696f7b1" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>timeZone</name></member>
      <member refid="class_q_c_p_axis_ticker_1ab28cc1ab549489be7975f5ce7e717916" prot="protected" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>trimTicks</name></member>
      <member refid="class_q_c_p_axis_ticker_1ab6d2f9d9477821623ac9bc4b21ddf49aa770312b6b9b0c64a37ceeba96e0cd7f2" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>tssMeetTickCount</name></member>
      <member refid="class_q_c_p_axis_ticker_1ab6d2f9d9477821623ac9bc4b21ddf49aa9002aa2fd5633ab5556c71a26fed63a8" prot="public" virt="non-virtual"><scope>QCPAxisTickerDateTime</scope><name>tssReadability</name></member>
      <member refid="class_q_c_p_axis_ticker_1a1119d6f09ad720f9c5dfdd2559047161" prot="public" virt="virtual"><scope>QCPAxisTickerDateTime</scope><name>~QCPAxisTicker</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
