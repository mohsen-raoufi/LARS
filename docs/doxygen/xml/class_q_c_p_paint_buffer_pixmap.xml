<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_paint_buffer_pixmap" kind="class" language="C++" prot="public">
    <compoundname>QCPPaintBufferPixmap</compoundname>
    <basecompoundref refid="class_q_c_p_abstract_paint_buffer" prot="public" virt="non-virtual">QCPAbstractPaintBuffer</basecompoundref>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_paint_buffer_pixmap_1a6d7009f45f03e305f2dc00e52a9225f8" prot="protected" static="no" mutable="no">
        <type>QPixmap</type>
        <definition>QPixmap QCPPaintBufferPixmap::mBuffer</definition>
        <argsstring></argsstring>
        <name>mBuffer</name>
        <qualifiedname>QCPPaintBufferPixmap::mBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="587" column="11" bodyfile="qcustomplot.h" bodystart="587" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_paint_buffer_pixmap_1aef0224e03b9285509391fcd61a8e6844" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPPaintBufferPixmap::QCPPaintBufferPixmap</definition>
        <argsstring>(const QSize &amp;size, double devicePixelRatio)</argsstring>
        <name>QCPPaintBufferPixmap</name>
        <qualifiedname>QCPPaintBufferPixmap::QCPPaintBufferPixmap</qualifiedname>
        <param>
          <type>const QSize &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>double</type>
          <declname>devicePixelRatio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a pixmap paint buffer instancen with the specified <emphasis>size</emphasis> and <emphasis>devicePixelRatio</emphasis>, if applicable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="577" column="12" bodyfile="qcustomplot.cpp" bodystart="667" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_paint_buffer_pixmap_1a4237edf96e3710e994768124c8722e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPPaintBufferPixmap::~QCPPaintBufferPixmap</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>~QCPPaintBufferPixmap</name>
        <qualifiedname>QCPPaintBufferPixmap::~QCPPaintBufferPixmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="578" column="11" bodyfile="qcustomplot.cpp" bodystart="673" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_paint_buffer_pixmap_1a357964ef7d28cfa530338be4e5c93234" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
        <definition>QCPPainter * QCPPaintBufferPixmap::startPainting</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>startPainting</name>
        <qualifiedname>QCPPaintBufferPixmap::startPainting</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_paint_buffer_1ab1329e5e2cfc44a7cef1b5e9b6fab20d">startPainting</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> which is ready to draw to this buffer. The ownership and thus the responsibility to delete the painter after the painting operations are complete is given to the caller of this method.</para>
<para>Once you are done using the painter, delete the painter and call <ref refid="class_q_c_p_abstract_paint_buffer_1a996577a718aecb3b9b5351fab797a062" kindref="member">donePainting</ref>.</para>
<para>While a painter generated with this method is active, you must not call <ref refid="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01" kindref="member">setSize</ref>, <ref refid="class_q_c_p_abstract_paint_buffer_1a555eaad5d5c806420ff35602a1bb68fa" kindref="member">setDevicePixelRatio</ref> or <ref refid="class_q_c_p_paint_buffer_pixmap_1a14badbd010a3cde6b55817ccb7b65217" kindref="member">clear</ref>.</para>
<para>This method may return 0, if a painter couldn&apos;t be activated on the buffer. This usually indicates a problem with the respective painting backend. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="581" column="22" bodyfile="qcustomplot.cpp" bodystart="678" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_paint_buffer_pixmap_1af7bfc685e56a0a9329e57cd9a265eb74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPPaintBufferPixmap::draw</definition>
        <argsstring>(QCPPainter *painter) const Q_DECL_OVERRIDE</argsstring>
        <name>draw</name>
        <qualifiedname>QCPPaintBufferPixmap::draw</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_paint_buffer_1a1f92e533105b575951eba5f01d8d129d">draw</reimplements>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draws the contents of this buffer with the provided <emphasis>painter</emphasis>. This is the method that is used to finally join all paint buffers and draw them onto the screen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="582" column="16" bodyfile="qcustomplot.cpp" bodystart="688" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_paint_buffer_pixmap_1a14badbd010a3cde6b55817ccb7b65217" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPPaintBufferPixmap::clear</definition>
        <argsstring>(const QColor &amp;color) Q_DECL_OVERRIDE</argsstring>
        <name>clear</name>
        <qualifiedname>QCPPaintBufferPixmap::clear</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_paint_buffer_1a7fc69e37c2a8232e8b2eb8b5853aae4c">clear</reimplements>
        <param>
          <type>const QColor &amp;</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills the entire buffer with the provided <emphasis>color</emphasis>. To have an empty transparent buffer, use the named color <computeroutput>Qt::transparent</computeroutput>.</para>
<para>This method must not be called if there is currently a painter (acquired with <ref refid="class_q_c_p_paint_buffer_pixmap_1a357964ef7d28cfa530338be4e5c93234" kindref="member">startPainting</ref>) active. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="583" column="8" bodyfile="qcustomplot.cpp" bodystart="697" bodyend="700"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_paint_buffer_pixmap_1ad49f3205ba3463b1c44f8db3cfcc90f0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPPaintBufferPixmap::reallocateBuffer</definition>
        <argsstring>() Q_DECL_OVERRIDE</argsstring>
        <name>reallocateBuffer</name>
        <qualifiedname>QCPPaintBufferPixmap::reallocateBuffer</qualifiedname>
        <reimplements refid="class_q_c_p_abstract_paint_buffer_1a9bbd9f7520ccfa3e13fc737813f706e4">reallocateBuffer</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reallocates the internal buffer with the currently configured size (<ref refid="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01" kindref="member">setSize</ref>) and device pixel ratio, if applicable (<ref refid="class_q_c_p_abstract_paint_buffer_1a555eaad5d5c806420ff35602a1bb68fa" kindref="member">setDevicePixelRatio</ref>). It is called as soon as any of those properties are changed on this paint buffer.</para>
<para><simplesect kind="note"><para>Subclasses of <ref refid="class_q_c_p_abstract_paint_buffer" kindref="compound">QCPAbstractPaintBuffer</ref> must call their reimplementation of this method in their constructor, to perform the first allocation (this can not be done by the base class because calling pure virtual methods in base class constructors is not possible). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="590" column="16" bodyfile="qcustomplot.cpp" bodystart="703" bodyend="720"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A paint buffer based on QPixmap, using software raster rendering. </para>
    </briefdescription>
    <detaileddescription>
<para>This paint buffer is the default and fall-back paint buffer which uses software rendering and QPixmap as internal buffer. It is used if <ref refid="class_q_custom_plot_1a7db1adc09016329f3aef7c60da935789" kindref="member">QCustomPlot::setOpenGl</ref> is false. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QCPAbstractPaintBuffer</label>
        <link refid="class_q_c_p_abstract_paint_buffer"/>
      </node>
      <node id="1">
        <label>QCPPaintBufferPixmap</label>
        <link refid="class_q_c_p_paint_buffer_pixmap"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QCPAbstractPaintBuffer</label>
        <link refid="class_q_c_p_abstract_paint_buffer"/>
      </node>
      <node id="1">
        <label>QCPPaintBufferPixmap</label>
        <link refid="class_q_c_p_paint_buffer_pixmap"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="574" column="1" bodyfile="qcustomplot.h" bodystart="575" bodyend="591"/>
    <listofallmembers>
      <member refid="class_q_c_p_paint_buffer_pixmap_1a14badbd010a3cde6b55817ccb7b65217" prot="public" virt="virtual"><scope>QCPPaintBufferPixmap</scope><name>clear</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1aac1b981f8c1744036610ff1a6b9461f9" prot="public" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>devicePixelRatio</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a996577a718aecb3b9b5351fab797a062" prot="public" virt="virtual"><scope>QCPPaintBufferPixmap</scope><name>donePainting</name></member>
      <member refid="class_q_c_p_paint_buffer_pixmap_1af7bfc685e56a0a9329e57cd9a265eb74" prot="public" virt="virtual"><scope>QCPPaintBufferPixmap</scope><name>draw</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a76bf771cda945a6c602cf9b7d365d92b" prot="public" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>invalidated</name></member>
      <member refid="class_q_c_p_paint_buffer_pixmap_1a6d7009f45f03e305f2dc00e52a9225f8" prot="protected" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>mBuffer</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a33c1fd784478441fcff9ebf3d69af5b2" prot="protected" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>mDevicePixelRatio</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a3bc49cc9cf9daaca3a60977f010c08c9" prot="protected" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>mInvalidated</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1ae246c426222bfa18d5e8797fab73e3ce" prot="protected" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>mSize</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a3ce532c12f10b81697108835755641e2" prot="public" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>QCPAbstractPaintBuffer</name></member>
      <member refid="class_q_c_p_paint_buffer_pixmap_1aef0224e03b9285509391fcd61a8e6844" prot="public" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>QCPPaintBufferPixmap</name></member>
      <member refid="class_q_c_p_paint_buffer_pixmap_1ad49f3205ba3463b1c44f8db3cfcc90f0" prot="protected" virt="virtual"><scope>QCPPaintBufferPixmap</scope><name>reallocateBuffer</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a555eaad5d5c806420ff35602a1bb68fa" prot="public" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>setDevicePixelRatio</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1ae4c7dc70dfc66be2879ce297b2b3d67f" prot="public" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>setInvalidated</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01" prot="public" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>setSize</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a3ea8284e547985c5d263f26a6adfa11f" prot="public" virt="non-virtual"><scope>QCPPaintBufferPixmap</scope><name>size</name></member>
      <member refid="class_q_c_p_paint_buffer_pixmap_1a357964ef7d28cfa530338be4e5c93234" prot="public" virt="virtual"><scope>QCPPaintBufferPixmap</scope><name>startPainting</name></member>
      <member refid="class_q_c_p_abstract_paint_buffer_1a50fbb1265814d019a1707f4cb11e20de" prot="public" virt="virtual"><scope>QCPPaintBufferPixmap</scope><name>~QCPAbstractPaintBuffer</name></member>
      <member refid="class_q_c_p_paint_buffer_pixmap_1a4237edf96e3710e994768124c8722e76" prot="public" virt="virtual"><scope>QCPPaintBufferPixmap</scope><name>~QCPPaintBufferPixmap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
