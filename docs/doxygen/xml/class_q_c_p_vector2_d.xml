<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_q_c_p_vector2_d" kind="class" language="C++" prot="public">
    <compoundname>QCPVector2D</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_q_c_p_vector2_d_1ab6f67c521be2e7eea7d31175d086ac2c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double QCPVector2D::mX</definition>
        <argsstring></argsstring>
        <name>mX</name>
        <qualifiedname>QCPVector2D::mX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="446" column="10" bodyfile="qcustomplot.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_vector2_d_1a1b6dbdfb973c4cb478116cd610265e13" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double QCPVector2D::mY</definition>
        <argsstring></argsstring>
        <name>mY</name>
        <qualifiedname>QCPVector2D::mY</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="446" column="13" bodyfile="qcustomplot.h" bodystart="446" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a04c90748c3623044c79fa20788ffbcc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPVector2D::QCPVector2D</definition>
        <argsstring>()</argsstring>
        <name>QCPVector2D</name>
        <qualifiedname>QCPVector2D::QCPVector2D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> object and initializes the x and y coordinates to 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="408" column="3" bodyfile="qcustomplot.cpp" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a47bd86cebc5588dad6ec84349d9098d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPVector2D::QCPVector2D</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>QCPVector2D</name>
        <qualifiedname>QCPVector2D::QCPVector2D</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> object and initializes the <emphasis>x</emphasis> and <emphasis>y</emphasis> coordinates with the specified values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="409" column="3" bodyfile="qcustomplot.cpp" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1ad8f30a064dc37c90a7ba5e6732ceb5bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPVector2D::QCPVector2D</definition>
        <argsstring>(const QPoint &amp;point)</argsstring>
        <name>QCPVector2D</name>
        <qualifiedname>QCPVector2D::QCPVector2D</qualifiedname>
        <param>
          <type>const QPoint &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> object and initializes the x and y coordinates respective coordinates of the specified <emphasis>point</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="410" column="3" bodyfile="qcustomplot.cpp" bodystart="138" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a3c16eba1006c210ffc3299253fef2339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPVector2D::QCPVector2D</definition>
        <argsstring>(const QPointF &amp;point)</argsstring>
        <name>QCPVector2D</name>
        <qualifiedname>QCPVector2D::QCPVector2D</qualifiedname>
        <param>
          <type>const QPointF &amp;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> object and initializes the x and y coordinates respective coordinates of the specified <emphasis>point</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="411" column="3" bodyfile="qcustomplot.cpp" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a4a099e1f9788d52cb46deb8139aa6195" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double QCPVector2D::x</definition>
        <argsstring>() const</argsstring>
        <name>x</name>
        <qualifiedname>QCPVector2D::x</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="414" column="10" bodyfile="qcustomplot.h" bodystart="414" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a6398fb643ba380d7961a4b208f4eecf1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double QCPVector2D::y</definition>
        <argsstring>() const</argsstring>
        <name>y</name>
        <qualifiedname>QCPVector2D::y</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="415" column="10" bodyfile="qcustomplot.h" bodystart="415" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a9edab8e9318fde288dbfa13a4940ceeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double &amp; QCPVector2D::rx</definition>
        <argsstring>()</argsstring>
        <name>rx</name>
        <qualifiedname>QCPVector2D::rx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="416" column="10" bodyfile="qcustomplot.h" bodystart="416" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a0abf7321f6189c55df16639df558f2d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double &amp; QCPVector2D::ry</definition>
        <argsstring>()</argsstring>
        <name>ry</name>
        <qualifiedname>QCPVector2D::ry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="417" column="10" bodyfile="qcustomplot.h" bodystart="417" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1ab4249e6ce7bfc37be56f014c54b761ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QCPVector2D::setX</definition>
        <argsstring>(double x)</argsstring>
        <name>setX</name>
        <qualifiedname>QCPVector2D::setX</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the x coordinate of this vector to <emphasis>x</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_vector2_d_1ada288019aa8cd51e3b30acfc07b461dc" kindref="member">setY</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="420" column="8" bodyfile="qcustomplot.h" bodystart="420" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1ada288019aa8cd51e3b30acfc07b461dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QCPVector2D::setY</definition>
        <argsstring>(double y)</argsstring>
        <name>setY</name>
        <qualifiedname>QCPVector2D::setY</qualifiedname>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the y coordinate of this vector to <emphasis>y</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_vector2_d_1ab4249e6ce7bfc37be56f014c54b761ae" kindref="member">setX</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="421" column="8" bodyfile="qcustomplot.h" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double QCPVector2D::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <qualifiedname>QCPVector2D::length</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the length of this vector.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_vector2_d_1a766585459d84cb149334fda1a498b2e5" kindref="member">lengthSquared</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="424" column="10" bodyfile="qcustomplot.h" bodystart="424" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a766585459d84cb149334fda1a498b2e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double QCPVector2D::lengthSquared</definition>
        <argsstring>() const</argsstring>
        <name>lengthSquared</name>
        <qualifiedname>QCPVector2D::lengthSquared</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the squared length of this vector. In some situations, e.g. when just trying to find the shortest vector of a group, this is faster than calculating <ref refid="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e" kindref="member">length</ref>, because it avoids calculation of a square root.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e" kindref="member">length</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="425" column="10" bodyfile="qcustomplot.h" bodystart="425" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a2d3ff018ba2aca0ac0d15db35d45a4de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double QCPVector2D::angle</definition>
        <argsstring>() const</argsstring>
        <name>angle</name>
        <qualifiedname>QCPVector2D::angle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the angle of the vector in radians. The angle is measured between the positive x line and the vector, counter-clockwise in a mathematical coordinate system (y axis upwards positive). In screen/widget coordinates where the y axis is inverted, the angle appears clockwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="426" column="10" bodyfile="qcustomplot.h" bodystart="426" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1add3edf75de9b7bf1abc693b973b2e906" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPoint</type>
        <definition>QPoint QCPVector2D::toPoint</definition>
        <argsstring>() const</argsstring>
        <name>toPoint</name>
        <qualifiedname>QCPVector2D::toPoint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a QPoint which has the x and y coordinates of this vector, truncating any floating point information.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_vector2_d_1acd7af3f4a62833ada58be3f3021dbbac" kindref="member">toPointF</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="427" column="10" bodyfile="qcustomplot.h" bodystart="427" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1acd7af3f4a62833ada58be3f3021dbbac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPointF</type>
        <definition>QPointF QCPVector2D::toPointF</definition>
        <argsstring>() const</argsstring>
        <name>toPointF</name>
        <qualifiedname>QCPVector2D::toPointF</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a QPointF which has the x and y coordinates of this vector.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_vector2_d_1add3edf75de9b7bf1abc693b973b2e906" kindref="member">toPoint</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="428" column="11" bodyfile="qcustomplot.h" bodystart="428" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1ace99f200b347b14864808213eef16593" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPVector2D::isNull</definition>
        <argsstring>() const</argsstring>
        <name>isNull</name>
        <qualifiedname>QCPVector2D::isNull</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether this vector is null. A vector is null if <computeroutput>qIsNull</computeroutput> returns true for both x and y coordinates, i.e. if both are binary equal to 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="430" column="8" bodyfile="qcustomplot.h" bodystart="430" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1ad83268be370685c2a0630acc0fb1a425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPVector2D::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <qualifiedname>QCPVector2D::normalize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Normalizes this vector. After this operation, the length of the vector is equal to 1.</para>
<para>If the vector has both entries set to zero, this method does nothing.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_vector2_d_1a707bb3af3b1f9331a2450ec75eaf7eb0" kindref="member">normalized</ref>, <ref refid="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e" kindref="member">length</ref>, <ref refid="class_q_c_p_vector2_d_1a766585459d84cb149334fda1a498b2e5" kindref="member">lengthSquared</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="431" column="8" bodyfile="qcustomplot.cpp" bodystart="161" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a707bb3af3b1f9331a2450ec75eaf7eb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref></type>
        <definition>QCPVector2D QCPVector2D::normalized</definition>
        <argsstring>() const</argsstring>
        <name>normalized</name>
        <qualifiedname>QCPVector2D::normalized</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a normalized version of this vector. The length of the returned vector is equal to 1.</para>
<para>If the vector has both entries set to zero, this method returns the vector unmodified.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_vector2_d_1ad83268be370685c2a0630acc0fb1a425" kindref="member">normalize</ref>, <ref refid="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e" kindref="member">length</ref>, <ref refid="class_q_c_p_vector2_d_1a766585459d84cb149334fda1a498b2e5" kindref="member">lengthSquared</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="432" column="15" bodyfile="qcustomplot.cpp" bodystart="176" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a0e08d09f9027784237e302e32290b001" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref></type>
        <definition>QCPVector2D QCPVector2D::perpendicular</definition>
        <argsstring>() const</argsstring>
        <name>perpendicular</name>
        <qualifiedname>QCPVector2D::perpendicular</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a vector perpendicular to this vector, with the same length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="433" column="15" bodyfile="qcustomplot.h" bodystart="433" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a39f8d28db7dbffcca6aa63a1f1f6e176" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double QCPVector2D::dot</definition>
        <argsstring>(const QCPVector2D &amp;vec) const</argsstring>
        <name>dot</name>
        <qualifiedname>QCPVector2D::dot</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the dot/scalar product of this vector with the specified vector <emphasis>vec</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="434" column="10" bodyfile="qcustomplot.h" bodystart="434" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a14840cd3da80cfee4eb3f8977cab89ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QCPVector2D::distanceSquaredToLine</definition>
        <argsstring>(const QCPVector2D &amp;start, const QCPVector2D &amp;end) const</argsstring>
        <name>distanceSquaredToLine</name>
        <qualifiedname>QCPVector2D::distanceSquaredToLine</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Returns the squared shortest distance of this vector (interpreted as a point) to the finite line segment given by <emphasis>start</emphasis> and <emphasis>end</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_vector2_d_1ae240b845c3744e43a5d0aa7b2bb66c19" kindref="member">distanceToStraightLine</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="435" column="10" bodyfile="qcustomplot.cpp" bodystart="190" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a0c44ca97d46ee04feec32c1c57e70831" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QCPVector2D::distanceSquaredToLine</definition>
        <argsstring>(const QLineF &amp;line) const</argsstring>
        <name>distanceSquaredToLine</name>
        <qualifiedname>QCPVector2D::distanceSquaredToLine</qualifiedname>
        <param>
          <type>const QLineF &amp;</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Returns the squared shortest distance of this vector (interpreted as a point) to the finite line segment given by <emphasis>line</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_vector2_d_1ae240b845c3744e43a5d0aa7b2bb66c19" kindref="member">distanceToStraightLine</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="436" column="10" bodyfile="qcustomplot.cpp" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1ae240b845c3744e43a5d0aa7b2bb66c19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QCPVector2D::distanceToStraightLine</definition>
        <argsstring>(const QCPVector2D &amp;base, const QCPVector2D &amp;direction) const</argsstring>
        <name>distanceToStraightLine</name>
        <qualifiedname>QCPVector2D::distanceToStraightLine</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the shortest distance of this vector (interpreted as a point) to the infinite straight line given by a <emphasis>base</emphasis> point and a <emphasis>direction</emphasis> vector.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_vector2_d_1a14840cd3da80cfee4eb3f8977cab89ab" kindref="member">distanceSquaredToLine</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="437" column="10" bodyfile="qcustomplot.cpp" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1aa52a246d168f475a4231c7bdfdac7df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
        <definition>QCPVector2D &amp; QCPVector2D::operator*=</definition>
        <argsstring>(double factor)</argsstring>
        <name>operator*=</name>
        <qualifiedname>QCPVector2D::operator*=</qualifiedname>
        <param>
          <type>double</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scales this vector by the given <emphasis>factor</emphasis>, i.e. the x and y components are multiplied by <emphasis>factor</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="439" column="15" bodyfile="qcustomplot.cpp" bodystart="234" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1aefa55eb9282c066a330ca281881e0ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
        <definition>QCPVector2D &amp; QCPVector2D::operator/=</definition>
        <argsstring>(double divisor)</argsstring>
        <name>operator/=</name>
        <qualifiedname>QCPVector2D::operator/=</qualifiedname>
        <param>
          <type>double</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scales this vector by the given <emphasis>divisor</emphasis>, i.e. the x and y components are divided by <emphasis>divisor</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="440" column="15" bodyfile="qcustomplot.cpp" bodystart="245" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1aa2c34754ce8839b2d074dec741783c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
        <definition>QCPVector2D &amp; QCPVector2D::operator+=</definition>
        <argsstring>(const QCPVector2D &amp;vector)</argsstring>
        <name>operator+=</name>
        <qualifiedname>QCPVector2D::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the given <emphasis>vector</emphasis> to this vector component-wise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="441" column="15" bodyfile="qcustomplot.cpp" bodystart="255" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a3a2e906bb924983bb801e89f28a3d566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
        <definition>QCPVector2D &amp; QCPVector2D::operator-=</definition>
        <argsstring>(const QCPVector2D &amp;vector)</argsstring>
        <name>operator-=</name>
        <qualifiedname>QCPVector2D::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>subtracts the given <emphasis>vector</emphasis> from this vector component-wise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="442" column="15" bodyfile="qcustomplot.cpp" bodystart="265" bodyend="270"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_c_p_vector2_d_1aa75268fb64b9eaee5448fb815007bee9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref></type>
        <definition>const QCPVector2D operator*</definition>
        <argsstring>(double factor, const QCPVector2D &amp;vec)</argsstring>
        <name>operator*</name>
        <qualifiedname>QCPVector2D::operator*</qualifiedname>
        <param>
          <type>double</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="448" column="35" bodyfile="qcustomplot.h" bodystart="457" bodyend="457"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_vector2_d_1aace10d28a76e84e7380ede1a9cb58274" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref></type>
        <definition>const QCPVector2D operator*</definition>
        <argsstring>(const QCPVector2D &amp;vec, double factor)</argsstring>
        <name>operator*</name>
        <qualifiedname>QCPVector2D::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="449" column="35" bodyfile="qcustomplot.h" bodystart="458" bodyend="458"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_vector2_d_1aa69909afc8c656999a2ea292ea01244b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref></type>
        <definition>const QCPVector2D operator/</definition>
        <argsstring>(const QCPVector2D &amp;vec, double divisor)</argsstring>
        <name>operator/</name>
        <qualifiedname>QCPVector2D::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="450" column="35" bodyfile="qcustomplot.h" bodystart="459" bodyend="459"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_vector2_d_1a24cc5985429b12dbed4d0d3c5a917d20" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref></type>
        <definition>const QCPVector2D operator+</definition>
        <argsstring>(const QCPVector2D &amp;vec1, const QCPVector2D &amp;vec2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QCPVector2D::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vec1</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vec2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="451" column="35" bodyfile="qcustomplot.h" bodystart="460" bodyend="460"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_vector2_d_1a9e01331d8debf0877ee4cba9abd83605" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref></type>
        <definition>const QCPVector2D operator-</definition>
        <argsstring>(const QCPVector2D &amp;vec1, const QCPVector2D &amp;vec2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QCPVector2D::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vec1</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vec2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="452" column="35" bodyfile="qcustomplot.h" bodystart="461" bodyend="461"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_vector2_d_1a14c807d345ee3f22d6809bb5a4137b52" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref></type>
        <definition>const QCPVector2D operator-</definition>
        <argsstring>(const QCPVector2D &amp;vec)</argsstring>
        <name>operator-</name>
        <qualifiedname>QCPVector2D::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="453" column="35" bodyfile="qcustomplot.h" bodystart="462" bodyend="462"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="related">
      <memberdef kind="function" id="class_q_c_p_vector2_d_1a6c757af9671d925af4a36c2f58fb7234" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>QDebug</type>
        <definition>QDebug operator&lt;&lt;</definition>
        <argsstring>(QDebug d, const QCPVector2D &amp;vec)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QCPVector2D::operator&lt;&lt;</qualifiedname>
        <param>
          <type>QDebug</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="class_q_c_p_vector2_d" kindref="compound">QCPVector2D</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints <emphasis>vec</emphasis> in a human readable format to the qDebug output. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="468" column="8" bodyfile="qcustomplot.h" bodystart="468" bodyend="472"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Represents two doubles as a mathematical 2D vector. </para>
    </briefdescription>
    <detaileddescription>
<para>This class acts as a replacement for QVector2D with the advantage of double precision instead of single, and some convenience methods tailored for the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> library. </para>
    </detaileddescription>
    <location file="qcustomplot.h" line="405" column="1" bodyfile="qcustomplot.h" bodystart="406" bodyend="454"/>
    <listofallmembers>
      <member refid="class_q_c_p_vector2_d_1a2d3ff018ba2aca0ac0d15db35d45a4de" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>angle</name></member>
      <member refid="class_q_c_p_vector2_d_1a14840cd3da80cfee4eb3f8977cab89ab" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>distanceSquaredToLine</name></member>
      <member refid="class_q_c_p_vector2_d_1a0c44ca97d46ee04feec32c1c57e70831" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>distanceSquaredToLine</name></member>
      <member refid="class_q_c_p_vector2_d_1ae240b845c3744e43a5d0aa7b2bb66c19" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>distanceToStraightLine</name></member>
      <member refid="class_q_c_p_vector2_d_1a39f8d28db7dbffcca6aa63a1f1f6e176" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>dot</name></member>
      <member refid="class_q_c_p_vector2_d_1ace99f200b347b14864808213eef16593" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>isNull</name></member>
      <member refid="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>length</name></member>
      <member refid="class_q_c_p_vector2_d_1a766585459d84cb149334fda1a498b2e5" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>lengthSquared</name></member>
      <member refid="class_q_c_p_vector2_d_1ab6f67c521be2e7eea7d31175d086ac2c" prot="private" virt="non-virtual"><scope>QCPVector2D</scope><name>mX</name></member>
      <member refid="class_q_c_p_vector2_d_1a1b6dbdfb973c4cb478116cd610265e13" prot="private" virt="non-virtual"><scope>QCPVector2D</scope><name>mY</name></member>
      <member refid="class_q_c_p_vector2_d_1ad83268be370685c2a0630acc0fb1a425" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>normalize</name></member>
      <member refid="class_q_c_p_vector2_d_1a707bb3af3b1f9331a2450ec75eaf7eb0" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>normalized</name></member>
      <member refid="class_q_c_p_vector2_d_1aa75268fb64b9eaee5448fb815007bee9" prot="private" virt="non-virtual"><scope>QCPVector2D</scope><name>operator*</name></member>
      <member refid="class_q_c_p_vector2_d_1aace10d28a76e84e7380ede1a9cb58274" prot="private" virt="non-virtual"><scope>QCPVector2D</scope><name>operator*</name></member>
      <member refid="class_q_c_p_vector2_d_1aa52a246d168f475a4231c7bdfdac7df1" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>operator*=</name></member>
      <member refid="class_q_c_p_vector2_d_1a24cc5985429b12dbed4d0d3c5a917d20" prot="private" virt="non-virtual"><scope>QCPVector2D</scope><name>operator+</name></member>
      <member refid="class_q_c_p_vector2_d_1aa2c34754ce8839b2d074dec741783c5e" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>operator+=</name></member>
      <member refid="class_q_c_p_vector2_d_1a9e01331d8debf0877ee4cba9abd83605" prot="private" virt="non-virtual"><scope>QCPVector2D</scope><name>operator-</name></member>
      <member refid="class_q_c_p_vector2_d_1a14c807d345ee3f22d6809bb5a4137b52" prot="private" virt="non-virtual"><scope>QCPVector2D</scope><name>operator-</name></member>
      <member refid="class_q_c_p_vector2_d_1a3a2e906bb924983bb801e89f28a3d566" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>operator-=</name></member>
      <member refid="class_q_c_p_vector2_d_1aa69909afc8c656999a2ea292ea01244b" prot="private" virt="non-virtual"><scope>QCPVector2D</scope><name>operator/</name></member>
      <member refid="class_q_c_p_vector2_d_1aefa55eb9282c066a330ca281881e0ec0" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>operator/=</name></member>
      <member refid="class_q_c_p_vector2_d_1a6c757af9671d925af4a36c2f58fb7234" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_q_c_p_vector2_d_1a0e08d09f9027784237e302e32290b001" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>perpendicular</name></member>
      <member refid="class_q_c_p_vector2_d_1a04c90748c3623044c79fa20788ffbcc6" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>QCPVector2D</name></member>
      <member refid="class_q_c_p_vector2_d_1a47bd86cebc5588dad6ec84349d9098d4" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>QCPVector2D</name></member>
      <member refid="class_q_c_p_vector2_d_1ad8f30a064dc37c90a7ba5e6732ceb5bb" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>QCPVector2D</name></member>
      <member refid="class_q_c_p_vector2_d_1a3c16eba1006c210ffc3299253fef2339" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>QCPVector2D</name></member>
      <member refid="class_q_c_p_vector2_d_1a9edab8e9318fde288dbfa13a4940ceeb" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>rx</name></member>
      <member refid="class_q_c_p_vector2_d_1a0abf7321f6189c55df16639df558f2d7" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>ry</name></member>
      <member refid="class_q_c_p_vector2_d_1ab4249e6ce7bfc37be56f014c54b761ae" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>setX</name></member>
      <member refid="class_q_c_p_vector2_d_1ada288019aa8cd51e3b30acfc07b461dc" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>setY</name></member>
      <member refid="class_q_c_p_vector2_d_1add3edf75de9b7bf1abc693b973b2e906" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>toPoint</name></member>
      <member refid="class_q_c_p_vector2_d_1acd7af3f4a62833ada58be3f3021dbbac" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>toPointF</name></member>
      <member refid="class_q_c_p_vector2_d_1a4a099e1f9788d52cb46deb8139aa6195" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>x</name></member>
      <member refid="class_q_c_p_vector2_d_1a6398fb643ba380d7961a4b208f4eecf1" prot="public" virt="non-virtual"><scope>QCPVector2D</scope><name>y</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
